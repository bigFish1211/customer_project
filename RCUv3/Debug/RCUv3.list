
RCUv3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d50  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f0  08004e08  08004e08  00005e08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050f8  080050f8  00007090  2**0
                  CONTENTS
  4 .ARM          00000000  080050f8  080050f8  00007090  2**0
                  CONTENTS
  5 .preinit_array 00000000  080050f8  080050f8  00007090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050f8  080050f8  000060f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080050fc  080050fc  000060fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000090  20000000  08005100  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000da0  20000090  08005190  00007090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000e30  08005190  00007e30  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000802e  00000000  00000000  000070b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002425  00000000  00000000  0000f0e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a38  00000000  00000000  00011510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000780  00000000  00000000  00011f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004e66  00000000  00000000  000126c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a3f5  00000000  00000000  0001752e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006fb32  00000000  00000000  00021923  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00091455  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027cc  00000000  00000000  00091498  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000046  00000000  00000000  00093c64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000090 	.word	0x20000090
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08004df0 	.word	0x08004df0

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000094 	.word	0x20000094
 80000fc:	08004df0 	.word	0x08004df0

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__gnu_thumb1_case_shi>:
 8000110:	b403      	push	{r0, r1}
 8000112:	4671      	mov	r1, lr
 8000114:	0849      	lsrs	r1, r1, #1
 8000116:	0040      	lsls	r0, r0, #1
 8000118:	0049      	lsls	r1, r1, #1
 800011a:	5e09      	ldrsh	r1, [r1, r0]
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	448e      	add	lr, r1
 8000120:	bc03      	pop	{r0, r1}
 8000122:	4770      	bx	lr

08000124 <__udivsi3>:
 8000124:	2200      	movs	r2, #0
 8000126:	0843      	lsrs	r3, r0, #1
 8000128:	428b      	cmp	r3, r1
 800012a:	d374      	bcc.n	8000216 <__udivsi3+0xf2>
 800012c:	0903      	lsrs	r3, r0, #4
 800012e:	428b      	cmp	r3, r1
 8000130:	d35f      	bcc.n	80001f2 <__udivsi3+0xce>
 8000132:	0a03      	lsrs	r3, r0, #8
 8000134:	428b      	cmp	r3, r1
 8000136:	d344      	bcc.n	80001c2 <__udivsi3+0x9e>
 8000138:	0b03      	lsrs	r3, r0, #12
 800013a:	428b      	cmp	r3, r1
 800013c:	d328      	bcc.n	8000190 <__udivsi3+0x6c>
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d30d      	bcc.n	8000160 <__udivsi3+0x3c>
 8000144:	22ff      	movs	r2, #255	@ 0xff
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	ba12      	rev	r2, r2
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d302      	bcc.n	8000156 <__udivsi3+0x32>
 8000150:	1212      	asrs	r2, r2, #8
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	d065      	beq.n	8000222 <__udivsi3+0xfe>
 8000156:	0b03      	lsrs	r3, r0, #12
 8000158:	428b      	cmp	r3, r1
 800015a:	d319      	bcc.n	8000190 <__udivsi3+0x6c>
 800015c:	e000      	b.n	8000160 <__udivsi3+0x3c>
 800015e:	0a09      	lsrs	r1, r1, #8
 8000160:	0bc3      	lsrs	r3, r0, #15
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x46>
 8000166:	03cb      	lsls	r3, r1, #15
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b83      	lsrs	r3, r0, #14
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x52>
 8000172:	038b      	lsls	r3, r1, #14
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b43      	lsrs	r3, r0, #13
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x5e>
 800017e:	034b      	lsls	r3, r1, #13
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b03      	lsrs	r3, r0, #12
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x6a>
 800018a:	030b      	lsls	r3, r1, #12
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0ac3      	lsrs	r3, r0, #11
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x76>
 8000196:	02cb      	lsls	r3, r1, #11
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a83      	lsrs	r3, r0, #10
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x82>
 80001a2:	028b      	lsls	r3, r1, #10
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a43      	lsrs	r3, r0, #9
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x8e>
 80001ae:	024b      	lsls	r3, r1, #9
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a03      	lsrs	r3, r0, #8
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x9a>
 80001ba:	020b      	lsls	r3, r1, #8
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	d2cd      	bcs.n	800015e <__udivsi3+0x3a>
 80001c2:	09c3      	lsrs	r3, r0, #7
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xa8>
 80001c8:	01cb      	lsls	r3, r1, #7
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0983      	lsrs	r3, r0, #6
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xb4>
 80001d4:	018b      	lsls	r3, r1, #6
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0943      	lsrs	r3, r0, #5
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xc0>
 80001e0:	014b      	lsls	r3, r1, #5
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0903      	lsrs	r3, r0, #4
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xcc>
 80001ec:	010b      	lsls	r3, r1, #4
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	08c3      	lsrs	r3, r0, #3
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xd8>
 80001f8:	00cb      	lsls	r3, r1, #3
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0883      	lsrs	r3, r0, #2
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xe4>
 8000204:	008b      	lsls	r3, r1, #2
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0843      	lsrs	r3, r0, #1
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xf0>
 8000210:	004b      	lsls	r3, r1, #1
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	1a41      	subs	r1, r0, r1
 8000218:	d200      	bcs.n	800021c <__udivsi3+0xf8>
 800021a:	4601      	mov	r1, r0
 800021c:	4152      	adcs	r2, r2
 800021e:	4610      	mov	r0, r2
 8000220:	4770      	bx	lr
 8000222:	e7ff      	b.n	8000224 <__udivsi3+0x100>
 8000224:	b501      	push	{r0, lr}
 8000226:	2000      	movs	r0, #0
 8000228:	f000 f806 	bl	8000238 <__aeabi_idiv0>
 800022c:	bd02      	pop	{r1, pc}
 800022e:	46c0      	nop			@ (mov r8, r8)

08000230 <__aeabi_uidivmod>:
 8000230:	2900      	cmp	r1, #0
 8000232:	d0f7      	beq.n	8000224 <__udivsi3+0x100>
 8000234:	e776      	b.n	8000124 <__udivsi3>
 8000236:	4770      	bx	lr

08000238 <__aeabi_idiv0>:
 8000238:	4770      	bx	lr
 800023a:	46c0      	nop			@ (mov r8, r8)

0800023c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b084      	sub	sp, #16
 8000240:	af00      	add	r7, sp, #0
 8000242:	60f8      	str	r0, [r7, #12]
 8000244:	60b9      	str	r1, [r7, #8]
 8000246:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8000248:	68fb      	ldr	r3, [r7, #12]
 800024a:	6819      	ldr	r1, [r3, #0]
 800024c:	68bb      	ldr	r3, [r7, #8]
 800024e:	435b      	muls	r3, r3
 8000250:	001a      	movs	r2, r3
 8000252:	0013      	movs	r3, r2
 8000254:	005b      	lsls	r3, r3, #1
 8000256:	189b      	adds	r3, r3, r2
 8000258:	43db      	mvns	r3, r3
 800025a:	400b      	ands	r3, r1
 800025c:	001a      	movs	r2, r3
 800025e:	68bb      	ldr	r3, [r7, #8]
 8000260:	435b      	muls	r3, r3
 8000262:	6879      	ldr	r1, [r7, #4]
 8000264:	434b      	muls	r3, r1
 8000266:	431a      	orrs	r2, r3
 8000268:	68fb      	ldr	r3, [r7, #12]
 800026a:	601a      	str	r2, [r3, #0]
}
 800026c:	46c0      	nop			@ (mov r8, r8)
 800026e:	46bd      	mov	sp, r7
 8000270:	b004      	add	sp, #16
 8000272:	bd80      	pop	{r7, pc}

08000274 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b084      	sub	sp, #16
 8000278:	af00      	add	r7, sp, #0
 800027a:	60f8      	str	r0, [r7, #12]
 800027c:	60b9      	str	r1, [r7, #8]
 800027e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000280:	68fb      	ldr	r3, [r7, #12]
 8000282:	685b      	ldr	r3, [r3, #4]
 8000284:	68ba      	ldr	r2, [r7, #8]
 8000286:	43d2      	mvns	r2, r2
 8000288:	401a      	ands	r2, r3
 800028a:	68bb      	ldr	r3, [r7, #8]
 800028c:	6879      	ldr	r1, [r7, #4]
 800028e:	434b      	muls	r3, r1
 8000290:	431a      	orrs	r2, r3
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	605a      	str	r2, [r3, #4]
}
 8000296:	46c0      	nop			@ (mov r8, r8)
 8000298:	46bd      	mov	sp, r7
 800029a:	b004      	add	sp, #16
 800029c:	bd80      	pop	{r7, pc}

0800029e <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800029e:	b580      	push	{r7, lr}
 80002a0:	b084      	sub	sp, #16
 80002a2:	af00      	add	r7, sp, #0
 80002a4:	60f8      	str	r0, [r7, #12]
 80002a6:	60b9      	str	r1, [r7, #8]
 80002a8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 80002aa:	68fb      	ldr	r3, [r7, #12]
 80002ac:	6899      	ldr	r1, [r3, #8]
 80002ae:	68bb      	ldr	r3, [r7, #8]
 80002b0:	435b      	muls	r3, r3
 80002b2:	001a      	movs	r2, r3
 80002b4:	0013      	movs	r3, r2
 80002b6:	005b      	lsls	r3, r3, #1
 80002b8:	189b      	adds	r3, r3, r2
 80002ba:	43db      	mvns	r3, r3
 80002bc:	400b      	ands	r3, r1
 80002be:	001a      	movs	r2, r3
 80002c0:	68bb      	ldr	r3, [r7, #8]
 80002c2:	435b      	muls	r3, r3
 80002c4:	6879      	ldr	r1, [r7, #4]
 80002c6:	434b      	muls	r3, r1
 80002c8:	431a      	orrs	r2, r3
 80002ca:	68fb      	ldr	r3, [r7, #12]
 80002cc:	609a      	str	r2, [r3, #8]
}
 80002ce:	46c0      	nop			@ (mov r8, r8)
 80002d0:	46bd      	mov	sp, r7
 80002d2:	b004      	add	sp, #16
 80002d4:	bd80      	pop	{r7, pc}

080002d6 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80002d6:	b580      	push	{r7, lr}
 80002d8:	b084      	sub	sp, #16
 80002da:	af00      	add	r7, sp, #0
 80002dc:	60f8      	str	r0, [r7, #12]
 80002de:	60b9      	str	r1, [r7, #8]
 80002e0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80002e2:	68fb      	ldr	r3, [r7, #12]
 80002e4:	68d9      	ldr	r1, [r3, #12]
 80002e6:	68bb      	ldr	r3, [r7, #8]
 80002e8:	435b      	muls	r3, r3
 80002ea:	001a      	movs	r2, r3
 80002ec:	0013      	movs	r3, r2
 80002ee:	005b      	lsls	r3, r3, #1
 80002f0:	189b      	adds	r3, r3, r2
 80002f2:	43db      	mvns	r3, r3
 80002f4:	400b      	ands	r3, r1
 80002f6:	001a      	movs	r2, r3
 80002f8:	68bb      	ldr	r3, [r7, #8]
 80002fa:	435b      	muls	r3, r3
 80002fc:	6879      	ldr	r1, [r7, #4]
 80002fe:	434b      	muls	r3, r1
 8000300:	431a      	orrs	r2, r3
 8000302:	68fb      	ldr	r3, [r7, #12]
 8000304:	60da      	str	r2, [r3, #12]
}
 8000306:	46c0      	nop			@ (mov r8, r8)
 8000308:	46bd      	mov	sp, r7
 800030a:	b004      	add	sp, #16
 800030c:	bd80      	pop	{r7, pc}

0800030e <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_6
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800030e:	b580      	push	{r7, lr}
 8000310:	b084      	sub	sp, #16
 8000312:	af00      	add	r7, sp, #0
 8000314:	60f8      	str	r0, [r7, #12]
 8000316:	60b9      	str	r1, [r7, #8]
 8000318:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 800031a:	68fb      	ldr	r3, [r7, #12]
 800031c:	6a19      	ldr	r1, [r3, #32]
 800031e:	68bb      	ldr	r3, [r7, #8]
 8000320:	435b      	muls	r3, r3
 8000322:	68ba      	ldr	r2, [r7, #8]
 8000324:	4353      	muls	r3, r2
 8000326:	68ba      	ldr	r2, [r7, #8]
 8000328:	435a      	muls	r2, r3
 800032a:	0013      	movs	r3, r2
 800032c:	011b      	lsls	r3, r3, #4
 800032e:	1a9b      	subs	r3, r3, r2
 8000330:	43db      	mvns	r3, r3
 8000332:	400b      	ands	r3, r1
 8000334:	001a      	movs	r2, r3
 8000336:	68bb      	ldr	r3, [r7, #8]
 8000338:	435b      	muls	r3, r3
 800033a:	68b9      	ldr	r1, [r7, #8]
 800033c:	434b      	muls	r3, r1
 800033e:	68b9      	ldr	r1, [r7, #8]
 8000340:	434b      	muls	r3, r1
 8000342:	6879      	ldr	r1, [r7, #4]
 8000344:	434b      	muls	r3, r1
 8000346:	431a      	orrs	r2, r3
 8000348:	68fb      	ldr	r3, [r7, #12]
 800034a:	621a      	str	r2, [r3, #32]
             ((((Pin * Pin) * Pin) * Pin) * Alternate));
}
 800034c:	46c0      	nop			@ (mov r8, r8)
 800034e:	46bd      	mov	sp, r7
 8000350:	b004      	add	sp, #16
 8000352:	bd80      	pop	{r7, pc}

08000354 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_6
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b084      	sub	sp, #16
 8000358:	af00      	add	r7, sp, #0
 800035a:	60f8      	str	r0, [r7, #12]
 800035c:	60b9      	str	r1, [r7, #8]
 800035e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8000360:	68fb      	ldr	r3, [r7, #12]
 8000362:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8000364:	68bb      	ldr	r3, [r7, #8]
 8000366:	0a1b      	lsrs	r3, r3, #8
 8000368:	68ba      	ldr	r2, [r7, #8]
 800036a:	0a12      	lsrs	r2, r2, #8
 800036c:	4353      	muls	r3, r2
 800036e:	68ba      	ldr	r2, [r7, #8]
 8000370:	0a12      	lsrs	r2, r2, #8
 8000372:	4353      	muls	r3, r2
 8000374:	68ba      	ldr	r2, [r7, #8]
 8000376:	0a12      	lsrs	r2, r2, #8
 8000378:	435a      	muls	r2, r3
 800037a:	0013      	movs	r3, r2
 800037c:	011b      	lsls	r3, r3, #4
 800037e:	1a9b      	subs	r3, r3, r2
 8000380:	43db      	mvns	r3, r3
 8000382:	400b      	ands	r3, r1
 8000384:	001a      	movs	r2, r3
 8000386:	68bb      	ldr	r3, [r7, #8]
 8000388:	0a1b      	lsrs	r3, r3, #8
 800038a:	68b9      	ldr	r1, [r7, #8]
 800038c:	0a09      	lsrs	r1, r1, #8
 800038e:	434b      	muls	r3, r1
 8000390:	68b9      	ldr	r1, [r7, #8]
 8000392:	0a09      	lsrs	r1, r1, #8
 8000394:	434b      	muls	r3, r1
 8000396:	68b9      	ldr	r1, [r7, #8]
 8000398:	0a09      	lsrs	r1, r1, #8
 800039a:	434b      	muls	r3, r1
 800039c:	6879      	ldr	r1, [r7, #4]
 800039e:	434b      	muls	r3, r1
 80003a0:	431a      	orrs	r2, r3
 80003a2:	68fb      	ldr	r3, [r7, #12]
 80003a4:	625a      	str	r2, [r3, #36]	@ 0x24
             (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * Alternate));
}
 80003a6:	46c0      	nop			@ (mov r8, r8)
 80003a8:	46bd      	mov	sp, r7
 80003aa:	b004      	add	sp, #16
 80003ac:	bd80      	pop	{r7, pc}

080003ae <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80003ae:	b580      	push	{r7, lr}
 80003b0:	b084      	sub	sp, #16
 80003b2:	af00      	add	r7, sp, #0
 80003b4:	6078      	str	r0, [r7, #4]
 80003b6:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 80003b8:	2300      	movs	r3, #0
 80003ba:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80003bc:	e047      	b.n	800044e <LL_GPIO_Init+0xa0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80003be:	683b      	ldr	r3, [r7, #0]
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	2101      	movs	r1, #1
 80003c4:	68fa      	ldr	r2, [r7, #12]
 80003c6:	4091      	lsls	r1, r2
 80003c8:	000a      	movs	r2, r1
 80003ca:	4013      	ands	r3, r2
 80003cc:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 80003ce:	68bb      	ldr	r3, [r7, #8]
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d039      	beq.n	8000448 <LL_GPIO_Init+0x9a>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80003d4:	683b      	ldr	r3, [r7, #0]
 80003d6:	685b      	ldr	r3, [r3, #4]
 80003d8:	2b01      	cmp	r3, #1
 80003da:	d003      	beq.n	80003e4 <LL_GPIO_Init+0x36>
 80003dc:	683b      	ldr	r3, [r7, #0]
 80003de:	685b      	ldr	r3, [r3, #4]
 80003e0:	2b02      	cmp	r3, #2
 80003e2:	d10d      	bne.n	8000400 <LL_GPIO_Init+0x52>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80003e4:	683b      	ldr	r3, [r7, #0]
 80003e6:	689a      	ldr	r2, [r3, #8]
 80003e8:	68b9      	ldr	r1, [r7, #8]
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	0018      	movs	r0, r3
 80003ee:	f7ff ff56 	bl	800029e <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80003f2:	683b      	ldr	r3, [r7, #0]
 80003f4:	68da      	ldr	r2, [r3, #12]
 80003f6:	68b9      	ldr	r1, [r7, #8]
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	0018      	movs	r0, r3
 80003fc:	f7ff ff3a 	bl	8000274 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8000400:	683b      	ldr	r3, [r7, #0]
 8000402:	691a      	ldr	r2, [r3, #16]
 8000404:	68b9      	ldr	r1, [r7, #8]
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	0018      	movs	r0, r3
 800040a:	f7ff ff64 	bl	80002d6 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800040e:	683b      	ldr	r3, [r7, #0]
 8000410:	685b      	ldr	r3, [r3, #4]
 8000412:	2b02      	cmp	r3, #2
 8000414:	d111      	bne.n	800043a <LL_GPIO_Init+0x8c>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8000416:	68bb      	ldr	r3, [r7, #8]
 8000418:	2bff      	cmp	r3, #255	@ 0xff
 800041a:	d807      	bhi.n	800042c <LL_GPIO_Init+0x7e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800041c:	683b      	ldr	r3, [r7, #0]
 800041e:	695a      	ldr	r2, [r3, #20]
 8000420:	68b9      	ldr	r1, [r7, #8]
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	0018      	movs	r0, r3
 8000426:	f7ff ff72 	bl	800030e <LL_GPIO_SetAFPin_0_7>
 800042a:	e006      	b.n	800043a <LL_GPIO_Init+0x8c>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800042c:	683b      	ldr	r3, [r7, #0]
 800042e:	695a      	ldr	r2, [r3, #20]
 8000430:	68b9      	ldr	r1, [r7, #8]
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	0018      	movs	r0, r3
 8000436:	f7ff ff8d 	bl	8000354 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800043a:	683b      	ldr	r3, [r7, #0]
 800043c:	685a      	ldr	r2, [r3, #4]
 800043e:	68b9      	ldr	r1, [r7, #8]
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	0018      	movs	r0, r3
 8000444:	f7ff fefa 	bl	800023c <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8000448:	68fb      	ldr	r3, [r7, #12]
 800044a:	3301      	adds	r3, #1
 800044c:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800044e:	683b      	ldr	r3, [r7, #0]
 8000450:	681a      	ldr	r2, [r3, #0]
 8000452:	68fb      	ldr	r3, [r7, #12]
 8000454:	40da      	lsrs	r2, r3
 8000456:	1e13      	subs	r3, r2, #0
 8000458:	d1b1      	bne.n	80003be <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 800045a:	2300      	movs	r3, #0
}
 800045c:	0018      	movs	r0, r3
 800045e:	46bd      	mov	sp, r7
 8000460:	b004      	add	sp, #16
 8000462:	bd80      	pop	{r7, pc}

08000464 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b082      	sub	sp, #8
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	2201      	movs	r2, #1
 8000472:	431a      	orrs	r2, r3
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	601a      	str	r2, [r3, #0]
}
 8000478:	46c0      	nop			@ (mov r8, r8)
 800047a:	46bd      	mov	sp, r7
 800047c:	b002      	add	sp, #8
 800047e:	bd80      	pop	{r7, pc}

08000480 <LL_I2C_Disable>:
  * @rmtoll CR1          PE            LL_I2C_Disable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Disable(I2C_TypeDef *I2Cx)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b082      	sub	sp, #8
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	2201      	movs	r2, #1
 800048e:	4393      	bics	r3, r2
 8000490:	001a      	movs	r2, r3
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	601a      	str	r2, [r3, #0]
}
 8000496:	46c0      	nop			@ (mov r8, r8)
 8000498:	46bd      	mov	sp, r7
 800049a:	b002      	add	sp, #8
 800049c:	bd80      	pop	{r7, pc}
	...

080004a0 <LL_I2C_ConfigFilters>:
  *         This parameter is used to configure the digital noise filter on SDA and SCL input.
  *         The digital filter will filter spikes with a length of up to DNF[3:0]*ti2cclk.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigFilters(I2C_TypeDef *I2Cx, uint32_t AnalogFilter, uint32_t DigitalFilter)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b084      	sub	sp, #16
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	60f8      	str	r0, [r7, #12]
 80004a8:	60b9      	str	r1, [r7, #8]
 80004aa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 80004ac:	68fb      	ldr	r3, [r7, #12]
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	4a06      	ldr	r2, [pc, #24]	@ (80004cc <LL_I2C_ConfigFilters+0x2c>)
 80004b2:	401a      	ands	r2, r3
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	0219      	lsls	r1, r3, #8
 80004b8:	68bb      	ldr	r3, [r7, #8]
 80004ba:	430b      	orrs	r3, r1
 80004bc:	431a      	orrs	r2, r3
 80004be:	68fb      	ldr	r3, [r7, #12]
 80004c0:	601a      	str	r2, [r3, #0]
}
 80004c2:	46c0      	nop			@ (mov r8, r8)
 80004c4:	46bd      	mov	sp, r7
 80004c6:	b004      	add	sp, #16
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	46c0      	nop			@ (mov r8, r8)
 80004cc:	ffffe0ff 	.word	0xffffe0ff

080004d0 <LL_I2C_SetOwnAddress1>:
  *         @arg @ref LL_I2C_OWNADDRESS1_7BIT
  *         @arg @ref LL_I2C_OWNADDRESS1_10BIT
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress1(I2C_TypeDef *I2Cx, uint32_t OwnAddress1, uint32_t OwnAddrSize)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b084      	sub	sp, #16
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	60f8      	str	r0, [r7, #12]
 80004d8:	60b9      	str	r1, [r7, #8]
 80004da:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	689b      	ldr	r3, [r3, #8]
 80004e0:	0adb      	lsrs	r3, r3, #11
 80004e2:	02da      	lsls	r2, r3, #11
 80004e4:	68b9      	ldr	r1, [r7, #8]
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	430b      	orrs	r3, r1
 80004ea:	431a      	orrs	r2, r3
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	609a      	str	r2, [r3, #8]
}
 80004f0:	46c0      	nop			@ (mov r8, r8)
 80004f2:	46bd      	mov	sp, r7
 80004f4:	b004      	add	sp, #16
 80004f6:	bd80      	pop	{r7, pc}

080004f8 <LL_I2C_EnableOwnAddress1>:
  * @rmtoll OAR1         OA1EN         LL_I2C_EnableOwnAddress1
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableOwnAddress1(I2C_TypeDef *I2Cx)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	689b      	ldr	r3, [r3, #8]
 8000504:	2280      	movs	r2, #128	@ 0x80
 8000506:	0212      	lsls	r2, r2, #8
 8000508:	431a      	orrs	r2, r3
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	609a      	str	r2, [r3, #8]
}
 800050e:	46c0      	nop			@ (mov r8, r8)
 8000510:	46bd      	mov	sp, r7
 8000512:	b002      	add	sp, #8
 8000514:	bd80      	pop	{r7, pc}
	...

08000518 <LL_I2C_DisableOwnAddress1>:
  * @rmtoll OAR1         OA1EN         LL_I2C_DisableOwnAddress1
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress1(I2C_TypeDef *I2Cx)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	689b      	ldr	r3, [r3, #8]
 8000524:	4a03      	ldr	r2, [pc, #12]	@ (8000534 <LL_I2C_DisableOwnAddress1+0x1c>)
 8000526:	401a      	ands	r2, r3
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	609a      	str	r2, [r3, #8]
}
 800052c:	46c0      	nop			@ (mov r8, r8)
 800052e:	46bd      	mov	sp, r7
 8000530:	b002      	add	sp, #8
 8000532:	bd80      	pop	{r7, pc}
 8000534:	ffff7fff 	.word	0xffff7fff

08000538 <LL_I2C_SetTiming>:
  * @param  Timing This parameter must be a value between Min_Data=0 and Max_Data=0xFFFFFFFF.
  * @note   This parameter is computed with the STM32CubeMX Tool.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetTiming(I2C_TypeDef *I2Cx, uint32_t Timing)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
 8000540:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	683a      	ldr	r2, [r7, #0]
 8000546:	611a      	str	r2, [r3, #16]
}
 8000548:	46c0      	nop			@ (mov r8, r8)
 800054a:	46bd      	mov	sp, r7
 800054c:	b002      	add	sp, #8
 800054e:	bd80      	pop	{r7, pc}

08000550 <LL_I2C_SetMode>:
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
 8000558:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	4a05      	ldr	r2, [pc, #20]	@ (8000574 <LL_I2C_SetMode+0x24>)
 8000560:	401a      	ands	r2, r3
 8000562:	683b      	ldr	r3, [r7, #0]
 8000564:	431a      	orrs	r2, r3
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	601a      	str	r2, [r3, #0]
}
 800056a:	46c0      	nop			@ (mov r8, r8)
 800056c:	46bd      	mov	sp, r7
 800056e:	b002      	add	sp, #8
 8000570:	bd80      	pop	{r7, pc}
 8000572:	46c0      	nop			@ (mov r8, r8)
 8000574:	ffcfffff 	.word	0xffcfffff

08000578 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
 8000580:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	685b      	ldr	r3, [r3, #4]
 8000586:	4a05      	ldr	r2, [pc, #20]	@ (800059c <LL_I2C_AcknowledgeNextData+0x24>)
 8000588:	401a      	ands	r2, r3
 800058a:	683b      	ldr	r3, [r7, #0]
 800058c:	431a      	orrs	r2, r3
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	605a      	str	r2, [r3, #4]
}
 8000592:	46c0      	nop			@ (mov r8, r8)
 8000594:	46bd      	mov	sp, r7
 8000596:	b002      	add	sp, #8
 8000598:	bd80      	pop	{r7, pc}
 800059a:	46c0      	nop			@ (mov r8, r8)
 800059c:	ffff7fff 	.word	0xffff7fff

080005a0 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
 80005a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	0018      	movs	r0, r3
 80005ae:	f7ff ff67 	bl	8000480 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 80005b2:	683b      	ldr	r3, [r7, #0]
 80005b4:	6899      	ldr	r1, [r3, #8]
 80005b6:	683b      	ldr	r3, [r7, #0]
 80005b8:	68da      	ldr	r2, [r3, #12]
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	0018      	movs	r0, r3
 80005be:	f7ff ff6f 	bl	80004a0 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 80005c2:	683b      	ldr	r3, [r7, #0]
 80005c4:	685a      	ldr	r2, [r3, #4]
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	0011      	movs	r1, r2
 80005ca:	0018      	movs	r0, r3
 80005cc:	f7ff ffb4 	bl	8000538 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	0018      	movs	r0, r3
 80005d4:	f7ff ff46 	bl	8000464 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	0018      	movs	r0, r3
 80005dc:	f7ff ff9c 	bl	8000518 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 80005e0:	683b      	ldr	r3, [r7, #0]
 80005e2:	6919      	ldr	r1, [r3, #16]
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	699a      	ldr	r2, [r3, #24]
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	0018      	movs	r0, r3
 80005ec:	f7ff ff70 	bl	80004d0 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	691b      	ldr	r3, [r3, #16]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d003      	beq.n	8000600 <LL_I2C_Init+0x60>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	0018      	movs	r0, r3
 80005fc:	f7ff ff7c 	bl	80004f8 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	681a      	ldr	r2, [r3, #0]
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	0011      	movs	r1, r2
 8000608:	0018      	movs	r0, r3
 800060a:	f7ff ffa1 	bl	8000550 <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	695a      	ldr	r2, [r3, #20]
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	0011      	movs	r1, r2
 8000616:	0018      	movs	r0, r3
 8000618:	f7ff ffae 	bl	8000578 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 800061c:	2300      	movs	r3, #0
}
 800061e:	0018      	movs	r0, r3
 8000620:	46bd      	mov	sp, r7
 8000622:	b002      	add	sp, #8
 8000624:	bd80      	pop	{r7, pc}

08000626 <LL_SPI_IsEnabled>:
  * @rmtoll CR1          SPE           LL_SPI_IsEnabled
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsEnabled(SPI_TypeDef *SPIx)
{
 8000626:	b580      	push	{r7, lr}
 8000628:	b082      	sub	sp, #8
 800062a:	af00      	add	r7, sp, #0
 800062c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	2240      	movs	r2, #64	@ 0x40
 8000634:	4013      	ands	r3, r2
 8000636:	2b40      	cmp	r3, #64	@ 0x40
 8000638:	d101      	bne.n	800063e <LL_SPI_IsEnabled+0x18>
 800063a:	2301      	movs	r3, #1
 800063c:	e000      	b.n	8000640 <LL_SPI_IsEnabled+0x1a>
 800063e:	2300      	movs	r3, #0
}
 8000640:	0018      	movs	r0, r3
 8000642:	46bd      	mov	sp, r7
 8000644:	b002      	add	sp, #8
 8000646:	bd80      	pop	{r7, pc}

08000648 <LL_SPI_SetRxFIFOThreshold>:
  *         @arg @ref LL_SPI_RX_FIFO_TH_HALF
  *         @arg @ref LL_SPI_RX_FIFO_TH_QUARTER
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetRxFIFOThreshold(SPI_TypeDef *SPIx, uint32_t Threshold)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
 8000650:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	685b      	ldr	r3, [r3, #4]
 8000656:	4a05      	ldr	r2, [pc, #20]	@ (800066c <LL_SPI_SetRxFIFOThreshold+0x24>)
 8000658:	401a      	ands	r2, r3
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	431a      	orrs	r2, r3
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	605a      	str	r2, [r3, #4]
}
 8000662:	46c0      	nop			@ (mov r8, r8)
 8000664:	46bd      	mov	sp, r7
 8000666:	b002      	add	sp, #8
 8000668:	bd80      	pop	{r7, pc}
 800066a:	46c0      	nop			@ (mov r8, r8)
 800066c:	ffffefff 	.word	0xffffefff

08000670 <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
 8000678:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 800067a:	683b      	ldr	r3, [r7, #0]
 800067c:	b29b      	uxth	r3, r3
 800067e:	001a      	movs	r2, r3
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	611a      	str	r2, [r3, #16]
}
 8000684:	46c0      	nop			@ (mov r8, r8)
 8000686:	46bd      	mov	sp, r7
 8000688:	b002      	add	sp, #8
 800068a:	bd80      	pop	{r7, pc}

0800068c <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
 8000694:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8000696:	230f      	movs	r3, #15
 8000698:	18fb      	adds	r3, r7, r3
 800069a:	2201      	movs	r2, #1
 800069c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	0018      	movs	r0, r3
 80006a2:	f7ff ffc0 	bl	8000626 <LL_SPI_IsEnabled>
 80006a6:	1e03      	subs	r3, r0, #0
 80006a8:	d148      	bne.n	800073c <LL_SPI_Init+0xb0>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	4a2a      	ldr	r2, [pc, #168]	@ (8000758 <LL_SPI_Init+0xcc>)
 80006b0:	401a      	ands	r2, r3
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	6819      	ldr	r1, [r3, #0]
 80006b6:	683b      	ldr	r3, [r7, #0]
 80006b8:	685b      	ldr	r3, [r3, #4]
 80006ba:	4319      	orrs	r1, r3
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	68db      	ldr	r3, [r3, #12]
 80006c0:	4319      	orrs	r1, r3
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	691b      	ldr	r3, [r3, #16]
 80006c6:	4319      	orrs	r1, r3
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	695b      	ldr	r3, [r3, #20]
 80006cc:	4319      	orrs	r1, r3
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	699b      	ldr	r3, [r3, #24]
 80006d2:	4319      	orrs	r1, r3
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	69db      	ldr	r3, [r3, #28]
 80006d8:	4319      	orrs	r1, r3
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	6a1b      	ldr	r3, [r3, #32]
 80006de:	430b      	orrs	r3, r1
 80006e0:	431a      	orrs	r2, r3
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	601a      	str	r2, [r3, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	685b      	ldr	r3, [r3, #4]
 80006ea:	4a1c      	ldr	r2, [pc, #112]	@ (800075c <LL_SPI_Init+0xd0>)
 80006ec:	401a      	ands	r2, r3
 80006ee:	683b      	ldr	r3, [r7, #0]
 80006f0:	6899      	ldr	r1, [r3, #8]
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	695b      	ldr	r3, [r3, #20]
 80006f6:	0c1b      	lsrs	r3, r3, #16
 80006f8:	430b      	orrs	r3, r1
 80006fa:	431a      	orrs	r2, r3
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	605a      	str	r2, [r3, #4]
               SPI_CR2_DS | SPI_CR2_SSOE,
               SPI_InitStruct->DataWidth | (SPI_InitStruct->NSS >> 16U));

    /* Set Rx FIFO to Quarter (1 Byte) in case of 8 Bits mode. No DataPacking by default */
    if (SPI_InitStruct->DataWidth < LL_SPI_DATAWIDTH_9BIT)
 8000700:	683b      	ldr	r3, [r7, #0]
 8000702:	689a      	ldr	r2, [r3, #8]
 8000704:	2380      	movs	r3, #128	@ 0x80
 8000706:	011b      	lsls	r3, r3, #4
 8000708:	429a      	cmp	r2, r3
 800070a:	d206      	bcs.n	800071a <LL_SPI_Init+0x8e>
    {
      LL_SPI_SetRxFIFOThreshold(SPIx, LL_SPI_RX_FIFO_TH_QUARTER);
 800070c:	2380      	movs	r3, #128	@ 0x80
 800070e:	015a      	lsls	r2, r3, #5
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	0011      	movs	r1, r2
 8000714:	0018      	movs	r0, r3
 8000716:	f7ff ff97 	bl	8000648 <LL_SPI_SetRxFIFOThreshold>

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 800071a:	683b      	ldr	r3, [r7, #0]
 800071c:	6a1a      	ldr	r2, [r3, #32]
 800071e:	2380      	movs	r3, #128	@ 0x80
 8000720:	019b      	lsls	r3, r3, #6
 8000722:	429a      	cmp	r2, r3
 8000724:	d106      	bne.n	8000734 <LL_SPI_Init+0xa8>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8000726:	683b      	ldr	r3, [r7, #0]
 8000728:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	0011      	movs	r1, r2
 800072e:	0018      	movs	r0, r3
 8000730:	f7ff ff9e 	bl	8000670 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8000734:	230f      	movs	r3, #15
 8000736:	18fb      	adds	r3, r7, r3
 8000738:	2200      	movs	r2, #0
 800073a:	701a      	strb	r2, [r3, #0]
  }

#if defined (SPI_I2S_SUPPORT)
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	69db      	ldr	r3, [r3, #28]
 8000740:	4a07      	ldr	r2, [pc, #28]	@ (8000760 <LL_SPI_Init+0xd4>)
 8000742:	401a      	ands	r2, r3
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2S_SUPPORT */
  return status;
 8000748:	230f      	movs	r3, #15
 800074a:	18fb      	adds	r3, r7, r3
 800074c:	781b      	ldrb	r3, [r3, #0]
}
 800074e:	0018      	movs	r0, r3
 8000750:	46bd      	mov	sp, r7
 8000752:	b004      	add	sp, #16
 8000754:	bd80      	pop	{r7, pc}
 8000756:	46c0      	nop			@ (mov r8, r8)
 8000758:	ffff0040 	.word	0xffff0040
 800075c:	fffff0fb 	.word	0xfffff0fb
 8000760:	fffff7ff 	.word	0xfffff7ff

08000764 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8000764:	b5b0      	push	{r4, r5, r7, lr}
 8000766:	b084      	sub	sp, #16
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 800076c:	4b25      	ldr	r3, [pc, #148]	@ (8000804 <WIZCHIP_READ+0xa0>)
 800076e:	68db      	ldr	r3, [r3, #12]
 8000770:	4798      	blx	r3
   WIZCHIP.CS._select();
 8000772:	4b24      	ldr	r3, [pc, #144]	@ (8000804 <WIZCHIP_READ+0xa0>)
 8000774:	695b      	ldr	r3, [r3, #20]
 8000776:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000778:	4b22      	ldr	r3, [pc, #136]	@ (8000804 <WIZCHIP_READ+0xa0>)
 800077a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800077c:	2b00      	cmp	r3, #0
 800077e:	d003      	beq.n	8000788 <WIZCHIP_READ+0x24>
 8000780:	4b20      	ldr	r3, [pc, #128]	@ (8000804 <WIZCHIP_READ+0xa0>)
 8000782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000784:	2b00      	cmp	r3, #0
 8000786:	d114      	bne.n	80007b2 <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8000788:	4b1e      	ldr	r3, [pc, #120]	@ (8000804 <WIZCHIP_READ+0xa0>)
 800078a:	6a1b      	ldr	r3, [r3, #32]
 800078c:	687a      	ldr	r2, [r7, #4]
 800078e:	0c12      	lsrs	r2, r2, #16
 8000790:	b2d2      	uxtb	r2, r2
 8000792:	0010      	movs	r0, r2
 8000794:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8000796:	4b1b      	ldr	r3, [pc, #108]	@ (8000804 <WIZCHIP_READ+0xa0>)
 8000798:	6a1b      	ldr	r3, [r3, #32]
 800079a:	687a      	ldr	r2, [r7, #4]
 800079c:	0a12      	lsrs	r2, r2, #8
 800079e:	b2d2      	uxtb	r2, r2
 80007a0:	0010      	movs	r0, r2
 80007a2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80007a4:	4b17      	ldr	r3, [pc, #92]	@ (8000804 <WIZCHIP_READ+0xa0>)
 80007a6:	6a1b      	ldr	r3, [r3, #32]
 80007a8:	687a      	ldr	r2, [r7, #4]
 80007aa:	b2d2      	uxtb	r2, r2
 80007ac:	0010      	movs	r0, r2
 80007ae:	4798      	blx	r3
 80007b0:	e014      	b.n	80007dc <WIZCHIP_READ+0x78>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	0c1b      	lsrs	r3, r3, #16
 80007b6:	b2da      	uxtb	r2, r3
 80007b8:	210c      	movs	r1, #12
 80007ba:	187b      	adds	r3, r7, r1
 80007bc:	701a      	strb	r2, [r3, #0]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	0a1b      	lsrs	r3, r3, #8
 80007c2:	b2da      	uxtb	r2, r3
 80007c4:	187b      	adds	r3, r7, r1
 80007c6:	705a      	strb	r2, [r3, #1]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	b2da      	uxtb	r2, r3
 80007cc:	187b      	adds	r3, r7, r1
 80007ce:	709a      	strb	r2, [r3, #2]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80007d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000804 <WIZCHIP_READ+0xa0>)
 80007d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80007d4:	187a      	adds	r2, r7, r1
 80007d6:	2103      	movs	r1, #3
 80007d8:	0010      	movs	r0, r2
 80007da:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 80007dc:	4b09      	ldr	r3, [pc, #36]	@ (8000804 <WIZCHIP_READ+0xa0>)
 80007de:	69db      	ldr	r3, [r3, #28]
 80007e0:	250f      	movs	r5, #15
 80007e2:	197c      	adds	r4, r7, r5
 80007e4:	4798      	blx	r3
 80007e6:	0003      	movs	r3, r0
 80007e8:	7023      	strb	r3, [r4, #0]

   WIZCHIP.CS._deselect();
 80007ea:	4b06      	ldr	r3, [pc, #24]	@ (8000804 <WIZCHIP_READ+0xa0>)
 80007ec:	699b      	ldr	r3, [r3, #24]
 80007ee:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80007f0:	4b04      	ldr	r3, [pc, #16]	@ (8000804 <WIZCHIP_READ+0xa0>)
 80007f2:	691b      	ldr	r3, [r3, #16]
 80007f4:	4798      	blx	r3
   return ret;
 80007f6:	197b      	adds	r3, r7, r5
 80007f8:	781b      	ldrb	r3, [r3, #0]
}
 80007fa:	0018      	movs	r0, r3
 80007fc:	46bd      	mov	sp, r7
 80007fe:	b004      	add	sp, #16
 8000800:	bdb0      	pop	{r4, r5, r7, pc}
 8000802:	46c0      	nop			@ (mov r8, r8)
 8000804:	20000000 	.word	0x20000000

08000808 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
 8000810:	000a      	movs	r2, r1
 8000812:	1cfb      	adds	r3, r7, #3
 8000814:	701a      	strb	r2, [r3, #0]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8000816:	4b26      	ldr	r3, [pc, #152]	@ (80008b0 <WIZCHIP_WRITE+0xa8>)
 8000818:	68db      	ldr	r3, [r3, #12]
 800081a:	4798      	blx	r3
   WIZCHIP.CS._select();
 800081c:	4b24      	ldr	r3, [pc, #144]	@ (80008b0 <WIZCHIP_WRITE+0xa8>)
 800081e:	695b      	ldr	r3, [r3, #20]
 8000820:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	2204      	movs	r2, #4
 8000826:	4313      	orrs	r3, r2
 8000828:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800082a:	4b21      	ldr	r3, [pc, #132]	@ (80008b0 <WIZCHIP_WRITE+0xa8>)
 800082c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800082e:	2b00      	cmp	r3, #0
 8000830:	d11a      	bne.n	8000868 <WIZCHIP_WRITE+0x60>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8000832:	4b1f      	ldr	r3, [pc, #124]	@ (80008b0 <WIZCHIP_WRITE+0xa8>)
 8000834:	6a1b      	ldr	r3, [r3, #32]
 8000836:	687a      	ldr	r2, [r7, #4]
 8000838:	0c12      	lsrs	r2, r2, #16
 800083a:	b2d2      	uxtb	r2, r2
 800083c:	0010      	movs	r0, r2
 800083e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8000840:	4b1b      	ldr	r3, [pc, #108]	@ (80008b0 <WIZCHIP_WRITE+0xa8>)
 8000842:	6a1b      	ldr	r3, [r3, #32]
 8000844:	687a      	ldr	r2, [r7, #4]
 8000846:	0a12      	lsrs	r2, r2, #8
 8000848:	b2d2      	uxtb	r2, r2
 800084a:	0010      	movs	r0, r2
 800084c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800084e:	4b18      	ldr	r3, [pc, #96]	@ (80008b0 <WIZCHIP_WRITE+0xa8>)
 8000850:	6a1b      	ldr	r3, [r3, #32]
 8000852:	687a      	ldr	r2, [r7, #4]
 8000854:	b2d2      	uxtb	r2, r2
 8000856:	0010      	movs	r0, r2
 8000858:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 800085a:	4b15      	ldr	r3, [pc, #84]	@ (80008b0 <WIZCHIP_WRITE+0xa8>)
 800085c:	6a1b      	ldr	r3, [r3, #32]
 800085e:	1cfa      	adds	r2, r7, #3
 8000860:	7812      	ldrb	r2, [r2, #0]
 8000862:	0010      	movs	r0, r2
 8000864:	4798      	blx	r3
 8000866:	e018      	b.n	800089a <WIZCHIP_WRITE+0x92>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	0c1b      	lsrs	r3, r3, #16
 800086c:	b2da      	uxtb	r2, r3
 800086e:	210c      	movs	r1, #12
 8000870:	187b      	adds	r3, r7, r1
 8000872:	701a      	strb	r2, [r3, #0]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	0a1b      	lsrs	r3, r3, #8
 8000878:	b2da      	uxtb	r2, r3
 800087a:	187b      	adds	r3, r7, r1
 800087c:	705a      	strb	r2, [r3, #1]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	b2da      	uxtb	r2, r3
 8000882:	187b      	adds	r3, r7, r1
 8000884:	709a      	strb	r2, [r3, #2]
		spi_data[3] = wb;
 8000886:	187b      	adds	r3, r7, r1
 8000888:	1cfa      	adds	r2, r7, #3
 800088a:	7812      	ldrb	r2, [r2, #0]
 800088c:	70da      	strb	r2, [r3, #3]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 800088e:	4b08      	ldr	r3, [pc, #32]	@ (80008b0 <WIZCHIP_WRITE+0xa8>)
 8000890:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000892:	187a      	adds	r2, r7, r1
 8000894:	2104      	movs	r1, #4
 8000896:	0010      	movs	r0, r2
 8000898:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 800089a:	4b05      	ldr	r3, [pc, #20]	@ (80008b0 <WIZCHIP_WRITE+0xa8>)
 800089c:	699b      	ldr	r3, [r3, #24]
 800089e:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80008a0:	4b03      	ldr	r3, [pc, #12]	@ (80008b0 <WIZCHIP_WRITE+0xa8>)
 80008a2:	691b      	ldr	r3, [r3, #16]
 80008a4:	4798      	blx	r3
}
 80008a6:	46c0      	nop			@ (mov r8, r8)
 80008a8:	46bd      	mov	sp, r7
 80008aa:	b004      	add	sp, #16
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	46c0      	nop			@ (mov r8, r8)
 80008b0:	20000000 	.word	0x20000000

080008b4 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80008b4:	b5b0      	push	{r4, r5, r7, lr}
 80008b6:	b086      	sub	sp, #24
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	60f8      	str	r0, [r7, #12]
 80008bc:	60b9      	str	r1, [r7, #8]
 80008be:	1dbb      	adds	r3, r7, #6
 80008c0:	801a      	strh	r2, [r3, #0]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 80008c2:	4b32      	ldr	r3, [pc, #200]	@ (800098c <WIZCHIP_READ_BUF+0xd8>)
 80008c4:	68db      	ldr	r3, [r3, #12]
 80008c6:	4798      	blx	r3
   WIZCHIP.CS._select();
 80008c8:	4b30      	ldr	r3, [pc, #192]	@ (800098c <WIZCHIP_READ_BUF+0xd8>)
 80008ca:	695b      	ldr	r3, [r3, #20]
 80008cc:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80008ce:	4b2f      	ldr	r3, [pc, #188]	@ (800098c <WIZCHIP_READ_BUF+0xd8>)
 80008d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d003      	beq.n	80008de <WIZCHIP_READ_BUF+0x2a>
 80008d6:	4b2d      	ldr	r3, [pc, #180]	@ (800098c <WIZCHIP_READ_BUF+0xd8>)
 80008d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d12f      	bne.n	800093e <WIZCHIP_READ_BUF+0x8a>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80008de:	4b2b      	ldr	r3, [pc, #172]	@ (800098c <WIZCHIP_READ_BUF+0xd8>)
 80008e0:	6a1b      	ldr	r3, [r3, #32]
 80008e2:	68fa      	ldr	r2, [r7, #12]
 80008e4:	0c12      	lsrs	r2, r2, #16
 80008e6:	b2d2      	uxtb	r2, r2
 80008e8:	0010      	movs	r0, r2
 80008ea:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80008ec:	4b27      	ldr	r3, [pc, #156]	@ (800098c <WIZCHIP_READ_BUF+0xd8>)
 80008ee:	6a1b      	ldr	r3, [r3, #32]
 80008f0:	68fa      	ldr	r2, [r7, #12]
 80008f2:	0a12      	lsrs	r2, r2, #8
 80008f4:	b2d2      	uxtb	r2, r2
 80008f6:	0010      	movs	r0, r2
 80008f8:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80008fa:	4b24      	ldr	r3, [pc, #144]	@ (800098c <WIZCHIP_READ_BUF+0xd8>)
 80008fc:	6a1b      	ldr	r3, [r3, #32]
 80008fe:	68fa      	ldr	r2, [r7, #12]
 8000900:	b2d2      	uxtb	r2, r2
 8000902:	0010      	movs	r0, r2
 8000904:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8000906:	2316      	movs	r3, #22
 8000908:	18fb      	adds	r3, r7, r3
 800090a:	2200      	movs	r2, #0
 800090c:	801a      	strh	r2, [r3, #0]
 800090e:	e00e      	b.n	800092e <WIZCHIP_READ_BUF+0x7a>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8000910:	4b1e      	ldr	r3, [pc, #120]	@ (800098c <WIZCHIP_READ_BUF+0xd8>)
 8000912:	69db      	ldr	r3, [r3, #28]
 8000914:	2516      	movs	r5, #22
 8000916:	197a      	adds	r2, r7, r5
 8000918:	8812      	ldrh	r2, [r2, #0]
 800091a:	68b9      	ldr	r1, [r7, #8]
 800091c:	188c      	adds	r4, r1, r2
 800091e:	4798      	blx	r3
 8000920:	0003      	movs	r3, r0
 8000922:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8000924:	197b      	adds	r3, r7, r5
 8000926:	881a      	ldrh	r2, [r3, #0]
 8000928:	197b      	adds	r3, r7, r5
 800092a:	3201      	adds	r2, #1
 800092c:	801a      	strh	r2, [r3, #0]
 800092e:	2316      	movs	r3, #22
 8000930:	18fa      	adds	r2, r7, r3
 8000932:	1dbb      	adds	r3, r7, #6
 8000934:	8812      	ldrh	r2, [r2, #0]
 8000936:	881b      	ldrh	r3, [r3, #0]
 8000938:	429a      	cmp	r2, r3
 800093a:	d3e9      	bcc.n	8000910 <WIZCHIP_READ_BUF+0x5c>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800093c:	e01b      	b.n	8000976 <WIZCHIP_READ_BUF+0xc2>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	0c1b      	lsrs	r3, r3, #16
 8000942:	b2da      	uxtb	r2, r3
 8000944:	2110      	movs	r1, #16
 8000946:	187b      	adds	r3, r7, r1
 8000948:	701a      	strb	r2, [r3, #0]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	0a1b      	lsrs	r3, r3, #8
 800094e:	b2da      	uxtb	r2, r3
 8000950:	187b      	adds	r3, r7, r1
 8000952:	705a      	strb	r2, [r3, #1]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	b2da      	uxtb	r2, r3
 8000958:	187b      	adds	r3, r7, r1
 800095a:	709a      	strb	r2, [r3, #2]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800095c:	4b0b      	ldr	r3, [pc, #44]	@ (800098c <WIZCHIP_READ_BUF+0xd8>)
 800095e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000960:	187a      	adds	r2, r7, r1
 8000962:	2103      	movs	r1, #3
 8000964:	0010      	movs	r0, r2
 8000966:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8000968:	4b08      	ldr	r3, [pc, #32]	@ (800098c <WIZCHIP_READ_BUF+0xd8>)
 800096a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800096c:	1dba      	adds	r2, r7, #6
 800096e:	8811      	ldrh	r1, [r2, #0]
 8000970:	68ba      	ldr	r2, [r7, #8]
 8000972:	0010      	movs	r0, r2
 8000974:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8000976:	4b05      	ldr	r3, [pc, #20]	@ (800098c <WIZCHIP_READ_BUF+0xd8>)
 8000978:	699b      	ldr	r3, [r3, #24]
 800097a:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800097c:	4b03      	ldr	r3, [pc, #12]	@ (800098c <WIZCHIP_READ_BUF+0xd8>)
 800097e:	691b      	ldr	r3, [r3, #16]
 8000980:	4798      	blx	r3
}
 8000982:	46c0      	nop			@ (mov r8, r8)
 8000984:	46bd      	mov	sp, r7
 8000986:	b006      	add	sp, #24
 8000988:	bdb0      	pop	{r4, r5, r7, pc}
 800098a:	46c0      	nop			@ (mov r8, r8)
 800098c:	20000000 	.word	0x20000000

08000990 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8000990:	b590      	push	{r4, r7, lr}
 8000992:	b087      	sub	sp, #28
 8000994:	af00      	add	r7, sp, #0
 8000996:	60f8      	str	r0, [r7, #12]
 8000998:	60b9      	str	r1, [r7, #8]
 800099a:	1dbb      	adds	r3, r7, #6
 800099c:	801a      	strh	r2, [r3, #0]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 800099e:	4b32      	ldr	r3, [pc, #200]	@ (8000a68 <WIZCHIP_WRITE_BUF+0xd8>)
 80009a0:	68db      	ldr	r3, [r3, #12]
 80009a2:	4798      	blx	r3
   WIZCHIP.CS._select();
 80009a4:	4b30      	ldr	r3, [pc, #192]	@ (8000a68 <WIZCHIP_WRITE_BUF+0xd8>)
 80009a6:	695b      	ldr	r3, [r3, #20]
 80009a8:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	2204      	movs	r2, #4
 80009ae:	4313      	orrs	r3, r2
 80009b0:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80009b2:	4b2d      	ldr	r3, [pc, #180]	@ (8000a68 <WIZCHIP_WRITE_BUF+0xd8>)
 80009b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d12f      	bne.n	8000a1a <WIZCHIP_WRITE_BUF+0x8a>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80009ba:	4b2b      	ldr	r3, [pc, #172]	@ (8000a68 <WIZCHIP_WRITE_BUF+0xd8>)
 80009bc:	6a1b      	ldr	r3, [r3, #32]
 80009be:	68fa      	ldr	r2, [r7, #12]
 80009c0:	0c12      	lsrs	r2, r2, #16
 80009c2:	b2d2      	uxtb	r2, r2
 80009c4:	0010      	movs	r0, r2
 80009c6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80009c8:	4b27      	ldr	r3, [pc, #156]	@ (8000a68 <WIZCHIP_WRITE_BUF+0xd8>)
 80009ca:	6a1b      	ldr	r3, [r3, #32]
 80009cc:	68fa      	ldr	r2, [r7, #12]
 80009ce:	0a12      	lsrs	r2, r2, #8
 80009d0:	b2d2      	uxtb	r2, r2
 80009d2:	0010      	movs	r0, r2
 80009d4:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80009d6:	4b24      	ldr	r3, [pc, #144]	@ (8000a68 <WIZCHIP_WRITE_BUF+0xd8>)
 80009d8:	6a1b      	ldr	r3, [r3, #32]
 80009da:	68fa      	ldr	r2, [r7, #12]
 80009dc:	b2d2      	uxtb	r2, r2
 80009de:	0010      	movs	r0, r2
 80009e0:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80009e2:	2316      	movs	r3, #22
 80009e4:	18fb      	adds	r3, r7, r3
 80009e6:	2200      	movs	r2, #0
 80009e8:	801a      	strh	r2, [r3, #0]
 80009ea:	e00e      	b.n	8000a0a <WIZCHIP_WRITE_BUF+0x7a>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 80009ec:	4b1e      	ldr	r3, [pc, #120]	@ (8000a68 <WIZCHIP_WRITE_BUF+0xd8>)
 80009ee:	6a1b      	ldr	r3, [r3, #32]
 80009f0:	2416      	movs	r4, #22
 80009f2:	193a      	adds	r2, r7, r4
 80009f4:	8812      	ldrh	r2, [r2, #0]
 80009f6:	68b9      	ldr	r1, [r7, #8]
 80009f8:	188a      	adds	r2, r1, r2
 80009fa:	7812      	ldrb	r2, [r2, #0]
 80009fc:	0010      	movs	r0, r2
 80009fe:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8000a00:	193b      	adds	r3, r7, r4
 8000a02:	881a      	ldrh	r2, [r3, #0]
 8000a04:	193b      	adds	r3, r7, r4
 8000a06:	3201      	adds	r2, #1
 8000a08:	801a      	strh	r2, [r3, #0]
 8000a0a:	2316      	movs	r3, #22
 8000a0c:	18fa      	adds	r2, r7, r3
 8000a0e:	1dbb      	adds	r3, r7, #6
 8000a10:	8812      	ldrh	r2, [r2, #0]
 8000a12:	881b      	ldrh	r3, [r3, #0]
 8000a14:	429a      	cmp	r2, r3
 8000a16:	d3e9      	bcc.n	80009ec <WIZCHIP_WRITE_BUF+0x5c>
 8000a18:	e01b      	b.n	8000a52 <WIZCHIP_WRITE_BUF+0xc2>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	0c1b      	lsrs	r3, r3, #16
 8000a1e:	b2da      	uxtb	r2, r3
 8000a20:	2110      	movs	r1, #16
 8000a22:	187b      	adds	r3, r7, r1
 8000a24:	701a      	strb	r2, [r3, #0]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	0a1b      	lsrs	r3, r3, #8
 8000a2a:	b2da      	uxtb	r2, r3
 8000a2c:	187b      	adds	r3, r7, r1
 8000a2e:	705a      	strb	r2, [r3, #1]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	b2da      	uxtb	r2, r3
 8000a34:	187b      	adds	r3, r7, r1
 8000a36:	709a      	strb	r2, [r3, #2]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8000a38:	4b0b      	ldr	r3, [pc, #44]	@ (8000a68 <WIZCHIP_WRITE_BUF+0xd8>)
 8000a3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a3c:	187a      	adds	r2, r7, r1
 8000a3e:	2103      	movs	r1, #3
 8000a40:	0010      	movs	r0, r2
 8000a42:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8000a44:	4b08      	ldr	r3, [pc, #32]	@ (8000a68 <WIZCHIP_WRITE_BUF+0xd8>)
 8000a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a48:	1dba      	adds	r2, r7, #6
 8000a4a:	8811      	ldrh	r1, [r2, #0]
 8000a4c:	68ba      	ldr	r2, [r7, #8]
 8000a4e:	0010      	movs	r0, r2
 8000a50:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8000a52:	4b05      	ldr	r3, [pc, #20]	@ (8000a68 <WIZCHIP_WRITE_BUF+0xd8>)
 8000a54:	699b      	ldr	r3, [r3, #24]
 8000a56:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8000a58:	4b03      	ldr	r3, [pc, #12]	@ (8000a68 <WIZCHIP_WRITE_BUF+0xd8>)
 8000a5a:	691b      	ldr	r3, [r3, #16]
 8000a5c:	4798      	blx	r3
}
 8000a5e:	46c0      	nop			@ (mov r8, r8)
 8000a60:	46bd      	mov	sp, r7
 8000a62:	b007      	add	sp, #28
 8000a64:	bd90      	pop	{r4, r7, pc}
 8000a66:	46c0      	nop			@ (mov r8, r8)
 8000a68:	20000000 	.word	0x20000000

08000a6c <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
 8000a74:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	683a      	ldr	r2, [r7, #0]
 8000a7a:	619a      	str	r2, [r3, #24]
}
 8000a7c:	46c0      	nop			@ (mov r8, r8)
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	b002      	add	sp, #8
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	683a      	ldr	r2, [r7, #0]
 8000a92:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000a94:	46c0      	nop			@ (mov r8, r8)
 8000a96:	46bd      	mov	sp, r7
 8000a98:	b002      	add	sp, #8
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <SPI_CrisEnter>:

#include "drv_spi.h"
#include "platform.h"

void SPI_CrisEnter(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	f383 8810 	msr	PRIMASK, r3
}
 8000aac:	46c0      	nop			@ (mov r8, r8)
    __set_PRIMASK(1);
}
 8000aae:	46c0      	nop			@ (mov r8, r8)
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	b002      	add	sp, #8
 8000ab4:	bd80      	pop	{r7, pc}

08000ab6 <SPI_CrisExit>:
/**
  * @brief  ?????
  * @retval None
  */
void SPI_CrisExit(void)
{
 8000ab6:	b580      	push	{r7, lr}
 8000ab8:	b082      	sub	sp, #8
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	2300      	movs	r3, #0
 8000abe:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	f383 8810 	msr	PRIMASK, r3
}
 8000ac6:	46c0      	nop			@ (mov r8, r8)
    __set_PRIMASK(0);
}
 8000ac8:	46c0      	nop			@ (mov r8, r8)
 8000aca:	46bd      	mov	sp, r7
 8000acc:	b002      	add	sp, #8
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <SPI_CS_Select>:
/**
  * @brief  ?????????
  * @retval None
  */
void SPI_CS_Select(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
	W5500_SPI_CS_SELECT();
 8000ad4:	23a0      	movs	r3, #160	@ 0xa0
 8000ad6:	05db      	lsls	r3, r3, #23
 8000ad8:	2110      	movs	r1, #16
 8000ada:	0018      	movs	r0, r3
 8000adc:	f7ff ffd2 	bl	8000a84 <LL_GPIO_ResetOutputPin>
}
 8000ae0:	46c0      	nop			@ (mov r8, r8)
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}

08000ae6 <SPI_CS_Deselect>:
/**
  * @brief  ?????????
  * @retval None
  */
void SPI_CS_Deselect(void)
{
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	af00      	add	r7, sp, #0
	W5500_SPI_CS_DESELECT();
 8000aea:	23a0      	movs	r3, #160	@ 0xa0
 8000aec:	05db      	lsls	r3, r3, #23
 8000aee:	2110      	movs	r1, #16
 8000af0:	0018      	movs	r0, r3
 8000af2:	f7ff ffbb 	bl	8000a6c <LL_GPIO_SetOutputPin>
}
 8000af6:	46c0      	nop			@ (mov r8, r8)
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}

08000afc <register_wizchip>:
void register_wizchip()
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
	// First of all, Should register SPI callback functions implemented by user for accessing WIZCHIP 
	/* Critical section callback */
	reg_wizchip_cris_cbfunc(SPI_CrisEnter, SPI_CrisExit);   
 8000b00:	4a0a      	ldr	r2, [pc, #40]	@ (8000b2c <register_wizchip+0x30>)
 8000b02:	4b0b      	ldr	r3, [pc, #44]	@ (8000b30 <register_wizchip+0x34>)
 8000b04:	0011      	movs	r1, r2
 8000b06:	0018      	movs	r0, r3
 8000b08:	f000 f85a 	bl	8000bc0 <reg_wizchip_cris_cbfunc>
	/* Chip selection call back */
	reg_wizchip_cs_cbfunc(SPI_CS_Select, SPI_CS_Deselect);
 8000b0c:	4a09      	ldr	r2, [pc, #36]	@ (8000b34 <register_wizchip+0x38>)
 8000b0e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b38 <register_wizchip+0x3c>)
 8000b10:	0011      	movs	r1, r2
 8000b12:	0018      	movs	r0, r3
 8000b14:	f000 f878 	bl	8000c08 <reg_wizchip_cs_cbfunc>
	/* SPI Read & Write callback function */
	reg_wizchip_spi_cbfunc(W5500_SPI_ReadByte, W5500_SPI_WriteByte);
 8000b18:	4a08      	ldr	r2, [pc, #32]	@ (8000b3c <register_wizchip+0x40>)
 8000b1a:	4b09      	ldr	r3, [pc, #36]	@ (8000b40 <register_wizchip+0x44>)
 8000b1c:	0011      	movs	r1, r2
 8000b1e:	0018      	movs	r0, r3
 8000b20:	f000 f896 	bl	8000c50 <reg_wizchip_spi_cbfunc>
}
 8000b24:	46c0      	nop			@ (mov r8, r8)
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	46c0      	nop			@ (mov r8, r8)
 8000b2c:	08000ab7 	.word	0x08000ab7
 8000b30:	08000a9d 	.word	0x08000a9d
 8000b34:	08000ae7 	.word	0x08000ae7
 8000b38:	08000ad1 	.word	0x08000ad1
 8000b3c:	08002225 	.word	0x08002225
 8000b40:	08002243 	.word	0x08002243

08000b44 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	46c0      	nop			@ (mov r8, r8)
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}

08000b4e <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	46c0      	nop			@ (mov r8, r8)
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	46c0      	nop			@ (mov r8, r8)
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}

08000b62 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8000b62:	b580      	push	{r7, lr}
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	46c0      	nop			@ (mov r8, r8)
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	b2db      	uxtb	r3, r3
 8000b7a:	0018      	movs	r0, r3
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	b002      	add	sp, #8
 8000b80:	bd80      	pop	{r7, pc}

08000b82 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8000b82:	b580      	push	{r7, lr}
 8000b84:	b082      	sub	sp, #8
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	6078      	str	r0, [r7, #4]
 8000b8a:	000a      	movs	r2, r1
 8000b8c:	1cfb      	adds	r3, r7, #3
 8000b8e:	701a      	strb	r2, [r3, #0]
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	1cfa      	adds	r2, r7, #3
 8000b94:	7812      	ldrb	r2, [r2, #0]
 8000b96:	701a      	strb	r2, [r3, #0]
 8000b98:	46c0      	nop			@ (mov r8, r8)
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	b002      	add	sp, #8
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	0018      	movs	r0, r3
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}

08000bac <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	0002      	movs	r2, r0
 8000bb4:	1dfb      	adds	r3, r7, #7
 8000bb6:	701a      	strb	r2, [r3, #0]
 8000bb8:	46c0      	nop			@ (mov r8, r8)
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	b002      	add	sp, #8
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <reg_wizchip_cris_cbfunc>:

static uint8_t    _DNS_[4];      // DNS server ip address
static dhcp_mode  _DHCP_;        // DHCP mode

void reg_wizchip_cris_cbfunc(void(*cris_en)(void), void(*cris_ex)(void))
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	6039      	str	r1, [r7, #0]
   if(!cris_en || !cris_ex)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d002      	beq.n	8000bd6 <reg_wizchip_cris_cbfunc+0x16>
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d106      	bne.n	8000be4 <reg_wizchip_cris_cbfunc+0x24>
   {
      WIZCHIP.CRIS._enter = wizchip_cris_enter;
 8000bd6:	4b09      	ldr	r3, [pc, #36]	@ (8000bfc <reg_wizchip_cris_cbfunc+0x3c>)
 8000bd8:	4a09      	ldr	r2, [pc, #36]	@ (8000c00 <reg_wizchip_cris_cbfunc+0x40>)
 8000bda:	60da      	str	r2, [r3, #12]
      WIZCHIP.CRIS._exit  = wizchip_cris_exit;
 8000bdc:	4b07      	ldr	r3, [pc, #28]	@ (8000bfc <reg_wizchip_cris_cbfunc+0x3c>)
 8000bde:	4a09      	ldr	r2, [pc, #36]	@ (8000c04 <reg_wizchip_cris_cbfunc+0x44>)
 8000be0:	611a      	str	r2, [r3, #16]
 8000be2:	e006      	b.n	8000bf2 <reg_wizchip_cris_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CRIS._enter = cris_en;
 8000be4:	4b05      	ldr	r3, [pc, #20]	@ (8000bfc <reg_wizchip_cris_cbfunc+0x3c>)
 8000be6:	687a      	ldr	r2, [r7, #4]
 8000be8:	60da      	str	r2, [r3, #12]
      WIZCHIP.CRIS._exit  = cris_ex;
 8000bea:	4b04      	ldr	r3, [pc, #16]	@ (8000bfc <reg_wizchip_cris_cbfunc+0x3c>)
 8000bec:	683a      	ldr	r2, [r7, #0]
 8000bee:	611a      	str	r2, [r3, #16]
   }
}
 8000bf0:	46c0      	nop			@ (mov r8, r8)
 8000bf2:	46c0      	nop			@ (mov r8, r8)
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	b002      	add	sp, #8
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	46c0      	nop			@ (mov r8, r8)
 8000bfc:	20000000 	.word	0x20000000
 8000c00:	08000b45 	.word	0x08000b45
 8000c04:	08000b4f 	.word	0x08000b4f

08000c08 <reg_wizchip_cs_cbfunc>:

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
 8000c10:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d002      	beq.n	8000c1e <reg_wizchip_cs_cbfunc+0x16>
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d106      	bne.n	8000c2c <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8000c1e:	4b09      	ldr	r3, [pc, #36]	@ (8000c44 <reg_wizchip_cs_cbfunc+0x3c>)
 8000c20:	4a09      	ldr	r2, [pc, #36]	@ (8000c48 <reg_wizchip_cs_cbfunc+0x40>)
 8000c22:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8000c24:	4b07      	ldr	r3, [pc, #28]	@ (8000c44 <reg_wizchip_cs_cbfunc+0x3c>)
 8000c26:	4a09      	ldr	r2, [pc, #36]	@ (8000c4c <reg_wizchip_cs_cbfunc+0x44>)
 8000c28:	619a      	str	r2, [r3, #24]
 8000c2a:	e006      	b.n	8000c3a <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8000c2c:	4b05      	ldr	r3, [pc, #20]	@ (8000c44 <reg_wizchip_cs_cbfunc+0x3c>)
 8000c2e:	687a      	ldr	r2, [r7, #4]
 8000c30:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8000c32:	4b04      	ldr	r3, [pc, #16]	@ (8000c44 <reg_wizchip_cs_cbfunc+0x3c>)
 8000c34:	683a      	ldr	r2, [r7, #0]
 8000c36:	619a      	str	r2, [r3, #24]
   }
}
 8000c38:	46c0      	nop			@ (mov r8, r8)
 8000c3a:	46c0      	nop			@ (mov r8, r8)
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	b002      	add	sp, #8
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	46c0      	nop			@ (mov r8, r8)
 8000c44:	20000000 	.word	0x20000000
 8000c48:	08000b59 	.word	0x08000b59
 8000c4c:	08000b63 	.word	0x08000b63

08000c50 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
 8000c58:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8000c5a:	46c0      	nop			@ (mov r8, r8)
 8000c5c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c9c <reg_wizchip_spi_cbfunc+0x4c>)
 8000c5e:	881b      	ldrh	r3, [r3, #0]
 8000c60:	001a      	movs	r2, r3
 8000c62:	2380      	movs	r3, #128	@ 0x80
 8000c64:	009b      	lsls	r3, r3, #2
 8000c66:	4013      	ands	r3, r2
 8000c68:	d0f8      	beq.n	8000c5c <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d002      	beq.n	8000c76 <reg_wizchip_spi_cbfunc+0x26>
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d106      	bne.n	8000c84 <reg_wizchip_spi_cbfunc+0x34>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8000c76:	4b09      	ldr	r3, [pc, #36]	@ (8000c9c <reg_wizchip_spi_cbfunc+0x4c>)
 8000c78:	4a09      	ldr	r2, [pc, #36]	@ (8000ca0 <reg_wizchip_spi_cbfunc+0x50>)
 8000c7a:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8000c7c:	4b07      	ldr	r3, [pc, #28]	@ (8000c9c <reg_wizchip_spi_cbfunc+0x4c>)
 8000c7e:	4a09      	ldr	r2, [pc, #36]	@ (8000ca4 <reg_wizchip_spi_cbfunc+0x54>)
 8000c80:	621a      	str	r2, [r3, #32]
 8000c82:	e006      	b.n	8000c92 <reg_wizchip_spi_cbfunc+0x42>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8000c84:	4b05      	ldr	r3, [pc, #20]	@ (8000c9c <reg_wizchip_spi_cbfunc+0x4c>)
 8000c86:	687a      	ldr	r2, [r7, #4]
 8000c88:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8000c8a:	4b04      	ldr	r3, [pc, #16]	@ (8000c9c <reg_wizchip_spi_cbfunc+0x4c>)
 8000c8c:	683a      	ldr	r2, [r7, #0]
 8000c8e:	621a      	str	r2, [r3, #32]
   }
}
 8000c90:	46c0      	nop			@ (mov r8, r8)
 8000c92:	46c0      	nop			@ (mov r8, r8)
 8000c94:	46bd      	mov	sp, r7
 8000c96:	b002      	add	sp, #8
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	46c0      	nop			@ (mov r8, r8)
 8000c9c:	20000000 	.word	0x20000000
 8000ca0:	08000ba1 	.word	0x08000ba1
 8000ca4:	08000bad 	.word	0x08000bad

08000ca8 <ctlwizchip>:
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
   }
}

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 8000ca8:	b590      	push	{r4, r7, lr}
 8000caa:	b087      	sub	sp, #28
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	0002      	movs	r2, r0
 8000cb0:	6039      	str	r1, [r7, #0]
 8000cb2:	1dfb      	adds	r3, r7, #7
 8000cb4:	701a      	strb	r2, [r3, #0]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 8000cb6:	2317      	movs	r3, #23
 8000cb8:	18fb      	adds	r3, r7, r3
 8000cba:	2200      	movs	r2, #0
 8000cbc:	701a      	strb	r2, [r3, #0]
#endif
   uint8_t* ptmp[2] = {0,0};
 8000cbe:	210c      	movs	r1, #12
 8000cc0:	187b      	adds	r3, r7, r1
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	187b      	adds	r3, r7, r1
 8000cc8:	2200      	movs	r2, #0
 8000cca:	605a      	str	r2, [r3, #4]
   switch(cwtype)
 8000ccc:	1dfb      	adds	r3, r7, #7
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	2b0f      	cmp	r3, #15
 8000cd2:	d900      	bls.n	8000cd6 <ctlwizchip+0x2e>
 8000cd4:	e0ba      	b.n	8000e4c <ctlwizchip+0x1a4>
 8000cd6:	009a      	lsls	r2, r3, #2
 8000cd8:	4b61      	ldr	r3, [pc, #388]	@ (8000e60 <ctlwizchip+0x1b8>)
 8000cda:	18d3      	adds	r3, r2, r3
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	469f      	mov	pc, r3
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8000ce0:	f000 f8fe 	bl	8000ee0 <wizchip_sw_reset>
         break;
 8000ce4:	e0b6      	b.n	8000e54 <ctlwizchip+0x1ac>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d009      	beq.n	8000d00 <ctlwizchip+0x58>
         {
            ptmp[0] = (uint8_t*)arg;
 8000cec:	210c      	movs	r1, #12
 8000cee:	187b      	adds	r3, r7, r1
 8000cf0:	683a      	ldr	r2, [r7, #0]
 8000cf2:	601a      	str	r2, [r3, #0]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8000cf4:	187b      	adds	r3, r7, r1
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	3308      	adds	r3, #8
 8000cfa:	001a      	movs	r2, r3
 8000cfc:	187b      	adds	r3, r7, r1
 8000cfe:	605a      	str	r2, [r3, #4]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 8000d00:	210c      	movs	r1, #12
 8000d02:	187b      	adds	r3, r7, r1
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	187b      	adds	r3, r7, r1
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	0019      	movs	r1, r3
 8000d0c:	0010      	movs	r0, r2
 8000d0e:	f000 f930 	bl	8000f72 <wizchip_init>
 8000d12:	0003      	movs	r3, r0
 8000d14:	e09f      	b.n	8000e56 <ctlwizchip+0x1ae>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	881b      	ldrh	r3, [r3, #0]
 8000d1a:	0018      	movs	r0, r3
 8000d1c:	f000 f9ec 	bl	80010f8 <wizchip_clrinterrupt>
         break;
 8000d20:	e098      	b.n	8000e54 <ctlwizchip+0x1ac>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 8000d22:	f000 fa33 	bl	800118c <wizchip_getinterrupt>
 8000d26:	0003      	movs	r3, r0
 8000d28:	001a      	movs	r2, r3
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	801a      	strh	r2, [r3, #0]
         break;
 8000d2e:	e091      	b.n	8000e54 <ctlwizchip+0x1ac>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	881b      	ldrh	r3, [r3, #0]
 8000d34:	0018      	movs	r0, r3
 8000d36:	f000 fa5d 	bl	80011f4 <wizchip_setinterruptmask>
         break;         
 8000d3a:	e08b      	b.n	8000e54 <ctlwizchip+0x1ac>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 8000d3c:	f000 fa80 	bl	8001240 <wizchip_getinterruptmask>
 8000d40:	0003      	movs	r3, r0
 8000d42:	001a      	movs	r2, r3
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	801a      	strh	r2, [r3, #0]
         break;
 8000d48:	e084      	b.n	8000e54 <ctlwizchip+0x1ac>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	881b      	ldrh	r3, [r3, #0]
 8000d4e:	0a1b      	lsrs	r3, r3, #8
 8000d50:	b29b      	uxth	r3, r3
 8000d52:	b2da      	uxtb	r2, r3
 8000d54:	2398      	movs	r3, #152	@ 0x98
 8000d56:	015b      	lsls	r3, r3, #5
 8000d58:	0011      	movs	r1, r2
 8000d5a:	0018      	movs	r0, r3
 8000d5c:	f7ff fd54 	bl	8000808 <WIZCHIP_WRITE>
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	881b      	ldrh	r3, [r3, #0]
 8000d64:	b2da      	uxtb	r2, r3
 8000d66:	23a0      	movs	r3, #160	@ 0xa0
 8000d68:	015b      	lsls	r3, r3, #5
 8000d6a:	0011      	movs	r1, r2
 8000d6c:	0018      	movs	r0, r3
 8000d6e:	f7ff fd4b 	bl	8000808 <WIZCHIP_WRITE>
         break;
 8000d72:	e06f      	b.n	8000e54 <ctlwizchip+0x1ac>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 8000d74:	2398      	movs	r3, #152	@ 0x98
 8000d76:	015b      	lsls	r3, r3, #5
 8000d78:	0018      	movs	r0, r3
 8000d7a:	f7ff fcf3 	bl	8000764 <WIZCHIP_READ>
 8000d7e:	0003      	movs	r3, r0
 8000d80:	021b      	lsls	r3, r3, #8
 8000d82:	b29c      	uxth	r4, r3
 8000d84:	23a0      	movs	r3, #160	@ 0xa0
 8000d86:	015b      	lsls	r3, r3, #5
 8000d88:	0018      	movs	r0, r3
 8000d8a:	f7ff fceb 	bl	8000764 <WIZCHIP_READ>
 8000d8e:	0003      	movs	r3, r0
 8000d90:	18e3      	adds	r3, r4, r3
 8000d92:	b29a      	uxth	r2, r3
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	801a      	strh	r2, [r3, #0]
         break;
 8000d98:	e05c      	b.n	8000e54 <ctlwizchip+0x1ac>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 8000d9a:	4b32      	ldr	r3, [pc, #200]	@ (8000e64 <ctlwizchip+0x1bc>)
 8000d9c:	789a      	ldrb	r2, [r3, #2]
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	3301      	adds	r3, #1
 8000da6:	4a2f      	ldr	r2, [pc, #188]	@ (8000e64 <ctlwizchip+0x1bc>)
 8000da8:	78d2      	ldrb	r2, [r2, #3]
 8000daa:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	3302      	adds	r3, #2
 8000db0:	4a2c      	ldr	r2, [pc, #176]	@ (8000e64 <ctlwizchip+0x1bc>)
 8000db2:	7912      	ldrb	r2, [r2, #4]
 8000db4:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	3303      	adds	r3, #3
 8000dba:	4a2a      	ldr	r2, [pc, #168]	@ (8000e64 <ctlwizchip+0x1bc>)
 8000dbc:	7952      	ldrb	r2, [r2, #5]
 8000dbe:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	3304      	adds	r3, #4
 8000dc4:	4a27      	ldr	r2, [pc, #156]	@ (8000e64 <ctlwizchip+0x1bc>)
 8000dc6:	7992      	ldrb	r2, [r2, #6]
 8000dc8:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = 0;
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	3305      	adds	r3, #5
 8000dce:	2200      	movs	r2, #0
 8000dd0:	701a      	strb	r2, [r3, #0]
         break;
 8000dd2:	e03f      	b.n	8000e54 <ctlwizchip+0x1ac>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 8000dd4:	f000 fa9d 	bl	8001312 <wizphy_reset>
         break;
 8000dd8:	e03c      	b.n	8000e54 <ctlwizchip+0x1ac>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	0018      	movs	r0, r3
 8000dde:	f000 facc 	bl	800137a <wizphy_setphyconf>
         break;
 8000de2:	e037      	b.n	8000e54 <ctlwizchip+0x1ac>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	0018      	movs	r0, r3
 8000de8:	f000 fb26 	bl	8001438 <wizphy_getphyconf>
         break;
 8000dec:	e032      	b.n	8000e54 <ctlwizchip+0x1ac>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	0018      	movs	r0, r3
 8000df4:	f000 fb90 	bl	8001518 <wizphy_setphypmode>
 8000df8:	0003      	movs	r3, r0
 8000dfa:	e02c      	b.n	8000e56 <ctlwizchip+0x1ae>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 8000dfc:	f000 fa6a 	bl	80012d4 <wizphy_getphypmode>
 8000e00:	0003      	movs	r3, r0
 8000e02:	001a      	movs	r2, r3
 8000e04:	2117      	movs	r1, #23
 8000e06:	187b      	adds	r3, r7, r1
 8000e08:	701a      	strb	r2, [r3, #0]
         if((int8_t)tmp == -1) return -1;
 8000e0a:	187b      	adds	r3, r7, r1
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	2bff      	cmp	r3, #255	@ 0xff
 8000e10:	d102      	bne.n	8000e18 <ctlwizchip+0x170>
 8000e12:	2301      	movs	r3, #1
 8000e14:	425b      	negs	r3, r3
 8000e16:	e01e      	b.n	8000e56 <ctlwizchip+0x1ae>
         *(uint8_t*)arg = tmp;
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	2217      	movs	r2, #23
 8000e1c:	18ba      	adds	r2, r7, r2
 8000e1e:	7812      	ldrb	r2, [r2, #0]
 8000e20:	701a      	strb	r2, [r3, #0]
         break;
 8000e22:	e017      	b.n	8000e54 <ctlwizchip+0x1ac>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 8000e24:	f000 fa3c 	bl	80012a0 <wizphy_getphylink>
 8000e28:	0003      	movs	r3, r0
 8000e2a:	001a      	movs	r2, r3
 8000e2c:	2117      	movs	r1, #23
 8000e2e:	187b      	adds	r3, r7, r1
 8000e30:	701a      	strb	r2, [r3, #0]
         if((int8_t)tmp == -1) return -1;
 8000e32:	187b      	adds	r3, r7, r1
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	2bff      	cmp	r3, #255	@ 0xff
 8000e38:	d102      	bne.n	8000e40 <ctlwizchip+0x198>
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	425b      	negs	r3, r3
 8000e3e:	e00a      	b.n	8000e56 <ctlwizchip+0x1ae>
         *(uint8_t*)arg = tmp;
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	2217      	movs	r2, #23
 8000e44:	18ba      	adds	r2, r7, r2
 8000e46:	7812      	ldrb	r2, [r2, #0]
 8000e48:	701a      	strb	r2, [r3, #0]
         break;
 8000e4a:	e003      	b.n	8000e54 <ctlwizchip+0x1ac>
   #endif      
      default:
         return -1;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	425b      	negs	r3, r3
 8000e50:	e001      	b.n	8000e56 <ctlwizchip+0x1ae>
         break;
 8000e52:	46c0      	nop			@ (mov r8, r8)
   }
   return 0;
 8000e54:	2300      	movs	r3, #0
}
 8000e56:	0018      	movs	r0, r3
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	b007      	add	sp, #28
 8000e5c:	bd90      	pop	{r4, r7, pc}
 8000e5e:	46c0      	nop			@ (mov r8, r8)
 8000e60:	08004fc8 	.word	0x08004fc8
 8000e64:	20000000 	.word	0x20000000

08000e68 <ctlnetwork>:


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	0002      	movs	r2, r0
 8000e70:	6039      	str	r1, [r7, #0]
 8000e72:	1dfb      	adds	r3, r7, #7
 8000e74:	701a      	strb	r2, [r3, #0]
   
   switch(cntype)
 8000e76:	1dfb      	adds	r3, r7, #7
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	2b05      	cmp	r3, #5
 8000e7c:	d826      	bhi.n	8000ecc <ctlnetwork+0x64>
 8000e7e:	009a      	lsls	r2, r3, #2
 8000e80:	4b16      	ldr	r3, [pc, #88]	@ (8000edc <ctlnetwork+0x74>)
 8000e82:	18d3      	adds	r3, r2, r3
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	469f      	mov	pc, r3
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	0018      	movs	r0, r3
 8000e8c:	f000 fba4 	bl	80015d8 <wizchip_setnetinfo>
         break;
 8000e90:	e01f      	b.n	8000ed2 <ctlnetwork+0x6a>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	0018      	movs	r0, r3
 8000e96:	f000 fbe1 	bl	800165c <wizchip_getnetinfo>
         break;
 8000e9a:	e01a      	b.n	8000ed2 <ctlnetwork+0x6a>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	0018      	movs	r0, r3
 8000ea2:	f000 fc1d 	bl	80016e0 <wizchip_setnetmode>
 8000ea6:	0003      	movs	r3, r0
 8000ea8:	e014      	b.n	8000ed4 <ctlnetwork+0x6c>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 8000eaa:	f000 fc45 	bl	8001738 <wizchip_getnetmode>
 8000eae:	0003      	movs	r3, r0
 8000eb0:	001a      	movs	r2, r3
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	701a      	strb	r2, [r3, #0]
         break;
 8000eb6:	e00c      	b.n	8000ed2 <ctlnetwork+0x6a>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	0018      	movs	r0, r3
 8000ebc:	f000 fc45 	bl	800174a <wizchip_settimeout>
         break;
 8000ec0:	e007      	b.n	8000ed2 <ctlnetwork+0x6a>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	0018      	movs	r0, r3
 8000ec6:	f000 fc64 	bl	8001792 <wizchip_gettimeout>
         break;
 8000eca:	e002      	b.n	8000ed2 <ctlnetwork+0x6a>
      default:
         return -1;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	425b      	negs	r3, r3
 8000ed0:	e000      	b.n	8000ed4 <ctlnetwork+0x6c>
   }
   return 0;
 8000ed2:	2300      	movs	r3, #0
}
 8000ed4:	0018      	movs	r0, r3
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	b002      	add	sp, #8
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	08005008 	.word	0x08005008

08000ee0 <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 8000ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ee2:	b087      	sub	sp, #28
 8000ee4:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8000ee6:	1d39      	adds	r1, r7, #4
 8000ee8:	2390      	movs	r3, #144	@ 0x90
 8000eea:	011b      	lsls	r3, r3, #4
 8000eec:	2206      	movs	r2, #6
 8000eee:	0018      	movs	r0, r3
 8000ef0:	f7ff fce0 	bl	80008b4 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8000ef4:	2414      	movs	r4, #20
 8000ef6:	1939      	adds	r1, r7, r4
 8000ef8:	2380      	movs	r3, #128	@ 0x80
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	2204      	movs	r2, #4
 8000efe:	0018      	movs	r0, r3
 8000f00:	f7ff fcd8 	bl	80008b4 <WIZCHIP_READ_BUF>
 8000f04:	2510      	movs	r5, #16
 8000f06:	1979      	adds	r1, r7, r5
 8000f08:	23a0      	movs	r3, #160	@ 0xa0
 8000f0a:	00db      	lsls	r3, r3, #3
 8000f0c:	2204      	movs	r2, #4
 8000f0e:	0018      	movs	r0, r3
 8000f10:	f7ff fcd0 	bl	80008b4 <WIZCHIP_READ_BUF>
 8000f14:	260c      	movs	r6, #12
 8000f16:	19b9      	adds	r1, r7, r6
 8000f18:	23f0      	movs	r3, #240	@ 0xf0
 8000f1a:	011b      	lsls	r3, r3, #4
 8000f1c:	2204      	movs	r2, #4
 8000f1e:	0018      	movs	r0, r3
 8000f20:	f7ff fcc8 	bl	80008b4 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8000f24:	2180      	movs	r1, #128	@ 0x80
 8000f26:	2000      	movs	r0, #0
 8000f28:	f7ff fc6e 	bl	8000808 <WIZCHIP_WRITE>
   getMR(); // for delay
 8000f2c:	2000      	movs	r0, #0
 8000f2e:	f7ff fc19 	bl	8000764 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8000f32:	1d39      	adds	r1, r7, #4
 8000f34:	2390      	movs	r3, #144	@ 0x90
 8000f36:	011b      	lsls	r3, r3, #4
 8000f38:	2206      	movs	r2, #6
 8000f3a:	0018      	movs	r0, r3
 8000f3c:	f7ff fd28 	bl	8000990 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8000f40:	1939      	adds	r1, r7, r4
 8000f42:	2380      	movs	r3, #128	@ 0x80
 8000f44:	005b      	lsls	r3, r3, #1
 8000f46:	2204      	movs	r2, #4
 8000f48:	0018      	movs	r0, r3
 8000f4a:	f7ff fd21 	bl	8000990 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8000f4e:	1979      	adds	r1, r7, r5
 8000f50:	23a0      	movs	r3, #160	@ 0xa0
 8000f52:	00db      	lsls	r3, r3, #3
 8000f54:	2204      	movs	r2, #4
 8000f56:	0018      	movs	r0, r3
 8000f58:	f7ff fd1a 	bl	8000990 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8000f5c:	19b9      	adds	r1, r7, r6
 8000f5e:	23f0      	movs	r3, #240	@ 0xf0
 8000f60:	011b      	lsls	r3, r3, #4
 8000f62:	2204      	movs	r2, #4
 8000f64:	0018      	movs	r0, r3
 8000f66:	f7ff fd13 	bl	8000990 <WIZCHIP_WRITE_BUF>
}
 8000f6a:	46c0      	nop			@ (mov r8, r8)
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	b007      	add	sp, #28
 8000f70:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000f72 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8000f72:	b590      	push	{r4, r7, lr}
 8000f74:	b085      	sub	sp, #20
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	6078      	str	r0, [r7, #4]
 8000f7a:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8000f7c:	240e      	movs	r4, #14
 8000f7e:	193b      	adds	r3, r7, r4
 8000f80:	2200      	movs	r2, #0
 8000f82:	701a      	strb	r2, [r3, #0]
   wizchip_sw_reset();
 8000f84:	f7ff ffac 	bl	8000ee0 <wizchip_sw_reset>
   if(txsize)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d055      	beq.n	800103a <wizchip_init+0xc8>
   {
      tmp = 0;
 8000f8e:	193b      	adds	r3, r7, r4
 8000f90:	2200      	movs	r2, #0
 8000f92:	701a      	strb	r2, [r3, #0]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8000f94:	230f      	movs	r3, #15
 8000f96:	18fb      	adds	r3, r7, r3
 8000f98:	2200      	movs	r2, #0
 8000f9a:	701a      	strb	r2, [r3, #0]
 8000f9c:	e01e      	b.n	8000fdc <wizchip_init+0x6a>
		{
			tmp += txsize[i];
 8000f9e:	230f      	movs	r3, #15
 8000fa0:	18fb      	adds	r3, r7, r3
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	b25b      	sxtb	r3, r3
 8000fa6:	687a      	ldr	r2, [r7, #4]
 8000fa8:	18d3      	adds	r3, r2, r3
 8000faa:	781a      	ldrb	r2, [r3, #0]
 8000fac:	210e      	movs	r1, #14
 8000fae:	187b      	adds	r3, r7, r1
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	18d3      	adds	r3, r2, r3
 8000fb4:	b2da      	uxtb	r2, r3
 8000fb6:	187b      	adds	r3, r7, r1
 8000fb8:	701a      	strb	r2, [r3, #0]

		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 8000fba:	187b      	adds	r3, r7, r1
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	b25b      	sxtb	r3, r3
 8000fc0:	2b10      	cmp	r3, #16
 8000fc2:	dd02      	ble.n	8000fca <wizchip_init+0x58>
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	425b      	negs	r3, r3
 8000fc8:	e092      	b.n	80010f0 <wizchip_init+0x17e>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8000fca:	210f      	movs	r1, #15
 8000fcc:	187b      	adds	r3, r7, r1
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	b25b      	sxtb	r3, r3
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	b2da      	uxtb	r2, r3
 8000fd8:	187b      	adds	r3, r7, r1
 8000fda:	701a      	strb	r2, [r3, #0]
 8000fdc:	220f      	movs	r2, #15
 8000fde:	18bb      	adds	r3, r7, r2
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	b25b      	sxtb	r3, r3
 8000fe4:	2b07      	cmp	r3, #7
 8000fe6:	ddda      	ble.n	8000f9e <wizchip_init+0x2c>
		#endif
		}
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8000fe8:	18bb      	adds	r3, r7, r2
 8000fea:	2200      	movs	r2, #0
 8000fec:	701a      	strb	r2, [r3, #0]
 8000fee:	e01e      	b.n	800102e <wizchip_init+0xbc>
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
		#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8000ff0:	220f      	movs	r2, #15
 8000ff2:	18bb      	adds	r3, r7, r2
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	b25b      	sxtb	r3, r3
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	00db      	lsls	r3, r3, #3
 8000ffe:	21f8      	movs	r1, #248	@ 0xf8
 8001000:	0149      	lsls	r1, r1, #5
 8001002:	468c      	mov	ip, r1
 8001004:	4463      	add	r3, ip
 8001006:	0018      	movs	r0, r3
 8001008:	0014      	movs	r4, r2
 800100a:	18bb      	adds	r3, r7, r2
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	b25b      	sxtb	r3, r3
 8001010:	687a      	ldr	r2, [r7, #4]
 8001012:	18d3      	adds	r3, r2, r3
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	0019      	movs	r1, r3
 8001018:	f7ff fbf6 	bl	8000808 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800101c:	0021      	movs	r1, r4
 800101e:	187b      	adds	r3, r7, r1
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	b25b      	sxtb	r3, r3
 8001024:	b2db      	uxtb	r3, r3
 8001026:	3301      	adds	r3, #1
 8001028:	b2da      	uxtb	r2, r3
 800102a:	187b      	adds	r3, r7, r1
 800102c:	701a      	strb	r2, [r3, #0]
 800102e:	230f      	movs	r3, #15
 8001030:	18fb      	adds	r3, r7, r3
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	b25b      	sxtb	r3, r3
 8001036:	2b07      	cmp	r3, #7
 8001038:	ddda      	ble.n	8000ff0 <wizchip_init+0x7e>
		}

	#endif
   }

   if(rxsize)
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d056      	beq.n	80010ee <wizchip_init+0x17c>
   {
      tmp = 0;
 8001040:	230e      	movs	r3, #14
 8001042:	18fb      	adds	r3, r7, r3
 8001044:	2200      	movs	r2, #0
 8001046:	701a      	strb	r2, [r3, #0]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001048:	230f      	movs	r3, #15
 800104a:	18fb      	adds	r3, r7, r3
 800104c:	2200      	movs	r2, #0
 800104e:	701a      	strb	r2, [r3, #0]
 8001050:	e01e      	b.n	8001090 <wizchip_init+0x11e>
		{
			tmp += rxsize[i];
 8001052:	230f      	movs	r3, #15
 8001054:	18fb      	adds	r3, r7, r3
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	b25b      	sxtb	r3, r3
 800105a:	683a      	ldr	r2, [r7, #0]
 800105c:	18d3      	adds	r3, r2, r3
 800105e:	781a      	ldrb	r2, [r3, #0]
 8001060:	210e      	movs	r1, #14
 8001062:	187b      	adds	r3, r7, r1
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	18d3      	adds	r3, r2, r3
 8001068:	b2da      	uxtb	r2, r3
 800106a:	187b      	adds	r3, r7, r1
 800106c:	701a      	strb	r2, [r3, #0]
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 800106e:	187b      	adds	r3, r7, r1
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	b25b      	sxtb	r3, r3
 8001074:	2b10      	cmp	r3, #16
 8001076:	dd02      	ble.n	800107e <wizchip_init+0x10c>
 8001078:	2301      	movs	r3, #1
 800107a:	425b      	negs	r3, r3
 800107c:	e038      	b.n	80010f0 <wizchip_init+0x17e>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800107e:	210f      	movs	r1, #15
 8001080:	187b      	adds	r3, r7, r1
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	b25b      	sxtb	r3, r3
 8001086:	b2db      	uxtb	r3, r3
 8001088:	3301      	adds	r3, #1
 800108a:	b2da      	uxtb	r2, r3
 800108c:	187b      	adds	r3, r7, r1
 800108e:	701a      	strb	r2, [r3, #0]
 8001090:	220f      	movs	r2, #15
 8001092:	18bb      	adds	r3, r7, r2
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	b25b      	sxtb	r3, r3
 8001098:	2b07      	cmp	r3, #7
 800109a:	ddda      	ble.n	8001052 <wizchip_init+0xe0>
		#endif
		}

		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800109c:	18bb      	adds	r3, r7, r2
 800109e:	2200      	movs	r2, #0
 80010a0:	701a      	strb	r2, [r3, #0]
 80010a2:	e01e      	b.n	80010e2 <wizchip_init+0x170>
		#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
		#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 80010a4:	220f      	movs	r2, #15
 80010a6:	18bb      	adds	r3, r7, r2
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	b25b      	sxtb	r3, r3
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	3301      	adds	r3, #1
 80010b0:	00db      	lsls	r3, r3, #3
 80010b2:	21f0      	movs	r1, #240	@ 0xf0
 80010b4:	0149      	lsls	r1, r1, #5
 80010b6:	468c      	mov	ip, r1
 80010b8:	4463      	add	r3, ip
 80010ba:	0018      	movs	r0, r3
 80010bc:	0014      	movs	r4, r2
 80010be:	18bb      	adds	r3, r7, r2
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	b25b      	sxtb	r3, r3
 80010c4:	683a      	ldr	r2, [r7, #0]
 80010c6:	18d3      	adds	r3, r2, r3
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	0019      	movs	r1, r3
 80010cc:	f7ff fb9c 	bl	8000808 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80010d0:	0021      	movs	r1, r4
 80010d2:	187b      	adds	r3, r7, r1
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	b25b      	sxtb	r3, r3
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	3301      	adds	r3, #1
 80010dc:	b2da      	uxtb	r2, r3
 80010de:	187b      	adds	r3, r7, r1
 80010e0:	701a      	strb	r2, [r3, #0]
 80010e2:	230f      	movs	r3, #15
 80010e4:	18fb      	adds	r3, r7, r3
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	b25b      	sxtb	r3, r3
 80010ea:	2b07      	cmp	r3, #7
 80010ec:	ddda      	ble.n	80010a4 <wizchip_init+0x132>
		#endif
		}
	#endif
   }
   return 0;
 80010ee:	2300      	movs	r3, #0
}
 80010f0:	0018      	movs	r0, r3
 80010f2:	46bd      	mov	sp, r7
 80010f4:	b005      	add	sp, #20
 80010f6:	bd90      	pop	{r4, r7, pc}

080010f8 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 80010f8:	b590      	push	{r4, r7, lr}
 80010fa:	b085      	sub	sp, #20
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	0002      	movs	r2, r0
 8001100:	1dbb      	adds	r3, r7, #6
 8001102:	801a      	strh	r2, [r3, #0]
   uint8_t ir  = (uint8_t)intr;
 8001104:	210f      	movs	r1, #15
 8001106:	187b      	adds	r3, r7, r1
 8001108:	1dba      	adds	r2, r7, #6
 800110a:	8812      	ldrh	r2, [r2, #0]
 800110c:	701a      	strb	r2, [r3, #0]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 800110e:	1dbb      	adds	r3, r7, #6
 8001110:	881b      	ldrh	r3, [r3, #0]
 8001112:	0a1b      	lsrs	r3, r3, #8
 8001114:	b29a      	uxth	r2, r3
 8001116:	230e      	movs	r3, #14
 8001118:	18fb      	adds	r3, r7, r3
 800111a:	701a      	strb	r2, [r3, #0]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 800111c:	000c      	movs	r4, r1
 800111e:	187b      	adds	r3, r7, r1
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	220f      	movs	r2, #15
 8001124:	4393      	bics	r3, r2
 8001126:	b2da      	uxtb	r2, r3
 8001128:	23a8      	movs	r3, #168	@ 0xa8
 800112a:	015b      	lsls	r3, r3, #5
 800112c:	0011      	movs	r1, r2
 800112e:	0018      	movs	r0, r3
 8001130:	f7ff fb6a 	bl	8000808 <WIZCHIP_WRITE>
//M20200227 : For clear
   //setSIR(sir);
   for(ir=0; ir<8; ir++){
 8001134:	193b      	adds	r3, r7, r4
 8001136:	2200      	movs	r2, #0
 8001138:	701a      	strb	r2, [r3, #0]
 800113a:	e01d      	b.n	8001178 <wizchip_clrinterrupt+0x80>
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
 800113c:	230e      	movs	r3, #14
 800113e:	18fb      	adds	r3, r7, r3
 8001140:	781a      	ldrb	r2, [r3, #0]
 8001142:	210f      	movs	r1, #15
 8001144:	187b      	adds	r3, r7, r1
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	411a      	asrs	r2, r3
 800114a:	0013      	movs	r3, r2
 800114c:	2201      	movs	r2, #1
 800114e:	4013      	ands	r3, r2
 8001150:	d00c      	beq.n	800116c <wizchip_clrinterrupt+0x74>
 8001152:	187b      	adds	r3, r7, r1
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	3301      	adds	r3, #1
 800115a:	00db      	lsls	r3, r3, #3
 800115c:	2280      	movs	r2, #128	@ 0x80
 800115e:	0092      	lsls	r2, r2, #2
 8001160:	4694      	mov	ip, r2
 8001162:	4463      	add	r3, ip
 8001164:	211f      	movs	r1, #31
 8001166:	0018      	movs	r0, r3
 8001168:	f7ff fb4e 	bl	8000808 <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
 800116c:	210f      	movs	r1, #15
 800116e:	187b      	adds	r3, r7, r1
 8001170:	781a      	ldrb	r2, [r3, #0]
 8001172:	187b      	adds	r3, r7, r1
 8001174:	3201      	adds	r2, #1
 8001176:	701a      	strb	r2, [r3, #0]
 8001178:	230f      	movs	r3, #15
 800117a:	18fb      	adds	r3, r7, r3
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	2b07      	cmp	r3, #7
 8001180:	d9dc      	bls.n	800113c <wizchip_clrinterrupt+0x44>
   }

#endif   
}
 8001182:	46c0      	nop			@ (mov r8, r8)
 8001184:	46c0      	nop			@ (mov r8, r8)
 8001186:	46bd      	mov	sp, r7
 8001188:	b005      	add	sp, #20
 800118a:	bd90      	pop	{r4, r7, pc}

0800118c <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 800118c:	b590      	push	{r4, r7, lr}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 8001192:	1dfb      	adds	r3, r7, #7
 8001194:	2200      	movs	r2, #0
 8001196:	701a      	strb	r2, [r3, #0]
   uint8_t sir = 0;
 8001198:	1dbb      	adds	r3, r7, #6
 800119a:	2200      	movs	r2, #0
 800119c:	701a      	strb	r2, [r3, #0]
   uint16_t ret = 0;
 800119e:	1d3b      	adds	r3, r7, #4
 80011a0:	2200      	movs	r2, #0
 80011a2:	801a      	strh	r2, [r3, #0]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 80011a4:	23a8      	movs	r3, #168	@ 0xa8
 80011a6:	015b      	lsls	r3, r3, #5
 80011a8:	0018      	movs	r0, r3
 80011aa:	f7ff fadb 	bl	8000764 <WIZCHIP_READ>
 80011ae:	0003      	movs	r3, r0
 80011b0:	0019      	movs	r1, r3
 80011b2:	1dfb      	adds	r3, r7, #7
 80011b4:	220f      	movs	r2, #15
 80011b6:	4391      	bics	r1, r2
 80011b8:	000a      	movs	r2, r1
 80011ba:	701a      	strb	r2, [r3, #0]
   sir = getSIR();
 80011bc:	1dbc      	adds	r4, r7, #6
 80011be:	23b8      	movs	r3, #184	@ 0xb8
 80011c0:	015b      	lsls	r3, r3, #5
 80011c2:	0018      	movs	r0, r3
 80011c4:	f7ff face 	bl	8000764 <WIZCHIP_READ>
 80011c8:	0003      	movs	r3, r0
 80011ca:	7023      	strb	r3, [r4, #0]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 80011cc:	1d3b      	adds	r3, r7, #4
 80011ce:	1dba      	adds	r2, r7, #6
 80011d0:	7812      	ldrb	r2, [r2, #0]
 80011d2:	801a      	strh	r2, [r3, #0]
  ret = (ret << 8) + ir;
 80011d4:	1d3b      	adds	r3, r7, #4
 80011d6:	881b      	ldrh	r3, [r3, #0]
 80011d8:	021b      	lsls	r3, r3, #8
 80011da:	b299      	uxth	r1, r3
 80011dc:	1dfb      	adds	r3, r7, #7
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	b29a      	uxth	r2, r3
 80011e2:	1d3b      	adds	r3, r7, #4
 80011e4:	188a      	adds	r2, r1, r2
 80011e6:	801a      	strh	r2, [r3, #0]
  return (intr_kind)ret;
 80011e8:	1d3b      	adds	r3, r7, #4
 80011ea:	881b      	ldrh	r3, [r3, #0]
}
 80011ec:	0018      	movs	r0, r3
 80011ee:	46bd      	mov	sp, r7
 80011f0:	b003      	add	sp, #12
 80011f2:	bd90      	pop	{r4, r7, pc}

080011f4 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 80011f4:	b590      	push	{r4, r7, lr}
 80011f6:	b085      	sub	sp, #20
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	0002      	movs	r2, r0
 80011fc:	1dbb      	adds	r3, r7, #6
 80011fe:	801a      	strh	r2, [r3, #0]
   uint8_t imr  = (uint8_t)intr;
 8001200:	210f      	movs	r1, #15
 8001202:	187b      	adds	r3, r7, r1
 8001204:	1dba      	adds	r2, r7, #6
 8001206:	8812      	ldrh	r2, [r2, #0]
 8001208:	701a      	strb	r2, [r3, #0]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 800120a:	1dbb      	adds	r3, r7, #6
 800120c:	881b      	ldrh	r3, [r3, #0]
 800120e:	0a1b      	lsrs	r3, r3, #8
 8001210:	b29a      	uxth	r2, r3
 8001212:	240e      	movs	r4, #14
 8001214:	193b      	adds	r3, r7, r4
 8001216:	701a      	strb	r2, [r3, #0]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 8001218:	187b      	adds	r3, r7, r1
 800121a:	781a      	ldrb	r2, [r3, #0]
 800121c:	23b0      	movs	r3, #176	@ 0xb0
 800121e:	015b      	lsls	r3, r3, #5
 8001220:	0011      	movs	r1, r2
 8001222:	0018      	movs	r0, r3
 8001224:	f7ff faf0 	bl	8000808 <WIZCHIP_WRITE>
   setSIMR(simr);
 8001228:	193b      	adds	r3, r7, r4
 800122a:	781a      	ldrb	r2, [r3, #0]
 800122c:	23c0      	movs	r3, #192	@ 0xc0
 800122e:	015b      	lsls	r3, r3, #5
 8001230:	0011      	movs	r1, r2
 8001232:	0018      	movs	r0, r3
 8001234:	f7ff fae8 	bl	8000808 <WIZCHIP_WRITE>
#endif   
}
 8001238:	46c0      	nop			@ (mov r8, r8)
 800123a:	46bd      	mov	sp, r7
 800123c:	b005      	add	sp, #20
 800123e:	bd90      	pop	{r4, r7, pc}

08001240 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8001240:	b590      	push	{r4, r7, lr}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 8001246:	1dfb      	adds	r3, r7, #7
 8001248:	2200      	movs	r2, #0
 800124a:	701a      	strb	r2, [r3, #0]
   uint8_t simr = 0;
 800124c:	1dbb      	adds	r3, r7, #6
 800124e:	2200      	movs	r2, #0
 8001250:	701a      	strb	r2, [r3, #0]
   uint16_t ret = 0;
 8001252:	1d3b      	adds	r3, r7, #4
 8001254:	2200      	movs	r2, #0
 8001256:	801a      	strh	r2, [r3, #0]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 8001258:	1dfc      	adds	r4, r7, #7
 800125a:	23b0      	movs	r3, #176	@ 0xb0
 800125c:	015b      	lsls	r3, r3, #5
 800125e:	0018      	movs	r0, r3
 8001260:	f7ff fa80 	bl	8000764 <WIZCHIP_READ>
 8001264:	0003      	movs	r3, r0
 8001266:	7023      	strb	r3, [r4, #0]
   simr = getSIMR();
 8001268:	1dbc      	adds	r4, r7, #6
 800126a:	23c0      	movs	r3, #192	@ 0xc0
 800126c:	015b      	lsls	r3, r3, #5
 800126e:	0018      	movs	r0, r3
 8001270:	f7ff fa78 	bl	8000764 <WIZCHIP_READ>
 8001274:	0003      	movs	r3, r0
 8001276:	7023      	strb	r3, [r4, #0]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 8001278:	1d3b      	adds	r3, r7, #4
 800127a:	1dba      	adds	r2, r7, #6
 800127c:	7812      	ldrb	r2, [r2, #0]
 800127e:	801a      	strh	r2, [r3, #0]
  ret = (ret << 8) + imr;
 8001280:	1d3b      	adds	r3, r7, #4
 8001282:	881b      	ldrh	r3, [r3, #0]
 8001284:	021b      	lsls	r3, r3, #8
 8001286:	b299      	uxth	r1, r3
 8001288:	1dfb      	adds	r3, r7, #7
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	b29a      	uxth	r2, r3
 800128e:	1d3b      	adds	r3, r7, #4
 8001290:	188a      	adds	r2, r1, r2
 8001292:	801a      	strh	r2, [r3, #0]
  return (intr_kind)ret;
 8001294:	1d3b      	adds	r3, r7, #4
 8001296:	881b      	ldrh	r3, [r3, #0]
}
 8001298:	0018      	movs	r0, r3
 800129a:	46bd      	mov	sp, r7
 800129c:	b003      	add	sp, #12
 800129e:	bd90      	pop	{r4, r7, pc}

080012a0 <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 80012a6:	1dfb      	adds	r3, r7, #7
 80012a8:	2200      	movs	r2, #0
 80012aa:	701a      	strb	r2, [r3, #0]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 80012ac:	23b8      	movs	r3, #184	@ 0xb8
 80012ae:	019b      	lsls	r3, r3, #6
 80012b0:	0018      	movs	r0, r3
 80012b2:	f7ff fa57 	bl	8000764 <WIZCHIP_READ>
 80012b6:	0003      	movs	r3, r0
 80012b8:	001a      	movs	r2, r3
 80012ba:	2301      	movs	r3, #1
 80012bc:	4013      	ands	r3, r2
 80012be:	d002      	beq.n	80012c6 <wizphy_getphylink+0x26>
      tmp = PHY_LINK_ON;
 80012c0:	1dfb      	adds	r3, r7, #7
 80012c2:	2201      	movs	r2, #1
 80012c4:	701a      	strb	r2, [r3, #0]

#else
   tmp = -1;
#endif
   return tmp;
 80012c6:	1dfb      	adds	r3, r7, #7
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	b25b      	sxtb	r3, r3
}
 80012cc:	0018      	movs	r0, r3
 80012ce:	46bd      	mov	sp, r7
 80012d0:	b002      	add	sp, #8
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 80012da:	1dfb      	adds	r3, r7, #7
 80012dc:	2200      	movs	r2, #0
 80012de:	701a      	strb	r2, [r3, #0]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 80012e0:	23b8      	movs	r3, #184	@ 0xb8
 80012e2:	019b      	lsls	r3, r3, #6
 80012e4:	0018      	movs	r0, r3
 80012e6:	f7ff fa3d 	bl	8000764 <WIZCHIP_READ>
 80012ea:	0003      	movs	r3, r0
 80012ec:	001a      	movs	r2, r3
 80012ee:	2338      	movs	r3, #56	@ 0x38
 80012f0:	4013      	ands	r3, r2
 80012f2:	2b30      	cmp	r3, #48	@ 0x30
 80012f4:	d103      	bne.n	80012fe <wizphy_getphypmode+0x2a>
         tmp = PHY_POWER_DOWN;
 80012f6:	1dfb      	adds	r3, r7, #7
 80012f8:	2201      	movs	r2, #1
 80012fa:	701a      	strb	r2, [r3, #0]
 80012fc:	e002      	b.n	8001304 <wizphy_getphypmode+0x30>
      else 
         tmp = PHY_POWER_NORM;
 80012fe:	1dfb      	adds	r3, r7, #7
 8001300:	2200      	movs	r2, #0
 8001302:	701a      	strb	r2, [r3, #0]
   #else
      tmp = -1;
   #endif
   return tmp;
 8001304:	1dfb      	adds	r3, r7, #7
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	b25b      	sxtb	r3, r3
}
 800130a:	0018      	movs	r0, r3
 800130c:	46bd      	mov	sp, r7
 800130e:	b002      	add	sp, #8
 8001310:	bd80      	pop	{r7, pc}

08001312 <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 8001312:	b590      	push	{r4, r7, lr}
 8001314:	b083      	sub	sp, #12
 8001316:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 8001318:	1dfc      	adds	r4, r7, #7
 800131a:	23b8      	movs	r3, #184	@ 0xb8
 800131c:	019b      	lsls	r3, r3, #6
 800131e:	0018      	movs	r0, r3
 8001320:	f7ff fa20 	bl	8000764 <WIZCHIP_READ>
 8001324:	0003      	movs	r3, r0
 8001326:	7023      	strb	r3, [r4, #0]
   tmp &= PHYCFGR_RST;
 8001328:	1dfb      	adds	r3, r7, #7
 800132a:	1dfa      	adds	r2, r7, #7
 800132c:	7812      	ldrb	r2, [r2, #0]
 800132e:	217f      	movs	r1, #127	@ 0x7f
 8001330:	400a      	ands	r2, r1
 8001332:	701a      	strb	r2, [r3, #0]
   setPHYCFGR(tmp);
 8001334:	1dfb      	adds	r3, r7, #7
 8001336:	781a      	ldrb	r2, [r3, #0]
 8001338:	23b8      	movs	r3, #184	@ 0xb8
 800133a:	019b      	lsls	r3, r3, #6
 800133c:	0011      	movs	r1, r2
 800133e:	0018      	movs	r0, r3
 8001340:	f7ff fa62 	bl	8000808 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 8001344:	1dfc      	adds	r4, r7, #7
 8001346:	23b8      	movs	r3, #184	@ 0xb8
 8001348:	019b      	lsls	r3, r3, #6
 800134a:	0018      	movs	r0, r3
 800134c:	f7ff fa0a 	bl	8000764 <WIZCHIP_READ>
 8001350:	0003      	movs	r3, r0
 8001352:	7023      	strb	r3, [r4, #0]
   tmp |= ~PHYCFGR_RST;
 8001354:	1dfb      	adds	r3, r7, #7
 8001356:	1dfa      	adds	r2, r7, #7
 8001358:	7812      	ldrb	r2, [r2, #0]
 800135a:	2180      	movs	r1, #128	@ 0x80
 800135c:	4249      	negs	r1, r1
 800135e:	430a      	orrs	r2, r1
 8001360:	701a      	strb	r2, [r3, #0]
   setPHYCFGR(tmp);
 8001362:	1dfb      	adds	r3, r7, #7
 8001364:	781a      	ldrb	r2, [r3, #0]
 8001366:	23b8      	movs	r3, #184	@ 0xb8
 8001368:	019b      	lsls	r3, r3, #6
 800136a:	0011      	movs	r1, r2
 800136c:	0018      	movs	r0, r3
 800136e:	f7ff fa4b 	bl	8000808 <WIZCHIP_WRITE>
}
 8001372:	46c0      	nop			@ (mov r8, r8)
 8001374:	46bd      	mov	sp, r7
 8001376:	b003      	add	sp, #12
 8001378:	bd90      	pop	{r4, r7, pc}

0800137a <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 800137a:	b580      	push	{r7, lr}
 800137c:	b084      	sub	sp, #16
 800137e:	af00      	add	r7, sp, #0
 8001380:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8001382:	210f      	movs	r1, #15
 8001384:	187b      	adds	r3, r7, r1
 8001386:	2200      	movs	r2, #0
 8001388:	701a      	strb	r2, [r3, #0]
   if(phyconf->by == PHY_CONFBY_SW)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	2b01      	cmp	r3, #1
 8001390:	d106      	bne.n	80013a0 <wizphy_setphyconf+0x26>
      tmp |= PHYCFGR_OPMD;
 8001392:	187b      	adds	r3, r7, r1
 8001394:	187a      	adds	r2, r7, r1
 8001396:	7812      	ldrb	r2, [r2, #0]
 8001398:	2140      	movs	r1, #64	@ 0x40
 800139a:	430a      	orrs	r2, r1
 800139c:	701a      	strb	r2, [r3, #0]
 800139e:	e006      	b.n	80013ae <wizphy_setphyconf+0x34>
   else
      tmp &= ~PHYCFGR_OPMD;
 80013a0:	220f      	movs	r2, #15
 80013a2:	18bb      	adds	r3, r7, r2
 80013a4:	18ba      	adds	r2, r7, r2
 80013a6:	7812      	ldrb	r2, [r2, #0]
 80013a8:	2140      	movs	r1, #64	@ 0x40
 80013aa:	438a      	bics	r2, r1
 80013ac:	701a      	strb	r2, [r3, #0]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	785b      	ldrb	r3, [r3, #1]
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d107      	bne.n	80013c6 <wizphy_setphyconf+0x4c>
      tmp |= PHYCFGR_OPMDC_ALLA;
 80013b6:	220f      	movs	r2, #15
 80013b8:	18bb      	adds	r3, r7, r2
 80013ba:	18ba      	adds	r2, r7, r2
 80013bc:	7812      	ldrb	r2, [r2, #0]
 80013be:	2138      	movs	r1, #56	@ 0x38
 80013c0:	430a      	orrs	r2, r1
 80013c2:	701a      	strb	r2, [r3, #0]
 80013c4:	e028      	b.n	8001418 <wizphy_setphyconf+0x9e>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	78db      	ldrb	r3, [r3, #3]
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d113      	bne.n	80013f6 <wizphy_setphyconf+0x7c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	789b      	ldrb	r3, [r3, #2]
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d107      	bne.n	80013e6 <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100F;
 80013d6:	220f      	movs	r2, #15
 80013d8:	18bb      	adds	r3, r7, r2
 80013da:	18ba      	adds	r2, r7, r2
 80013dc:	7812      	ldrb	r2, [r2, #0]
 80013de:	2118      	movs	r1, #24
 80013e0:	430a      	orrs	r2, r1
 80013e2:	701a      	strb	r2, [r3, #0]
 80013e4:	e018      	b.n	8001418 <wizphy_setphyconf+0x9e>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 80013e6:	220f      	movs	r2, #15
 80013e8:	18bb      	adds	r3, r7, r2
 80013ea:	18ba      	adds	r2, r7, r2
 80013ec:	7812      	ldrb	r2, [r2, #0]
 80013ee:	2108      	movs	r1, #8
 80013f0:	430a      	orrs	r2, r1
 80013f2:	701a      	strb	r2, [r3, #0]
 80013f4:	e010      	b.n	8001418 <wizphy_setphyconf+0x9e>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	789b      	ldrb	r3, [r3, #2]
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d107      	bne.n	800140e <wizphy_setphyconf+0x94>
            tmp |= PHYCFGR_OPMDC_100H;
 80013fe:	220f      	movs	r2, #15
 8001400:	18bb      	adds	r3, r7, r2
 8001402:	18ba      	adds	r2, r7, r2
 8001404:	7812      	ldrb	r2, [r2, #0]
 8001406:	2110      	movs	r1, #16
 8001408:	430a      	orrs	r2, r1
 800140a:	701a      	strb	r2, [r3, #0]
 800140c:	e004      	b.n	8001418 <wizphy_setphyconf+0x9e>
         else
            tmp |= PHYCFGR_OPMDC_10H;
 800140e:	220f      	movs	r2, #15
 8001410:	18bb      	adds	r3, r7, r2
 8001412:	18ba      	adds	r2, r7, r2
 8001414:	7812      	ldrb	r2, [r2, #0]
 8001416:	701a      	strb	r2, [r3, #0]
      }
   }
   setPHYCFGR(tmp);
 8001418:	230f      	movs	r3, #15
 800141a:	18fb      	adds	r3, r7, r3
 800141c:	781a      	ldrb	r2, [r3, #0]
 800141e:	23b8      	movs	r3, #184	@ 0xb8
 8001420:	019b      	lsls	r3, r3, #6
 8001422:	0011      	movs	r1, r2
 8001424:	0018      	movs	r0, r3
 8001426:	f7ff f9ef 	bl	8000808 <WIZCHIP_WRITE>
   wizphy_reset();
 800142a:	f7ff ff72 	bl	8001312 <wizphy_reset>
}
 800142e:	46c0      	nop			@ (mov r8, r8)
 8001430:	46bd      	mov	sp, r7
 8001432:	b004      	add	sp, #16
 8001434:	bd80      	pop	{r7, pc}
	...

08001438 <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 8001438:	b5b0      	push	{r4, r5, r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8001440:	250f      	movs	r5, #15
 8001442:	197b      	adds	r3, r7, r5
 8001444:	2200      	movs	r2, #0
 8001446:	701a      	strb	r2, [r3, #0]
   tmp = getPHYCFGR();
 8001448:	197c      	adds	r4, r7, r5
 800144a:	23b8      	movs	r3, #184	@ 0xb8
 800144c:	019b      	lsls	r3, r3, #6
 800144e:	0018      	movs	r0, r3
 8001450:	f7ff f988 	bl	8000764 <WIZCHIP_READ>
 8001454:	0003      	movs	r3, r0
 8001456:	7023      	strb	r3, [r4, #0]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 8001458:	0029      	movs	r1, r5
 800145a:	187b      	adds	r3, r7, r1
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	119b      	asrs	r3, r3, #6
 8001460:	b2db      	uxtb	r3, r3
 8001462:	2201      	movs	r2, #1
 8001464:	4013      	ands	r3, r2
 8001466:	b2da      	uxtb	r2, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 800146c:	187b      	adds	r3, r7, r1
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	2238      	movs	r2, #56	@ 0x38
 8001472:	4013      	ands	r3, r2
 8001474:	2b20      	cmp	r3, #32
 8001476:	d001      	beq.n	800147c <wizphy_getphyconf+0x44>
 8001478:	2b38      	cmp	r3, #56	@ 0x38
 800147a:	d103      	bne.n	8001484 <wizphy_getphyconf+0x4c>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2201      	movs	r2, #1
 8001480:	705a      	strb	r2, [r3, #1]
         break;
 8001482:	e003      	b.n	800148c <wizphy_getphyconf+0x54>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2200      	movs	r2, #0
 8001488:	705a      	strb	r2, [r3, #1]
         break;
 800148a:	46c0      	nop			@ (mov r8, r8)
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 800148c:	230f      	movs	r3, #15
 800148e:	18fb      	adds	r3, r7, r3
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	2238      	movs	r2, #56	@ 0x38
 8001494:	4013      	ands	r3, r2
 8001496:	3b10      	subs	r3, #16
 8001498:	2210      	movs	r2, #16
 800149a:	429a      	cmp	r2, r3
 800149c:	4192      	sbcs	r2, r2
 800149e:	4252      	negs	r2, r2
 80014a0:	b2d2      	uxtb	r2, r2
 80014a2:	2a00      	cmp	r2, #0
 80014a4:	d10d      	bne.n	80014c2 <wizphy_getphyconf+0x8a>
 80014a6:	4a1a      	ldr	r2, [pc, #104]	@ (8001510 <wizphy_getphyconf+0xd8>)
 80014a8:	40da      	lsrs	r2, r3
 80014aa:	0013      	movs	r3, r2
 80014ac:	2201      	movs	r2, #1
 80014ae:	4013      	ands	r3, r2
 80014b0:	1e5a      	subs	r2, r3, #1
 80014b2:	4193      	sbcs	r3, r2
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d003      	beq.n	80014c2 <wizphy_getphyconf+0x8a>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2201      	movs	r2, #1
 80014be:	709a      	strb	r2, [r3, #2]
         break;
 80014c0:	e003      	b.n	80014ca <wizphy_getphyconf+0x92>
      default:
         phyconf->speed = PHY_SPEED_10;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2200      	movs	r2, #0
 80014c6:	709a      	strb	r2, [r3, #2]
         break;
 80014c8:	46c0      	nop			@ (mov r8, r8)
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 80014ca:	230f      	movs	r3, #15
 80014cc:	18fb      	adds	r3, r7, r3
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	2238      	movs	r2, #56	@ 0x38
 80014d2:	4013      	ands	r3, r2
 80014d4:	3b08      	subs	r3, #8
 80014d6:	2218      	movs	r2, #24
 80014d8:	429a      	cmp	r2, r3
 80014da:	4192      	sbcs	r2, r2
 80014dc:	4252      	negs	r2, r2
 80014de:	b2d2      	uxtb	r2, r2
 80014e0:	2a00      	cmp	r2, #0
 80014e2:	d10d      	bne.n	8001500 <wizphy_getphyconf+0xc8>
 80014e4:	4a0b      	ldr	r2, [pc, #44]	@ (8001514 <wizphy_getphyconf+0xdc>)
 80014e6:	40da      	lsrs	r2, r3
 80014e8:	0013      	movs	r3, r2
 80014ea:	2201      	movs	r2, #1
 80014ec:	4013      	ands	r3, r2
 80014ee:	1e5a      	subs	r2, r3, #1
 80014f0:	4193      	sbcs	r3, r2
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d003      	beq.n	8001500 <wizphy_getphyconf+0xc8>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2201      	movs	r2, #1
 80014fc:	70da      	strb	r2, [r3, #3]
         break;
 80014fe:	e003      	b.n	8001508 <wizphy_getphyconf+0xd0>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2200      	movs	r2, #0
 8001504:	70da      	strb	r2, [r3, #3]
         break;
 8001506:	46c0      	nop			@ (mov r8, r8)
   }
}
 8001508:	46c0      	nop			@ (mov r8, r8)
 800150a:	46bd      	mov	sp, r7
 800150c:	b004      	add	sp, #16
 800150e:	bdb0      	pop	{r4, r5, r7, pc}
 8001510:	00010101 	.word	0x00010101
 8001514:	01010001 	.word	0x01010001

08001518 <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 8001518:	b5b0      	push	{r4, r5, r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	0002      	movs	r2, r0
 8001520:	1dfb      	adds	r3, r7, #7
 8001522:	701a      	strb	r2, [r3, #0]
   uint8_t tmp = 0;
 8001524:	250f      	movs	r5, #15
 8001526:	197b      	adds	r3, r7, r5
 8001528:	2200      	movs	r2, #0
 800152a:	701a      	strb	r2, [r3, #0]
   tmp = getPHYCFGR();
 800152c:	197c      	adds	r4, r7, r5
 800152e:	23b8      	movs	r3, #184	@ 0xb8
 8001530:	019b      	lsls	r3, r3, #6
 8001532:	0018      	movs	r0, r3
 8001534:	f7ff f916 	bl	8000764 <WIZCHIP_READ>
 8001538:	0003      	movs	r3, r0
 800153a:	7023      	strb	r3, [r4, #0]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 800153c:	197b      	adds	r3, r7, r5
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	2240      	movs	r2, #64	@ 0x40
 8001542:	4013      	ands	r3, r2
 8001544:	d102      	bne.n	800154c <wizphy_setphypmode+0x34>
 8001546:	2301      	movs	r3, #1
 8001548:	425b      	negs	r3, r3
 800154a:	e040      	b.n	80015ce <wizphy_setphypmode+0xb6>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 800154c:	200f      	movs	r0, #15
 800154e:	183b      	adds	r3, r7, r0
 8001550:	183a      	adds	r2, r7, r0
 8001552:	7812      	ldrb	r2, [r2, #0]
 8001554:	2138      	movs	r1, #56	@ 0x38
 8001556:	438a      	bics	r2, r1
 8001558:	701a      	strb	r2, [r3, #0]
   if( pmode == PHY_POWER_DOWN)
 800155a:	1dfb      	adds	r3, r7, #7
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	2b01      	cmp	r3, #1
 8001560:	d106      	bne.n	8001570 <wizphy_setphypmode+0x58>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 8001562:	183b      	adds	r3, r7, r0
 8001564:	183a      	adds	r2, r7, r0
 8001566:	7812      	ldrb	r2, [r2, #0]
 8001568:	2130      	movs	r1, #48	@ 0x30
 800156a:	430a      	orrs	r2, r1
 800156c:	701a      	strb	r2, [r3, #0]
 800156e:	e006      	b.n	800157e <wizphy_setphypmode+0x66>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 8001570:	220f      	movs	r2, #15
 8001572:	18bb      	adds	r3, r7, r2
 8001574:	18ba      	adds	r2, r7, r2
 8001576:	7812      	ldrb	r2, [r2, #0]
 8001578:	2138      	movs	r1, #56	@ 0x38
 800157a:	430a      	orrs	r2, r1
 800157c:	701a      	strb	r2, [r3, #0]
   setPHYCFGR(tmp);
 800157e:	250f      	movs	r5, #15
 8001580:	197b      	adds	r3, r7, r5
 8001582:	781a      	ldrb	r2, [r3, #0]
 8001584:	23b8      	movs	r3, #184	@ 0xb8
 8001586:	019b      	lsls	r3, r3, #6
 8001588:	0011      	movs	r1, r2
 800158a:	0018      	movs	r0, r3
 800158c:	f7ff f93c 	bl	8000808 <WIZCHIP_WRITE>
   wizphy_reset();
 8001590:	f7ff febf 	bl	8001312 <wizphy_reset>
   tmp = getPHYCFGR();
 8001594:	197c      	adds	r4, r7, r5
 8001596:	23b8      	movs	r3, #184	@ 0xb8
 8001598:	019b      	lsls	r3, r3, #6
 800159a:	0018      	movs	r0, r3
 800159c:	f7ff f8e2 	bl	8000764 <WIZCHIP_READ>
 80015a0:	0003      	movs	r3, r0
 80015a2:	7023      	strb	r3, [r4, #0]
   if( pmode == PHY_POWER_DOWN)
 80015a4:	1dfb      	adds	r3, r7, #7
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d106      	bne.n	80015ba <wizphy_setphypmode+0xa2>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 80015ac:	197b      	adds	r3, r7, r5
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	2230      	movs	r2, #48	@ 0x30
 80015b2:	4013      	ands	r3, r2
 80015b4:	d009      	beq.n	80015ca <wizphy_setphypmode+0xb2>
 80015b6:	2300      	movs	r3, #0
 80015b8:	e009      	b.n	80015ce <wizphy_setphypmode+0xb6>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 80015ba:	230f      	movs	r3, #15
 80015bc:	18fb      	adds	r3, r7, r3
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	2238      	movs	r2, #56	@ 0x38
 80015c2:	4013      	ands	r3, r2
 80015c4:	d001      	beq.n	80015ca <wizphy_setphypmode+0xb2>
 80015c6:	2300      	movs	r3, #0
 80015c8:	e001      	b.n	80015ce <wizphy_setphypmode+0xb6>
   }
   return -1;
 80015ca:	2301      	movs	r3, #1
 80015cc:	425b      	negs	r3, r3
}
 80015ce:	0018      	movs	r0, r3
 80015d0:	46bd      	mov	sp, r7
 80015d2:	b004      	add	sp, #16
 80015d4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080015d8 <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 80015e0:	6879      	ldr	r1, [r7, #4]
 80015e2:	2390      	movs	r3, #144	@ 0x90
 80015e4:	011b      	lsls	r3, r3, #4
 80015e6:	2206      	movs	r2, #6
 80015e8:	0018      	movs	r0, r3
 80015ea:	f7ff f9d1 	bl	8000990 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	330e      	adds	r3, #14
 80015f2:	0019      	movs	r1, r3
 80015f4:	2380      	movs	r3, #128	@ 0x80
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	2204      	movs	r2, #4
 80015fa:	0018      	movs	r0, r3
 80015fc:	f7ff f9c8 	bl	8000990 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	330a      	adds	r3, #10
 8001604:	0019      	movs	r1, r3
 8001606:	23a0      	movs	r3, #160	@ 0xa0
 8001608:	00db      	lsls	r3, r3, #3
 800160a:	2204      	movs	r2, #4
 800160c:	0018      	movs	r0, r3
 800160e:	f7ff f9bf 	bl	8000990 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	1d99      	adds	r1, r3, #6
 8001616:	23f0      	movs	r3, #240	@ 0xf0
 8001618:	011b      	lsls	r3, r3, #4
 800161a:	2204      	movs	r2, #4
 800161c:	0018      	movs	r0, r3
 800161e:	f7ff f9b7 	bl	8000990 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	7c9a      	ldrb	r2, [r3, #18]
 8001626:	4b0b      	ldr	r3, [pc, #44]	@ (8001654 <wizchip_setnetinfo+0x7c>)
 8001628:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	7cda      	ldrb	r2, [r3, #19]
 800162e:	4b09      	ldr	r3, [pc, #36]	@ (8001654 <wizchip_setnetinfo+0x7c>)
 8001630:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	7d1a      	ldrb	r2, [r3, #20]
 8001636:	4b07      	ldr	r3, [pc, #28]	@ (8001654 <wizchip_setnetinfo+0x7c>)
 8001638:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	7d5a      	ldrb	r2, [r3, #21]
 800163e:	4b05      	ldr	r3, [pc, #20]	@ (8001654 <wizchip_setnetinfo+0x7c>)
 8001640:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	7d9a      	ldrb	r2, [r3, #22]
 8001646:	4b04      	ldr	r3, [pc, #16]	@ (8001658 <wizchip_setnetinfo+0x80>)
 8001648:	701a      	strb	r2, [r3, #0]
}
 800164a:	46c0      	nop			@ (mov r8, r8)
 800164c:	46bd      	mov	sp, r7
 800164e:	b002      	add	sp, #8
 8001650:	bd80      	pop	{r7, pc}
 8001652:	46c0      	nop			@ (mov r8, r8)
 8001654:	200000ac 	.word	0x200000ac
 8001658:	200000b0 	.word	0x200000b0

0800165c <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 8001664:	6879      	ldr	r1, [r7, #4]
 8001666:	2390      	movs	r3, #144	@ 0x90
 8001668:	011b      	lsls	r3, r3, #4
 800166a:	2206      	movs	r2, #6
 800166c:	0018      	movs	r0, r3
 800166e:	f7ff f921 	bl	80008b4 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	330e      	adds	r3, #14
 8001676:	0019      	movs	r1, r3
 8001678:	2380      	movs	r3, #128	@ 0x80
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	2204      	movs	r2, #4
 800167e:	0018      	movs	r0, r3
 8001680:	f7ff f918 	bl	80008b4 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	330a      	adds	r3, #10
 8001688:	0019      	movs	r1, r3
 800168a:	23a0      	movs	r3, #160	@ 0xa0
 800168c:	00db      	lsls	r3, r3, #3
 800168e:	2204      	movs	r2, #4
 8001690:	0018      	movs	r0, r3
 8001692:	f7ff f90f 	bl	80008b4 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	1d99      	adds	r1, r3, #6
 800169a:	23f0      	movs	r3, #240	@ 0xf0
 800169c:	011b      	lsls	r3, r3, #4
 800169e:	2204      	movs	r2, #4
 80016a0:	0018      	movs	r0, r3
 80016a2:	f7ff f907 	bl	80008b4 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 80016a6:	4b0c      	ldr	r3, [pc, #48]	@ (80016d8 <wizchip_getnetinfo+0x7c>)
 80016a8:	781a      	ldrb	r2, [r3, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 80016ae:	4b0a      	ldr	r3, [pc, #40]	@ (80016d8 <wizchip_getnetinfo+0x7c>)
 80016b0:	785a      	ldrb	r2, [r3, #1]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 80016b6:	4b08      	ldr	r3, [pc, #32]	@ (80016d8 <wizchip_getnetinfo+0x7c>)
 80016b8:	789a      	ldrb	r2, [r3, #2]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 80016be:	4b06      	ldr	r3, [pc, #24]	@ (80016d8 <wizchip_getnetinfo+0x7c>)
 80016c0:	78da      	ldrb	r2, [r3, #3]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 80016c6:	4b05      	ldr	r3, [pc, #20]	@ (80016dc <wizchip_getnetinfo+0x80>)
 80016c8:	781a      	ldrb	r2, [r3, #0]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	759a      	strb	r2, [r3, #22]
}
 80016ce:	46c0      	nop			@ (mov r8, r8)
 80016d0:	46bd      	mov	sp, r7
 80016d2:	b002      	add	sp, #8
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	46c0      	nop			@ (mov r8, r8)
 80016d8:	200000ac 	.word	0x200000ac
 80016dc:	200000b0 	.word	0x200000b0

080016e0 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 80016e0:	b5b0      	push	{r4, r5, r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	0002      	movs	r2, r0
 80016e8:	1dfb      	adds	r3, r7, #7
 80016ea:	701a      	strb	r2, [r3, #0]
   uint8_t tmp = 0;
 80016ec:	230f      	movs	r3, #15
 80016ee:	18fb      	adds	r3, r7, r3
 80016f0:	2200      	movs	r2, #0
 80016f2:	701a      	strb	r2, [r3, #0]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 80016f4:	1dfb      	adds	r3, r7, #7
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	223a      	movs	r2, #58	@ 0x3a
 80016fa:	4393      	bics	r3, r2
 80016fc:	d002      	beq.n	8001704 <wizchip_setnetmode+0x24>
 80016fe:	2301      	movs	r3, #1
 8001700:	425b      	negs	r3, r3
 8001702:	e015      	b.n	8001730 <wizchip_setnetmode+0x50>
#endif      
   tmp = getMR();
 8001704:	250f      	movs	r5, #15
 8001706:	197c      	adds	r4, r7, r5
 8001708:	2000      	movs	r0, #0
 800170a:	f7ff f82b 	bl	8000764 <WIZCHIP_READ>
 800170e:	0003      	movs	r3, r0
 8001710:	7023      	strb	r3, [r4, #0]
   tmp |= (uint8_t)netmode;
 8001712:	0028      	movs	r0, r5
 8001714:	183b      	adds	r3, r7, r0
 8001716:	1839      	adds	r1, r7, r0
 8001718:	1dfa      	adds	r2, r7, #7
 800171a:	7809      	ldrb	r1, [r1, #0]
 800171c:	7812      	ldrb	r2, [r2, #0]
 800171e:	430a      	orrs	r2, r1
 8001720:	701a      	strb	r2, [r3, #0]
   setMR(tmp);
 8001722:	183b      	adds	r3, r7, r0
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	0019      	movs	r1, r3
 8001728:	2000      	movs	r0, #0
 800172a:	f7ff f86d 	bl	8000808 <WIZCHIP_WRITE>
   return 0;
 800172e:	2300      	movs	r3, #0
}
 8001730:	0018      	movs	r0, r3
 8001732:	46bd      	mov	sp, r7
 8001734:	b004      	add	sp, #16
 8001736:	bdb0      	pop	{r4, r5, r7, pc}

08001738 <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 800173c:	2000      	movs	r0, #0
 800173e:	f7ff f811 	bl	8000764 <WIZCHIP_READ>
 8001742:	0003      	movs	r3, r0
}
 8001744:	0018      	movs	r0, r3
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b082      	sub	sp, #8
 800174e:	af00      	add	r7, sp, #0
 8001750:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	781a      	ldrb	r2, [r3, #0]
 8001756:	23d8      	movs	r3, #216	@ 0xd8
 8001758:	015b      	lsls	r3, r3, #5
 800175a:	0011      	movs	r1, r2
 800175c:	0018      	movs	r0, r3
 800175e:	f7ff f853 	bl	8000808 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	885b      	ldrh	r3, [r3, #2]
 8001766:	0a1b      	lsrs	r3, r3, #8
 8001768:	b29b      	uxth	r3, r3
 800176a:	b2da      	uxtb	r2, r3
 800176c:	23c8      	movs	r3, #200	@ 0xc8
 800176e:	015b      	lsls	r3, r3, #5
 8001770:	0011      	movs	r1, r2
 8001772:	0018      	movs	r0, r3
 8001774:	f7ff f848 	bl	8000808 <WIZCHIP_WRITE>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	885b      	ldrh	r3, [r3, #2]
 800177c:	b2da      	uxtb	r2, r3
 800177e:	23d0      	movs	r3, #208	@ 0xd0
 8001780:	015b      	lsls	r3, r3, #5
 8001782:	0011      	movs	r1, r2
 8001784:	0018      	movs	r0, r3
 8001786:	f7ff f83f 	bl	8000808 <WIZCHIP_WRITE>
}
 800178a:	46c0      	nop			@ (mov r8, r8)
 800178c:	46bd      	mov	sp, r7
 800178e:	b002      	add	sp, #8
 8001790:	bd80      	pop	{r7, pc}

08001792 <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 8001792:	b590      	push	{r4, r7, lr}
 8001794:	b083      	sub	sp, #12
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 800179a:	23d8      	movs	r3, #216	@ 0xd8
 800179c:	015b      	lsls	r3, r3, #5
 800179e:	0018      	movs	r0, r3
 80017a0:	f7fe ffe0 	bl	8000764 <WIZCHIP_READ>
 80017a4:	0003      	movs	r3, r0
 80017a6:	001a      	movs	r2, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 80017ac:	23c8      	movs	r3, #200	@ 0xc8
 80017ae:	015b      	lsls	r3, r3, #5
 80017b0:	0018      	movs	r0, r3
 80017b2:	f7fe ffd7 	bl	8000764 <WIZCHIP_READ>
 80017b6:	0003      	movs	r3, r0
 80017b8:	021b      	lsls	r3, r3, #8
 80017ba:	b29c      	uxth	r4, r3
 80017bc:	23d0      	movs	r3, #208	@ 0xd0
 80017be:	015b      	lsls	r3, r3, #5
 80017c0:	0018      	movs	r0, r3
 80017c2:	f7fe ffcf 	bl	8000764 <WIZCHIP_READ>
 80017c6:	0003      	movs	r3, r0
 80017c8:	18e3      	adds	r3, r4, r3
 80017ca:	b29a      	uxth	r2, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	805a      	strh	r2, [r3, #2]
}
 80017d0:	46c0      	nop			@ (mov r8, r8)
 80017d2:	46bd      	mov	sp, r7
 80017d4:	b003      	add	sp, #12
 80017d6:	bd90      	pop	{r4, r7, pc}

080017d8 <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOE
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 80017e0:	4b07      	ldr	r3, [pc, #28]	@ (8001800 <LL_IOP_GRP1_EnableClock+0x28>)
 80017e2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80017e4:	4b06      	ldr	r3, [pc, #24]	@ (8001800 <LL_IOP_GRP1_EnableClock+0x28>)
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	430a      	orrs	r2, r1
 80017ea:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 80017ec:	4b04      	ldr	r3, [pc, #16]	@ (8001800 <LL_IOP_GRP1_EnableClock+0x28>)
 80017ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	4013      	ands	r3, r2
 80017f4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80017f6:	68fb      	ldr	r3, [r7, #12]
}
 80017f8:	46c0      	nop			@ (mov r8, r8)
 80017fa:	46bd      	mov	sp, r7
 80017fc:	b004      	add	sp, #16
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	40021000 	.word	0x40021000

08001804 <LL_GPIO_SetOutputPin>:
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	683a      	ldr	r2, [r7, #0]
 8001812:	619a      	str	r2, [r3, #24]
}
 8001814:	46c0      	nop			@ (mov r8, r8)
 8001816:	46bd      	mov	sp, r7
 8001818:	b002      	add	sp, #8
 800181a:	bd80      	pop	{r7, pc}

0800181c <LL_GPIO_ResetOutputPin>:
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	683a      	ldr	r2, [r7, #0]
 800182a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800182c:	46c0      	nop			@ (mov r8, r8)
 800182e:	46bd      	mov	sp, r7
 8001830:	b002      	add	sp, #8
 8001832:	bd80      	pop	{r7, pc}

08001834 <pin_init>:
do {                                          \
	RELAY##n##_ON();\
} while(0);


void pin_init() {
 8001834:	b580      	push	{r7, lr}
 8001836:	b086      	sub	sp, #24
 8001838:	af00      	add	r7, sp, #0

	LL_GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800183a:	003b      	movs	r3, r7
 800183c:	0018      	movs	r0, r3
 800183e:	2318      	movs	r3, #24
 8001840:	001a      	movs	r2, r3
 8001842:	2100      	movs	r1, #0
 8001844:	f002 ff08 	bl	8004658 <memset>

	LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8001848:	2001      	movs	r0, #1
 800184a:	f7ff ffc5 	bl	80017d8 <LL_IOP_GRP1_EnableClock>
	LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 800184e:	2002      	movs	r0, #2
 8001850:	f7ff ffc2 	bl	80017d8 <LL_IOP_GRP1_EnableClock>
	LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 8001854:	2004      	movs	r0, #4
 8001856:	f7ff ffbf 	bl	80017d8 <LL_IOP_GRP1_EnableClock>
	LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOD);
 800185a:	2008      	movs	r0, #8
 800185c:	f7ff ffbc 	bl	80017d8 <LL_IOP_GRP1_EnableClock>
	LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOF);
 8001860:	2020      	movs	r0, #32
 8001862:	f7ff ffb9 	bl	80017d8 <LL_IOP_GRP1_EnableClock>
		INIT_RELAY(i);
	}
#else

#ifdef RELAY1_pin
    GPIO_InitStruct.Pin = RELAY1_pin;
 8001866:	003b      	movs	r3, r7
 8001868:	2280      	movs	r2, #128	@ 0x80
 800186a:	0212      	lsls	r2, r2, #8
 800186c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800186e:	003b      	movs	r3, r7
 8001870:	2201      	movs	r2, #1
 8001872:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001874:	003b      	movs	r3, r7
 8001876:	2200      	movs	r2, #0
 8001878:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800187a:	003b      	movs	r3, r7
 800187c:	2200      	movs	r2, #0
 800187e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001880:	003b      	movs	r3, r7
 8001882:	2200      	movs	r2, #0
 8001884:	611a      	str	r2, [r3, #16]
    LL_GPIO_Init(RELAY1_GPIO_port, &GPIO_InitStruct);
 8001886:	003a      	movs	r2, r7
 8001888:	23a0      	movs	r3, #160	@ 0xa0
 800188a:	05db      	lsls	r3, r3, #23
 800188c:	0011      	movs	r1, r2
 800188e:	0018      	movs	r0, r3
 8001890:	f7fe fd8d 	bl	80003ae <LL_GPIO_Init>
#endif

#ifdef RELAY2_pin
    GPIO_InitStruct.Pin = RELAY2_pin;
 8001894:	003b      	movs	r3, r7
 8001896:	2240      	movs	r2, #64	@ 0x40
 8001898:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800189a:	003b      	movs	r3, r7
 800189c:	2201      	movs	r2, #1
 800189e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80018a0:	003b      	movs	r3, r7
 80018a2:	2200      	movs	r2, #0
 80018a4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80018a6:	003b      	movs	r3, r7
 80018a8:	2200      	movs	r2, #0
 80018aa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80018ac:	003b      	movs	r3, r7
 80018ae:	2200      	movs	r2, #0
 80018b0:	611a      	str	r2, [r3, #16]
    LL_GPIO_Init(RELAY2_GPIO_port, &GPIO_InitStruct);
 80018b2:	003b      	movs	r3, r7
 80018b4:	4aec      	ldr	r2, [pc, #944]	@ (8001c68 <pin_init+0x434>)
 80018b6:	0019      	movs	r1, r3
 80018b8:	0010      	movs	r0, r2
 80018ba:	f7fe fd78 	bl	80003ae <LL_GPIO_Init>
#endif

#ifdef RELAY3_pin
    GPIO_InitStruct.Pin = RELAY3_pin;
 80018be:	003b      	movs	r3, r7
 80018c0:	2208      	movs	r2, #8
 80018c2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80018c4:	003b      	movs	r3, r7
 80018c6:	2201      	movs	r2, #1
 80018c8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80018ca:	003b      	movs	r3, r7
 80018cc:	2200      	movs	r2, #0
 80018ce:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80018d0:	003b      	movs	r3, r7
 80018d2:	2200      	movs	r2, #0
 80018d4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80018d6:	003b      	movs	r3, r7
 80018d8:	2200      	movs	r2, #0
 80018da:	611a      	str	r2, [r3, #16]
    LL_GPIO_Init(RELAY3_GPIO_port, &GPIO_InitStruct);
 80018dc:	003b      	movs	r3, r7
 80018de:	4ae3      	ldr	r2, [pc, #908]	@ (8001c6c <pin_init+0x438>)
 80018e0:	0019      	movs	r1, r3
 80018e2:	0010      	movs	r0, r2
 80018e4:	f7fe fd63 	bl	80003ae <LL_GPIO_Init>
#endif

#ifdef RELAY4_pin
    GPIO_InitStruct.Pin = RELAY4_pin;
 80018e8:	003b      	movs	r3, r7
 80018ea:	2210      	movs	r2, #16
 80018ec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80018ee:	003b      	movs	r3, r7
 80018f0:	2201      	movs	r2, #1
 80018f2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80018f4:	003b      	movs	r3, r7
 80018f6:	2200      	movs	r2, #0
 80018f8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80018fa:	003b      	movs	r3, r7
 80018fc:	2200      	movs	r2, #0
 80018fe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001900:	003b      	movs	r3, r7
 8001902:	2200      	movs	r2, #0
 8001904:	611a      	str	r2, [r3, #16]
    LL_GPIO_Init(RELAY4_GPIO_port, &GPIO_InitStruct);
 8001906:	003b      	movs	r3, r7
 8001908:	4ad8      	ldr	r2, [pc, #864]	@ (8001c6c <pin_init+0x438>)
 800190a:	0019      	movs	r1, r3
 800190c:	0010      	movs	r0, r2
 800190e:	f7fe fd4e 	bl	80003ae <LL_GPIO_Init>
#endif

#ifdef RELAY5_pin
    GPIO_InitStruct.Pin = RELAY5_pin;
 8001912:	003b      	movs	r3, r7
 8001914:	2220      	movs	r2, #32
 8001916:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001918:	003b      	movs	r3, r7
 800191a:	2201      	movs	r2, #1
 800191c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800191e:	003b      	movs	r3, r7
 8001920:	2200      	movs	r2, #0
 8001922:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001924:	003b      	movs	r3, r7
 8001926:	2200      	movs	r2, #0
 8001928:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800192a:	003b      	movs	r3, r7
 800192c:	2200      	movs	r2, #0
 800192e:	611a      	str	r2, [r3, #16]
    LL_GPIO_Init(RELAY5_GPIO_port, &GPIO_InitStruct);
 8001930:	003b      	movs	r3, r7
 8001932:	4ace      	ldr	r2, [pc, #824]	@ (8001c6c <pin_init+0x438>)
 8001934:	0019      	movs	r1, r3
 8001936:	0010      	movs	r0, r2
 8001938:	f7fe fd39 	bl	80003ae <LL_GPIO_Init>
#endif

#ifdef RELAY6_pin
    GPIO_InitStruct.Pin = RELAY6_pin;
 800193c:	003b      	movs	r3, r7
 800193e:	2280      	movs	r2, #128	@ 0x80
 8001940:	0052      	lsls	r2, r2, #1
 8001942:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001944:	003b      	movs	r3, r7
 8001946:	2201      	movs	r2, #1
 8001948:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800194a:	003b      	movs	r3, r7
 800194c:	2200      	movs	r2, #0
 800194e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001950:	003b      	movs	r3, r7
 8001952:	2200      	movs	r2, #0
 8001954:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001956:	003b      	movs	r3, r7
 8001958:	2200      	movs	r2, #0
 800195a:	611a      	str	r2, [r3, #16]
    LL_GPIO_Init(RELAY6_GPIO_port, &GPIO_InitStruct);
 800195c:	003b      	movs	r3, r7
 800195e:	4ac3      	ldr	r2, [pc, #780]	@ (8001c6c <pin_init+0x438>)
 8001960:	0019      	movs	r1, r3
 8001962:	0010      	movs	r0, r2
 8001964:	f7fe fd23 	bl	80003ae <LL_GPIO_Init>
#endif

#ifdef RELAY7_pin
    GPIO_InitStruct.Pin = RELAY7_pin;
 8001968:	003b      	movs	r3, r7
 800196a:	2280      	movs	r2, #128	@ 0x80
 800196c:	0092      	lsls	r2, r2, #2
 800196e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001970:	003b      	movs	r3, r7
 8001972:	2201      	movs	r2, #1
 8001974:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001976:	003b      	movs	r3, r7
 8001978:	2200      	movs	r2, #0
 800197a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800197c:	003b      	movs	r3, r7
 800197e:	2200      	movs	r2, #0
 8001980:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001982:	003b      	movs	r3, r7
 8001984:	2200      	movs	r2, #0
 8001986:	611a      	str	r2, [r3, #16]
    LL_GPIO_Init(RELAY7_GPIO_port, &GPIO_InitStruct);
 8001988:	003b      	movs	r3, r7
 800198a:	4ab8      	ldr	r2, [pc, #736]	@ (8001c6c <pin_init+0x438>)
 800198c:	0019      	movs	r1, r3
 800198e:	0010      	movs	r0, r2
 8001990:	f7fe fd0d 	bl	80003ae <LL_GPIO_Init>
#endif

#ifdef RELAY8_pin
    GPIO_InitStruct.Pin = RELAY8_pin;
 8001994:	003b      	movs	r3, r7
 8001996:	2280      	movs	r2, #128	@ 0x80
 8001998:	00d2      	lsls	r2, r2, #3
 800199a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800199c:	003b      	movs	r3, r7
 800199e:	2201      	movs	r2, #1
 80019a0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80019a2:	003b      	movs	r3, r7
 80019a4:	2200      	movs	r2, #0
 80019a6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80019a8:	003b      	movs	r3, r7
 80019aa:	2200      	movs	r2, #0
 80019ac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80019ae:	003b      	movs	r3, r7
 80019b0:	2200      	movs	r2, #0
 80019b2:	611a      	str	r2, [r3, #16]
    LL_GPIO_Init(RELAY8_GPIO_port, &GPIO_InitStruct);
 80019b4:	003b      	movs	r3, r7
 80019b6:	4aae      	ldr	r2, [pc, #696]	@ (8001c70 <pin_init+0x43c>)
 80019b8:	0019      	movs	r1, r3
 80019ba:	0010      	movs	r0, r2
 80019bc:	f7fe fcf7 	bl	80003ae <LL_GPIO_Init>
#endif

#ifdef RELAY9_pin
    GPIO_InitStruct.Pin = RELAY9_pin;
 80019c0:	003b      	movs	r3, r7
 80019c2:	2220      	movs	r2, #32
 80019c4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80019c6:	003b      	movs	r3, r7
 80019c8:	2201      	movs	r2, #1
 80019ca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80019cc:	003b      	movs	r3, r7
 80019ce:	2200      	movs	r2, #0
 80019d0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80019d2:	003b      	movs	r3, r7
 80019d4:	2200      	movs	r2, #0
 80019d6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80019d8:	003b      	movs	r3, r7
 80019da:	2200      	movs	r2, #0
 80019dc:	611a      	str	r2, [r3, #16]
    LL_GPIO_Init(RELAY9_GPIO_port, &GPIO_InitStruct);
 80019de:	003b      	movs	r3, r7
 80019e0:	4aa1      	ldr	r2, [pc, #644]	@ (8001c68 <pin_init+0x434>)
 80019e2:	0019      	movs	r1, r3
 80019e4:	0010      	movs	r0, r2
 80019e6:	f7fe fce2 	bl	80003ae <LL_GPIO_Init>
#endif

#ifdef RELAY10_pin
    GPIO_InitStruct.Pin = RELAY10_pin;
 80019ea:	003b      	movs	r3, r7
 80019ec:	2210      	movs	r2, #16
 80019ee:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80019f0:	003b      	movs	r3, r7
 80019f2:	2201      	movs	r2, #1
 80019f4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80019f6:	003b      	movs	r3, r7
 80019f8:	2200      	movs	r2, #0
 80019fa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80019fc:	003b      	movs	r3, r7
 80019fe:	2200      	movs	r2, #0
 8001a00:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001a02:	003b      	movs	r3, r7
 8001a04:	2200      	movs	r2, #0
 8001a06:	611a      	str	r2, [r3, #16]
    LL_GPIO_Init(RELAY10_GPIO_port, &GPIO_InitStruct);
 8001a08:	003b      	movs	r3, r7
 8001a0a:	4a97      	ldr	r2, [pc, #604]	@ (8001c68 <pin_init+0x434>)
 8001a0c:	0019      	movs	r1, r3
 8001a0e:	0010      	movs	r0, r2
 8001a10:	f7fe fccd 	bl	80003ae <LL_GPIO_Init>
#endif

#ifdef RELAY11_pin
    GPIO_InitStruct.Pin = RELAY11_pin;
 8001a14:	003b      	movs	r3, r7
 8001a16:	2208      	movs	r2, #8
 8001a18:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001a1a:	003b      	movs	r3, r7
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001a20:	003b      	movs	r3, r7
 8001a22:	2200      	movs	r2, #0
 8001a24:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001a26:	003b      	movs	r3, r7
 8001a28:	2200      	movs	r2, #0
 8001a2a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001a2c:	003b      	movs	r3, r7
 8001a2e:	2200      	movs	r2, #0
 8001a30:	611a      	str	r2, [r3, #16]
    LL_GPIO_Init(RELAY11_GPIO_port, &GPIO_InitStruct);
 8001a32:	003b      	movs	r3, r7
 8001a34:	4a8c      	ldr	r2, [pc, #560]	@ (8001c68 <pin_init+0x434>)
 8001a36:	0019      	movs	r1, r3
 8001a38:	0010      	movs	r0, r2
 8001a3a:	f7fe fcb8 	bl	80003ae <LL_GPIO_Init>
#endif

#ifdef RELAY12_pin
    GPIO_InitStruct.Pin = RELAY12_pin;
 8001a3e:	003b      	movs	r3, r7
 8001a40:	2204      	movs	r2, #4
 8001a42:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001a44:	003b      	movs	r3, r7
 8001a46:	2201      	movs	r2, #1
 8001a48:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001a4a:	003b      	movs	r3, r7
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001a50:	003b      	movs	r3, r7
 8001a52:	2200      	movs	r2, #0
 8001a54:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001a56:	003b      	movs	r3, r7
 8001a58:	2200      	movs	r2, #0
 8001a5a:	611a      	str	r2, [r3, #16]
    LL_GPIO_Init(RELAY12_GPIO_port, &GPIO_InitStruct);
 8001a5c:	003b      	movs	r3, r7
 8001a5e:	4a82      	ldr	r2, [pc, #520]	@ (8001c68 <pin_init+0x434>)
 8001a60:	0019      	movs	r1, r3
 8001a62:	0010      	movs	r0, r2
 8001a64:	f7fe fca3 	bl	80003ae <LL_GPIO_Init>
#endif

#ifdef RELAY13_pin
    GPIO_InitStruct.Pin = RELAY13_pin;
 8001a68:	003b      	movs	r3, r7
 8001a6a:	2202      	movs	r2, #2
 8001a6c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001a6e:	003b      	movs	r3, r7
 8001a70:	2201      	movs	r2, #1
 8001a72:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001a74:	003b      	movs	r3, r7
 8001a76:	2200      	movs	r2, #0
 8001a78:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001a7a:	003b      	movs	r3, r7
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001a80:	003b      	movs	r3, r7
 8001a82:	2200      	movs	r2, #0
 8001a84:	611a      	str	r2, [r3, #16]
    LL_GPIO_Init(RELAY13_GPIO_port, &GPIO_InitStruct);
 8001a86:	003b      	movs	r3, r7
 8001a88:	4a77      	ldr	r2, [pc, #476]	@ (8001c68 <pin_init+0x434>)
 8001a8a:	0019      	movs	r1, r3
 8001a8c:	0010      	movs	r0, r2
 8001a8e:	f7fe fc8e 	bl	80003ae <LL_GPIO_Init>
#endif

#ifdef RELAY14_pin
    GPIO_InitStruct.Pin = RELAY14_pin;
 8001a92:	003b      	movs	r3, r7
 8001a94:	2201      	movs	r2, #1
 8001a96:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001a98:	003b      	movs	r3, r7
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001a9e:	003b      	movs	r3, r7
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001aa4:	003b      	movs	r3, r7
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001aaa:	003b      	movs	r3, r7
 8001aac:	2200      	movs	r2, #0
 8001aae:	611a      	str	r2, [r3, #16]
    LL_GPIO_Init(RELAY14_GPIO_port, &GPIO_InitStruct);
 8001ab0:	003b      	movs	r3, r7
 8001ab2:	4a6d      	ldr	r2, [pc, #436]	@ (8001c68 <pin_init+0x434>)
 8001ab4:	0019      	movs	r1, r3
 8001ab6:	0010      	movs	r0, r2
 8001ab8:	f7fe fc79 	bl	80003ae <LL_GPIO_Init>
#endif

#ifdef RELAY15_pin
    GPIO_InitStruct.Pin = RELAY15_pin;
 8001abc:	003b      	movs	r3, r7
 8001abe:	2280      	movs	r2, #128	@ 0x80
 8001ac0:	0092      	lsls	r2, r2, #2
 8001ac2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001ac4:	003b      	movs	r3, r7
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001aca:	003b      	movs	r3, r7
 8001acc:	2200      	movs	r2, #0
 8001ace:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001ad0:	003b      	movs	r3, r7
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001ad6:	003b      	movs	r3, r7
 8001ad8:	2200      	movs	r2, #0
 8001ada:	611a      	str	r2, [r3, #16]
    LL_GPIO_Init(RELAY15_GPIO_port, &GPIO_InitStruct);
 8001adc:	003b      	movs	r3, r7
 8001ade:	4a64      	ldr	r2, [pc, #400]	@ (8001c70 <pin_init+0x43c>)
 8001ae0:	0019      	movs	r1, r3
 8001ae2:	0010      	movs	r0, r2
 8001ae4:	f7fe fc63 	bl	80003ae <LL_GPIO_Init>
#endif

#ifdef W5500_SPI_CS_pin
    GPIO_InitStruct.Pin = W5500_SPI_CS_pin;
 8001ae8:	003b      	movs	r3, r7
 8001aea:	2210      	movs	r2, #16
 8001aec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001aee:	003b      	movs	r3, r7
 8001af0:	2201      	movs	r2, #1
 8001af2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001af4:	003b      	movs	r3, r7
 8001af6:	2200      	movs	r2, #0
 8001af8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001afa:	003b      	movs	r3, r7
 8001afc:	2200      	movs	r2, #0
 8001afe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001b00:	003b      	movs	r3, r7
 8001b02:	2200      	movs	r2, #0
 8001b04:	611a      	str	r2, [r3, #16]
    LL_GPIO_Init(W5500_SPI_CS_GPIO_port, &GPIO_InitStruct);
 8001b06:	003a      	movs	r2, r7
 8001b08:	23a0      	movs	r3, #160	@ 0xa0
 8001b0a:	05db      	lsls	r3, r3, #23
 8001b0c:	0011      	movs	r1, r2
 8001b0e:	0018      	movs	r0, r3
 8001b10:	f7fe fc4d 	bl	80003ae <LL_GPIO_Init>
#endif

#ifdef W5500_RESET_pin
    GPIO_InitStruct.Pin = W5500_RESET_pin;
 8001b14:	003b      	movs	r3, r7
 8001b16:	2204      	movs	r2, #4
 8001b18:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001b1a:	003b      	movs	r3, r7
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001b20:	003b      	movs	r3, r7
 8001b22:	2200      	movs	r2, #0
 8001b24:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001b26:	003b      	movs	r3, r7
 8001b28:	2200      	movs	r2, #0
 8001b2a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001b2c:	003b      	movs	r3, r7
 8001b2e:	2200      	movs	r2, #0
 8001b30:	611a      	str	r2, [r3, #16]
    LL_GPIO_Init(W5500_RESET_GPIO_port, &GPIO_InitStruct);
 8001b32:	003a      	movs	r2, r7
 8001b34:	23a0      	movs	r3, #160	@ 0xa0
 8001b36:	05db      	lsls	r3, r3, #23
 8001b38:	0011      	movs	r1, r2
 8001b3a:	0018      	movs	r0, r3
 8001b3c:	f7fe fc37 	bl	80003ae <LL_GPIO_Init>
#endif

#endif
#ifdef LED_MCU_pin
	GPIO_InitStruct.Pin = LED_MCU_pin;
 8001b40:	003b      	movs	r3, r7
 8001b42:	2210      	movs	r2, #16
 8001b44:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001b46:	003b      	movs	r3, r7
 8001b48:	2201      	movs	r2, #1
 8001b4a:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001b4c:	003b      	movs	r3, r7
 8001b4e:	2200      	movs	r2, #0
 8001b50:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001b52:	003b      	movs	r3, r7
 8001b54:	2200      	movs	r2, #0
 8001b56:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001b58:	003b      	movs	r3, r7
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	611a      	str	r2, [r3, #16]
	LL_GPIO_Init(LED_MCU_GPIO_port, &GPIO_InitStruct);
 8001b5e:	003a      	movs	r2, r7
 8001b60:	23a0      	movs	r3, #160	@ 0xa0
 8001b62:	05db      	lsls	r3, r3, #23
 8001b64:	0011      	movs	r1, r2
 8001b66:	0018      	movs	r0, r3
 8001b68:	f7fe fc21 	bl	80003ae <LL_GPIO_Init>
#endif

#ifdef RS485_DIR_pin
	GPIO_InitStruct.Pin = RS485_DIR_pin;
 8001b6c:	003b      	movs	r3, r7
 8001b6e:	2280      	movs	r2, #128	@ 0x80
 8001b70:	0092      	lsls	r2, r2, #2
 8001b72:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001b74:	003b      	movs	r3, r7
 8001b76:	2201      	movs	r2, #1
 8001b78:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001b7a:	003b      	movs	r3, r7
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001b80:	003b      	movs	r3, r7
 8001b82:	2200      	movs	r2, #0
 8001b84:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001b86:	003b      	movs	r3, r7
 8001b88:	2200      	movs	r2, #0
 8001b8a:	611a      	str	r2, [r3, #16]
	LL_GPIO_Init(RS485_DIR_GPIO_port, &GPIO_InitStruct);
 8001b8c:	003b      	movs	r3, r7
 8001b8e:	4a36      	ldr	r2, [pc, #216]	@ (8001c68 <pin_init+0x434>)
 8001b90:	0019      	movs	r1, r3
 8001b92:	0010      	movs	r0, r2
 8001b94:	f7fe fc0b 	bl	80003ae <LL_GPIO_Init>
#endif
	RS485_RE();
 8001b98:	2380      	movs	r3, #128	@ 0x80
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	4a32      	ldr	r2, [pc, #200]	@ (8001c68 <pin_init+0x434>)
 8001b9e:	0019      	movs	r1, r3
 8001ba0:	0010      	movs	r0, r2
 8001ba2:	f7ff fe3b 	bl	800181c <LL_GPIO_ResetOutputPin>
	RELAY12_ON();
	RELAY13_ON();
	RELAY14_ON();
	RELAY15_ON();
#else
	RELAY1_OFF();
 8001ba6:	2380      	movs	r3, #128	@ 0x80
 8001ba8:	021a      	lsls	r2, r3, #8
 8001baa:	23a0      	movs	r3, #160	@ 0xa0
 8001bac:	05db      	lsls	r3, r3, #23
 8001bae:	0011      	movs	r1, r2
 8001bb0:	0018      	movs	r0, r3
 8001bb2:	f7ff fe27 	bl	8001804 <LL_GPIO_SetOutputPin>
	RELAY2_OFF();
 8001bb6:	4b2c      	ldr	r3, [pc, #176]	@ (8001c68 <pin_init+0x434>)
 8001bb8:	2140      	movs	r1, #64	@ 0x40
 8001bba:	0018      	movs	r0, r3
 8001bbc:	f7ff fe22 	bl	8001804 <LL_GPIO_SetOutputPin>
	RELAY3_OFF();
 8001bc0:	4b2a      	ldr	r3, [pc, #168]	@ (8001c6c <pin_init+0x438>)
 8001bc2:	2108      	movs	r1, #8
 8001bc4:	0018      	movs	r0, r3
 8001bc6:	f7ff fe1d 	bl	8001804 <LL_GPIO_SetOutputPin>
	RELAY4_OFF();
 8001bca:	4b28      	ldr	r3, [pc, #160]	@ (8001c6c <pin_init+0x438>)
 8001bcc:	2110      	movs	r1, #16
 8001bce:	0018      	movs	r0, r3
 8001bd0:	f7ff fe18 	bl	8001804 <LL_GPIO_SetOutputPin>
	RELAY5_OFF();
 8001bd4:	4b25      	ldr	r3, [pc, #148]	@ (8001c6c <pin_init+0x438>)
 8001bd6:	2120      	movs	r1, #32
 8001bd8:	0018      	movs	r0, r3
 8001bda:	f7ff fe13 	bl	8001804 <LL_GPIO_SetOutputPin>
	RELAY6_OFF();
 8001bde:	2380      	movs	r3, #128	@ 0x80
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	4a22      	ldr	r2, [pc, #136]	@ (8001c6c <pin_init+0x438>)
 8001be4:	0019      	movs	r1, r3
 8001be6:	0010      	movs	r0, r2
 8001be8:	f7ff fe0c 	bl	8001804 <LL_GPIO_SetOutputPin>
	RELAY7_OFF();
 8001bec:	2380      	movs	r3, #128	@ 0x80
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	4a1e      	ldr	r2, [pc, #120]	@ (8001c6c <pin_init+0x438>)
 8001bf2:	0019      	movs	r1, r3
 8001bf4:	0010      	movs	r0, r2
 8001bf6:	f7ff fe05 	bl	8001804 <LL_GPIO_SetOutputPin>
	RELAY8_OFF();
 8001bfa:	2380      	movs	r3, #128	@ 0x80
 8001bfc:	00db      	lsls	r3, r3, #3
 8001bfe:	4a1c      	ldr	r2, [pc, #112]	@ (8001c70 <pin_init+0x43c>)
 8001c00:	0019      	movs	r1, r3
 8001c02:	0010      	movs	r0, r2
 8001c04:	f7ff fdfe 	bl	8001804 <LL_GPIO_SetOutputPin>
	RELAY9_OFF();
 8001c08:	4b17      	ldr	r3, [pc, #92]	@ (8001c68 <pin_init+0x434>)
 8001c0a:	2120      	movs	r1, #32
 8001c0c:	0018      	movs	r0, r3
 8001c0e:	f7ff fdf9 	bl	8001804 <LL_GPIO_SetOutputPin>
	RELAY10_OFF();
 8001c12:	4b15      	ldr	r3, [pc, #84]	@ (8001c68 <pin_init+0x434>)
 8001c14:	2110      	movs	r1, #16
 8001c16:	0018      	movs	r0, r3
 8001c18:	f7ff fdf4 	bl	8001804 <LL_GPIO_SetOutputPin>
	RELAY11_OFF();
 8001c1c:	4b12      	ldr	r3, [pc, #72]	@ (8001c68 <pin_init+0x434>)
 8001c1e:	2108      	movs	r1, #8
 8001c20:	0018      	movs	r0, r3
 8001c22:	f7ff fdef 	bl	8001804 <LL_GPIO_SetOutputPin>
	RELAY12_OFF();
 8001c26:	4b10      	ldr	r3, [pc, #64]	@ (8001c68 <pin_init+0x434>)
 8001c28:	2104      	movs	r1, #4
 8001c2a:	0018      	movs	r0, r3
 8001c2c:	f7ff fdea 	bl	8001804 <LL_GPIO_SetOutputPin>
	RELAY13_OFF();
 8001c30:	4b0d      	ldr	r3, [pc, #52]	@ (8001c68 <pin_init+0x434>)
 8001c32:	2102      	movs	r1, #2
 8001c34:	0018      	movs	r0, r3
 8001c36:	f7ff fde5 	bl	8001804 <LL_GPIO_SetOutputPin>
	RELAY14_OFF();
 8001c3a:	4b0b      	ldr	r3, [pc, #44]	@ (8001c68 <pin_init+0x434>)
 8001c3c:	2101      	movs	r1, #1
 8001c3e:	0018      	movs	r0, r3
 8001c40:	f7ff fde0 	bl	8001804 <LL_GPIO_SetOutputPin>
	RELAY15_OFF();
 8001c44:	2380      	movs	r3, #128	@ 0x80
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	4a09      	ldr	r2, [pc, #36]	@ (8001c70 <pin_init+0x43c>)
 8001c4a:	0019      	movs	r1, r3
 8001c4c:	0010      	movs	r0, r2
 8001c4e:	f7ff fdd9 	bl	8001804 <LL_GPIO_SetOutputPin>
#endif
	W5500_RESET_OFF();
 8001c52:	23a0      	movs	r3, #160	@ 0xa0
 8001c54:	05db      	lsls	r3, r3, #23
 8001c56:	2104      	movs	r1, #4
 8001c58:	0018      	movs	r0, r3
 8001c5a:	f7ff fddf 	bl	800181c <LL_GPIO_ResetOutputPin>
}
 8001c5e:	46c0      	nop			@ (mov r8, r8)
 8001c60:	46bd      	mov	sp, r7
 8001c62:	b006      	add	sp, #24
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	46c0      	nop			@ (mov r8, r8)
 8001c68:	50000c00 	.word	0x50000c00
 8001c6c:	50000400 	.word	0x50000400
 8001c70:	50000800 	.word	0x50000800

08001c74 <LL_RCC_SetI2CClockSource>:
  *         @arg @ref LL_RCC_I2C2_CLKSOURCE_HSI (*)
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (I2CxSource >> 16U), (I2CxSource & 0x0000FFFFU));
 8001c7c:	4b08      	ldr	r3, [pc, #32]	@ (8001ca0 <LL_RCC_SetI2CClockSource+0x2c>)
 8001c7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c80:	687a      	ldr	r2, [r7, #4]
 8001c82:	0c12      	lsrs	r2, r2, #16
 8001c84:	43d2      	mvns	r2, r2
 8001c86:	401a      	ands	r2, r3
 8001c88:	0011      	movs	r1, r2
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	041b      	lsls	r3, r3, #16
 8001c8e:	0c1a      	lsrs	r2, r3, #16
 8001c90:	4b03      	ldr	r3, [pc, #12]	@ (8001ca0 <LL_RCC_SetI2CClockSource+0x2c>)
 8001c92:	430a      	orrs	r2, r1
 8001c94:	655a      	str	r2, [r3, #84]	@ 0x54
}
 8001c96:	46c0      	nop			@ (mov r8, r8)
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	b002      	add	sp, #8
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	46c0      	nop			@ (mov r8, r8)
 8001ca0:	40021000 	.word	0x40021000

08001ca4 <LL_APB1_GRP1_EnableClock>:
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR1, Periphs);
 8001cac:	4b07      	ldr	r3, [pc, #28]	@ (8001ccc <LL_APB1_GRP1_EnableClock+0x28>)
 8001cae:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8001cb0:	4b06      	ldr	r3, [pc, #24]	@ (8001ccc <LL_APB1_GRP1_EnableClock+0x28>)
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	63da      	str	r2, [r3, #60]	@ 0x3c
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 8001cb8:	4b04      	ldr	r3, [pc, #16]	@ (8001ccc <LL_APB1_GRP1_EnableClock+0x28>)
 8001cba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
}
 8001cc4:	46c0      	nop			@ (mov r8, r8)
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	b004      	add	sp, #16
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	40021000 	.word	0x40021000

08001cd0 <LL_IOP_GRP1_EnableClock>:
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 8001cd8:	4b07      	ldr	r3, [pc, #28]	@ (8001cf8 <LL_IOP_GRP1_EnableClock+0x28>)
 8001cda:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001cdc:	4b06      	ldr	r3, [pc, #24]	@ (8001cf8 <LL_IOP_GRP1_EnableClock+0x28>)
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	430a      	orrs	r2, r1
 8001ce2:	635a      	str	r2, [r3, #52]	@ 0x34
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8001ce4:	4b04      	ldr	r3, [pc, #16]	@ (8001cf8 <LL_IOP_GRP1_EnableClock+0x28>)
 8001ce6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	4013      	ands	r3, r2
 8001cec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001cee:	68fb      	ldr	r3, [r7, #12]
}
 8001cf0:	46c0      	nop			@ (mov r8, r8)
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	b004      	add	sp, #16
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	40021000 	.word	0x40021000

08001cfc <LL_I2C_EnableClockStretching>:
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a03      	ldr	r2, [pc, #12]	@ (8001d18 <LL_I2C_EnableClockStretching+0x1c>)
 8001d0a:	401a      	ands	r2, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	601a      	str	r2, [r3, #0]
}
 8001d10:	46c0      	nop			@ (mov r8, r8)
 8001d12:	46bd      	mov	sp, r7
 8001d14:	b002      	add	sp, #8
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	fffdffff 	.word	0xfffdffff

08001d1c <LL_I2C_DisableGeneralCall>:
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a03      	ldr	r2, [pc, #12]	@ (8001d38 <LL_I2C_DisableGeneralCall+0x1c>)
 8001d2a:	401a      	ands	r2, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	601a      	str	r2, [r3, #0]
}
 8001d30:	46c0      	nop			@ (mov r8, r8)
 8001d32:	46bd      	mov	sp, r7
 8001d34:	b002      	add	sp, #8
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	fff7ffff 	.word	0xfff7ffff

08001d3c <LL_I2C_SetOwnAddress2>:
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	60b9      	str	r1, [r7, #8]
 8001d46:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	4a05      	ldr	r2, [pc, #20]	@ (8001d64 <LL_I2C_SetOwnAddress2+0x28>)
 8001d4e:	401a      	ands	r2, r3
 8001d50:	68b9      	ldr	r1, [r7, #8]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	430b      	orrs	r3, r1
 8001d56:	431a      	orrs	r2, r3
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	60da      	str	r2, [r3, #12]
}
 8001d5c:	46c0      	nop			@ (mov r8, r8)
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	b004      	add	sp, #16
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	fffff801 	.word	0xfffff801

08001d68 <LL_I2C_DisableOwnAddress2>:
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	4a03      	ldr	r2, [pc, #12]	@ (8001d84 <LL_I2C_DisableOwnAddress2+0x1c>)
 8001d76:	401a      	ands	r2, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	60da      	str	r2, [r3, #12]
}
 8001d7c:	46c0      	nop			@ (mov r8, r8)
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	b002      	add	sp, #8
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	ffff7fff 	.word	0xffff7fff

08001d88 <LL_I2C_IsActiveFlag_TXIS>:
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	2202      	movs	r2, #2
 8001d96:	4013      	ands	r3, r2
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d101      	bne.n	8001da0 <LL_I2C_IsActiveFlag_TXIS+0x18>
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e000      	b.n	8001da2 <LL_I2C_IsActiveFlag_TXIS+0x1a>
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	0018      	movs	r0, r3
 8001da4:	46bd      	mov	sp, r7
 8001da6:	b002      	add	sp, #8
 8001da8:	bd80      	pop	{r7, pc}

08001daa <LL_I2C_IsActiveFlag_STOP>:
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b082      	sub	sp, #8
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	699b      	ldr	r3, [r3, #24]
 8001db6:	2220      	movs	r2, #32
 8001db8:	4013      	ands	r3, r2
 8001dba:	2b20      	cmp	r3, #32
 8001dbc:	d101      	bne.n	8001dc2 <LL_I2C_IsActiveFlag_STOP+0x18>
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e000      	b.n	8001dc4 <LL_I2C_IsActiveFlag_STOP+0x1a>
 8001dc2:	2300      	movs	r3, #0
}
 8001dc4:	0018      	movs	r0, r3
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	b002      	add	sp, #8
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <LL_I2C_ClearFlag_STOP>:
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	69db      	ldr	r3, [r3, #28]
 8001dd8:	2220      	movs	r2, #32
 8001dda:	431a      	orrs	r2, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	61da      	str	r2, [r3, #28]
}
 8001de0:	46c0      	nop			@ (mov r8, r8)
 8001de2:	46bd      	mov	sp, r7
 8001de4:	b002      	add	sp, #8
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <LL_I2C_EnableAutoEndMode>:
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	2280      	movs	r2, #128	@ 0x80
 8001df6:	0492      	lsls	r2, r2, #18
 8001df8:	431a      	orrs	r2, r3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	605a      	str	r2, [r3, #4]
}
 8001dfe:	46c0      	nop			@ (mov r8, r8)
 8001e00:	46bd      	mov	sp, r7
 8001e02:	b002      	add	sp, #8
 8001e04:	bd80      	pop	{r7, pc}
	...

08001e08 <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	607a      	str	r2, [r7, #4]
 8001e14:	603b      	str	r3, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	69fa      	ldr	r2, [r7, #28]
 8001e1c:	0d51      	lsrs	r1, r2, #21
 8001e1e:	2280      	movs	r2, #128	@ 0x80
 8001e20:	00d2      	lsls	r2, r2, #3
 8001e22:	400a      	ands	r2, r1
 8001e24:	490a      	ldr	r1, [pc, #40]	@ (8001e50 <LL_I2C_HandleTransfer+0x48>)
 8001e26:	430a      	orrs	r2, r1
 8001e28:	43d2      	mvns	r2, r2
 8001e2a:	401a      	ands	r2, r3
 8001e2c:	68b9      	ldr	r1, [r7, #8]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4319      	orrs	r1, r3
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	041b      	lsls	r3, r3, #16
 8001e36:	4319      	orrs	r1, r3
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	4319      	orrs	r1, r3
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	430b      	orrs	r3, r1
 8001e40:	431a      	orrs	r2, r3
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	605a      	str	r2, [r3, #4]
             (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) |
             I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             SlaveAddr | SlaveAddrSize | (TransferSize << I2C_CR2_NBYTES_Pos) | EndMode | Request);
}
 8001e46:	46c0      	nop			@ (mov r8, r8)
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	b004      	add	sp, #16
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	46c0      	nop			@ (mov r8, r8)
 8001e50:	03ff7bff 	.word	0x03ff7bff

08001e54 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	000a      	movs	r2, r1
 8001e5e:	1cfb      	adds	r3, r7, #3
 8001e60:	701a      	strb	r2, [r3, #0]
  WRITE_REG(I2Cx->TXDR, Data);
 8001e62:	1cfb      	adds	r3, r7, #3
 8001e64:	781a      	ldrb	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001e6a:	46c0      	nop			@ (mov r8, r8)
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	b002      	add	sp, #8
 8001e70:	bd80      	pop	{r7, pc}
	...

08001e74 <I2C1_Init>:
#define  I2C1_SCL_GPIO_port			GPIOB
#define  I2C1_SCL_AF				LL_GPIO_AF_6
#define  I2C1_SCL_CLK_en()			LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB)

void I2C1_Init()
{
 8001e74:	b590      	push	{r4, r7, lr}
 8001e76:	b08f      	sub	sp, #60	@ 0x3c
 8001e78:	af00      	add	r7, sp, #0
  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8001e7a:	241c      	movs	r4, #28
 8001e7c:	193b      	adds	r3, r7, r4
 8001e7e:	0018      	movs	r0, r3
 8001e80:	231c      	movs	r3, #28
 8001e82:	001a      	movs	r2, r3
 8001e84:	2100      	movs	r1, #0
 8001e86:	f002 fbe7 	bl	8004658 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e8a:	1d3b      	adds	r3, r7, #4
 8001e8c:	0018      	movs	r0, r3
 8001e8e:	2318      	movs	r3, #24
 8001e90:	001a      	movs	r2, r3
 8001e92:	2100      	movs	r1, #0
 8001e94:	f002 fbe0 	bl	8004658 <memset>
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_PCLK1);
 8001e98:	23c0      	movs	r3, #192	@ 0xc0
 8001e9a:	059b      	lsls	r3, r3, #22
 8001e9c:	0018      	movs	r0, r3
 8001e9e:	f7ff fee9 	bl	8001c74 <LL_RCC_SetI2CClockSource>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8001ea2:	2380      	movs	r3, #128	@ 0x80
 8001ea4:	039b      	lsls	r3, r3, #14
 8001ea6:	0018      	movs	r0, r3
 8001ea8:	f7ff fefc 	bl	8001ca4 <LL_APB1_GRP1_EnableClock>

  I2C1_SDA_CLK_en();
 8001eac:	2002      	movs	r0, #2
 8001eae:	f7ff ff0f 	bl	8001cd0 <LL_IOP_GRP1_EnableClock>
  I2C1_SCL_CLK_en();
 8001eb2:	2002      	movs	r0, #2
 8001eb4:	f7ff ff0c 	bl	8001cd0 <LL_IOP_GRP1_EnableClock>

  GPIO_InitStruct.Pin = I2C1_SDA_pin;
 8001eb8:	1d3b      	adds	r3, r7, #4
 8001eba:	2280      	movs	r2, #128	@ 0x80
 8001ebc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001ebe:	1d3b      	adds	r3, r7, #4
 8001ec0:	2202      	movs	r2, #2
 8001ec2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001ec4:	1d3b      	adds	r3, r7, #4
 8001ec6:	2202      	movs	r2, #2
 8001ec8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001eca:	1d3b      	adds	r3, r7, #4
 8001ecc:	2201      	movs	r2, #1
 8001ece:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001ed0:	1d3b      	adds	r3, r7, #4
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = I2C1_SDA_AF;
 8001ed6:	1d3b      	adds	r3, r7, #4
 8001ed8:	2206      	movs	r2, #6
 8001eda:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(I2C1_SDA_GPIO_port, &GPIO_InitStruct);
 8001edc:	1d3b      	adds	r3, r7, #4
 8001ede:	4a2a      	ldr	r2, [pc, #168]	@ (8001f88 <I2C1_Init+0x114>)
 8001ee0:	0019      	movs	r1, r3
 8001ee2:	0010      	movs	r0, r2
 8001ee4:	f7fe fa63 	bl	80003ae <LL_GPIO_Init>

  GPIO_InitStruct.Pin = I2C1_SCL_pin;
 8001ee8:	1d3b      	adds	r3, r7, #4
 8001eea:	2240      	movs	r2, #64	@ 0x40
 8001eec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001eee:	1d3b      	adds	r3, r7, #4
 8001ef0:	2202      	movs	r2, #2
 8001ef2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001ef4:	1d3b      	adds	r3, r7, #4
 8001ef6:	2202      	movs	r2, #2
 8001ef8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001efa:	1d3b      	adds	r3, r7, #4
 8001efc:	2201      	movs	r2, #1
 8001efe:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001f00:	1d3b      	adds	r3, r7, #4
 8001f02:	2201      	movs	r2, #1
 8001f04:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = I2C1_SCL_AF;
 8001f06:	1d3b      	adds	r3, r7, #4
 8001f08:	2206      	movs	r2, #6
 8001f0a:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(I2C1_SCL_GPIO_port, &GPIO_InitStruct);
 8001f0c:	1d3b      	adds	r3, r7, #4
 8001f0e:	4a1e      	ldr	r2, [pc, #120]	@ (8001f88 <I2C1_Init+0x114>)
 8001f10:	0019      	movs	r1, r3
 8001f12:	0010      	movs	r0, r2
 8001f14:	f7fe fa4b 	bl	80003ae <LL_GPIO_Init>

  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8001f18:	193b      	adds	r3, r7, r4
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	601a      	str	r2, [r3, #0]
  I2C_InitStruct.Timing = 0x00F02B86;//0x00303D5B;
 8001f1e:	193b      	adds	r3, r7, r4
 8001f20:	4a1a      	ldr	r2, [pc, #104]	@ (8001f8c <I2C1_Init+0x118>)
 8001f22:	605a      	str	r2, [r3, #4]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_DISABLE;
 8001f24:	193b      	adds	r3, r7, r4
 8001f26:	2280      	movs	r2, #128	@ 0x80
 8001f28:	0152      	lsls	r2, r2, #5
 8001f2a:	609a      	str	r2, [r3, #8]
  I2C_InitStruct.DigitalFilter = 0;
 8001f2c:	0021      	movs	r1, r4
 8001f2e:	187b      	adds	r3, r7, r1
 8001f30:	2200      	movs	r2, #0
 8001f32:	60da      	str	r2, [r3, #12]
  I2C_InitStruct.OwnAddress1 = 0;
 8001f34:	187b      	adds	r3, r7, r1
 8001f36:	2200      	movs	r2, #0
 8001f38:	611a      	str	r2, [r3, #16]
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8001f3a:	187b      	adds	r3, r7, r1
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	615a      	str	r2, [r3, #20]
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8001f40:	187b      	adds	r3, r7, r1
 8001f42:	2200      	movs	r2, #0
 8001f44:	619a      	str	r2, [r3, #24]
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8001f46:	187b      	adds	r3, r7, r1
 8001f48:	4a11      	ldr	r2, [pc, #68]	@ (8001f90 <I2C1_Init+0x11c>)
 8001f4a:	0019      	movs	r1, r3
 8001f4c:	0010      	movs	r0, r2
 8001f4e:	f7fe fb27 	bl	80005a0 <LL_I2C_Init>
  LL_I2C_EnableAutoEndMode(I2C1);
 8001f52:	4b0f      	ldr	r3, [pc, #60]	@ (8001f90 <I2C1_Init+0x11c>)
 8001f54:	0018      	movs	r0, r3
 8001f56:	f7ff ff47 	bl	8001de8 <LL_I2C_EnableAutoEndMode>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8001f5a:	4b0d      	ldr	r3, [pc, #52]	@ (8001f90 <I2C1_Init+0x11c>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	2100      	movs	r1, #0
 8001f60:	0018      	movs	r0, r3
 8001f62:	f7ff feeb 	bl	8001d3c <LL_I2C_SetOwnAddress2>
  LL_I2C_DisableOwnAddress2(I2C1);
 8001f66:	4b0a      	ldr	r3, [pc, #40]	@ (8001f90 <I2C1_Init+0x11c>)
 8001f68:	0018      	movs	r0, r3
 8001f6a:	f7ff fefd 	bl	8001d68 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8001f6e:	4b08      	ldr	r3, [pc, #32]	@ (8001f90 <I2C1_Init+0x11c>)
 8001f70:	0018      	movs	r0, r3
 8001f72:	f7ff fed3 	bl	8001d1c <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8001f76:	4b06      	ldr	r3, [pc, #24]	@ (8001f90 <I2C1_Init+0x11c>)
 8001f78:	0018      	movs	r0, r3
 8001f7a:	f7ff febf 	bl	8001cfc <LL_I2C_EnableClockStretching>
  LL_I2C_EnableIT_NACK(I2C1);
  LL_I2C_EnableIT_ERR(I2C1);
  LL_I2C_EnableIT_STOP(I2C1);
#endif

}
 8001f7e:	46c0      	nop			@ (mov r8, r8)
 8001f80:	46bd      	mov	sp, r7
 8001f82:	b00f      	add	sp, #60	@ 0x3c
 8001f84:	bd90      	pop	{r4, r7, pc}
 8001f86:	46c0      	nop			@ (mov r8, r8)
 8001f88:	50000400 	.word	0x50000400
 8001f8c:	00f02b86 	.word	0x00f02b86
 8001f90:	40005400 	.word	0x40005400

08001f94 <I2C1_WriteBuf>:
    LL_I2C_ClearFlag_STOP(I2C1);
}

#endif

void I2C1_WriteBuf(uint8_t devAddr, uint8_t *buffer,uint8_t size){
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b086      	sub	sp, #24
 8001f98:	af02      	add	r7, sp, #8
 8001f9a:	6039      	str	r1, [r7, #0]
 8001f9c:	0011      	movs	r1, r2
 8001f9e:	1dfb      	adds	r3, r7, #7
 8001fa0:	1c02      	adds	r2, r0, #0
 8001fa2:	701a      	strb	r2, [r3, #0]
 8001fa4:	1dbb      	adds	r3, r7, #6
 8001fa6:	1c0a      	adds	r2, r1, #0
 8001fa8:	701a      	strb	r2, [r3, #0]
  LL_I2C_HandleTransfer(I2C1, devAddr, LL_I2C_ADDRSLAVE_7BIT, size, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8001faa:	1dfb      	adds	r3, r7, #7
 8001fac:	7819      	ldrb	r1, [r3, #0]
 8001fae:	1dbb      	adds	r3, r7, #6
 8001fb0:	781a      	ldrb	r2, [r3, #0]
 8001fb2:	481c      	ldr	r0, [pc, #112]	@ (8002024 <I2C1_WriteBuf+0x90>)
 8001fb4:	4b1c      	ldr	r3, [pc, #112]	@ (8002028 <I2C1_WriteBuf+0x94>)
 8001fb6:	9301      	str	r3, [sp, #4]
 8001fb8:	2380      	movs	r3, #128	@ 0x80
 8001fba:	049b      	lsls	r3, r3, #18
 8001fbc:	9300      	str	r3, [sp, #0]
 8001fbe:	0013      	movs	r3, r2
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f7ff ff21 	bl	8001e08 <LL_I2C_HandleTransfer>
  int i = size;
 8001fc6:	1dbb      	adds	r3, r7, #6
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	60fb      	str	r3, [r7, #12]
	while (!LL_I2C_IsActiveFlag_STOP(I2C1)&&i) {
 8001fcc:	e011      	b.n	8001ff2 <I2C1_WriteBuf+0x5e>
			if (LL_I2C_IsActiveFlag_TXIS(I2C1)) {
 8001fce:	4b15      	ldr	r3, [pc, #84]	@ (8002024 <I2C1_WriteBuf+0x90>)
 8001fd0:	0018      	movs	r0, r3
 8001fd2:	f7ff fed9 	bl	8001d88 <LL_I2C_IsActiveFlag_TXIS>
 8001fd6:	1e03      	subs	r3, r0, #0
 8001fd8:	d00b      	beq.n	8001ff2 <I2C1_WriteBuf+0x5e>
				LL_I2C_TransmitData8(I2C1, *(buffer++));
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	1c5a      	adds	r2, r3, #1
 8001fde:	603a      	str	r2, [r7, #0]
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	4a10      	ldr	r2, [pc, #64]	@ (8002024 <I2C1_WriteBuf+0x90>)
 8001fe4:	0019      	movs	r1, r3
 8001fe6:	0010      	movs	r0, r2
 8001fe8:	f7ff ff34 	bl	8001e54 <LL_I2C_TransmitData8>
				i--;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	60fb      	str	r3, [r7, #12]
	while (!LL_I2C_IsActiveFlag_STOP(I2C1)&&i) {
 8001ff2:	4b0c      	ldr	r3, [pc, #48]	@ (8002024 <I2C1_WriteBuf+0x90>)
 8001ff4:	0018      	movs	r0, r3
 8001ff6:	f7ff fed8 	bl	8001daa <LL_I2C_IsActiveFlag_STOP>
 8001ffa:	1e03      	subs	r3, r0, #0
 8001ffc:	d102      	bne.n	8002004 <I2C1_WriteBuf+0x70>
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d1e4      	bne.n	8001fce <I2C1_WriteBuf+0x3a>
		}
	}
	  while (!LL_I2C_IsActiveFlag_STOP(I2C1));
 8002004:	46c0      	nop			@ (mov r8, r8)
 8002006:	4b07      	ldr	r3, [pc, #28]	@ (8002024 <I2C1_WriteBuf+0x90>)
 8002008:	0018      	movs	r0, r3
 800200a:	f7ff fece 	bl	8001daa <LL_I2C_IsActiveFlag_STOP>
 800200e:	1e03      	subs	r3, r0, #0
 8002010:	d0f9      	beq.n	8002006 <I2C1_WriteBuf+0x72>
  LL_I2C_ClearFlag_STOP(I2C1);
 8002012:	4b04      	ldr	r3, [pc, #16]	@ (8002024 <I2C1_WriteBuf+0x90>)
 8002014:	0018      	movs	r0, r3
 8002016:	f7ff fed9 	bl	8001dcc <LL_I2C_ClearFlag_STOP>
}
 800201a:	46c0      	nop			@ (mov r8, r8)
 800201c:	46bd      	mov	sp, r7
 800201e:	b004      	add	sp, #16
 8002020:	bd80      	pop	{r7, pc}
 8002022:	46c0      	nop			@ (mov r8, r8)
 8002024:	40005400 	.word	0x40005400
 8002028:	80002000 	.word	0x80002000

0800202c <LL_APB2_GRP1_EnableClock>:
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR2, Periphs);
 8002034:	4b07      	ldr	r3, [pc, #28]	@ (8002054 <LL_APB2_GRP1_EnableClock+0x28>)
 8002036:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8002038:	4b06      	ldr	r3, [pc, #24]	@ (8002054 <LL_APB2_GRP1_EnableClock+0x28>)
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	430a      	orrs	r2, r1
 800203e:	641a      	str	r2, [r3, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 8002040:	4b04      	ldr	r3, [pc, #16]	@ (8002054 <LL_APB2_GRP1_EnableClock+0x28>)
 8002042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	4013      	ands	r3, r2
 8002048:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800204a:	68fb      	ldr	r3, [r7, #12]
}
 800204c:	46c0      	nop			@ (mov r8, r8)
 800204e:	46bd      	mov	sp, r7
 8002050:	b004      	add	sp, #16
 8002052:	bd80      	pop	{r7, pc}
 8002054:	40021000 	.word	0x40021000

08002058 <LL_IOP_GRP1_EnableClock>:
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 8002060:	4b07      	ldr	r3, [pc, #28]	@ (8002080 <LL_IOP_GRP1_EnableClock+0x28>)
 8002062:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002064:	4b06      	ldr	r3, [pc, #24]	@ (8002080 <LL_IOP_GRP1_EnableClock+0x28>)
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	430a      	orrs	r2, r1
 800206a:	635a      	str	r2, [r3, #52]	@ 0x34
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 800206c:	4b04      	ldr	r3, [pc, #16]	@ (8002080 <LL_IOP_GRP1_EnableClock+0x28>)
 800206e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	4013      	ands	r3, r2
 8002074:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002076:	68fb      	ldr	r3, [r7, #12]
}
 8002078:	46c0      	nop			@ (mov r8, r8)
 800207a:	46bd      	mov	sp, r7
 800207c:	b004      	add	sp, #16
 800207e:	bd80      	pop	{r7, pc}
 8002080:	40021000 	.word	0x40021000

08002084 <LL_SPI_Enable>:
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2240      	movs	r2, #64	@ 0x40
 8002092:	431a      	orrs	r2, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	601a      	str	r2, [r3, #0]
}
 8002098:	46c0      	nop			@ (mov r8, r8)
 800209a:	46bd      	mov	sp, r7
 800209c:	b002      	add	sp, #8
 800209e:	bd80      	pop	{r7, pc}

080020a0 <SPI1_init>:
#include "stm32g0xx_ll_gpio.h"



void SPI1_init()
{
 80020a0:	b590      	push	{r4, r7, lr}
 80020a2:	b091      	sub	sp, #68	@ 0x44
 80020a4:	af00      	add	r7, sp, #0
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80020a6:	2418      	movs	r4, #24
 80020a8:	193b      	adds	r3, r7, r4
 80020aa:	0018      	movs	r0, r3
 80020ac:	2328      	movs	r3, #40	@ 0x28
 80020ae:	001a      	movs	r2, r3
 80020b0:	2100      	movs	r1, #0
 80020b2:	f002 fad1 	bl	8004658 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b6:	003b      	movs	r3, r7
 80020b8:	0018      	movs	r0, r3
 80020ba:	2318      	movs	r3, #24
 80020bc:	001a      	movs	r2, r3
 80020be:	2100      	movs	r1, #0
 80020c0:	f002 faca 	bl	8004658 <memset>

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 80020c4:	2380      	movs	r3, #128	@ 0x80
 80020c6:	015b      	lsls	r3, r3, #5
 80020c8:	0018      	movs	r0, r3
 80020ca:	f7ff ffaf 	bl	800202c <LL_APB2_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 80020ce:	2001      	movs	r0, #1
 80020d0:	f7ff ffc2 	bl	8002058 <LL_IOP_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 80020d4:	003b      	movs	r3, r7
 80020d6:	2220      	movs	r2, #32
 80020d8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80020da:	003b      	movs	r3, r7
 80020dc:	2202      	movs	r2, #2
 80020de:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80020e0:	003b      	movs	r3, r7
 80020e2:	2202      	movs	r2, #2
 80020e4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80020e6:	003b      	movs	r3, r7
 80020e8:	2200      	movs	r2, #0
 80020ea:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80020ec:	003b      	movs	r3, r7
 80020ee:	2200      	movs	r2, #0
 80020f0:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 80020f2:	003b      	movs	r3, r7
 80020f4:	2200      	movs	r2, #0
 80020f6:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020f8:	003a      	movs	r2, r7
 80020fa:	23a0      	movs	r3, #160	@ 0xa0
 80020fc:	05db      	lsls	r3, r3, #23
 80020fe:	0011      	movs	r1, r2
 8002100:	0018      	movs	r0, r3
 8002102:	f7fe f954 	bl	80003ae <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8002106:	003b      	movs	r3, r7
 8002108:	2240      	movs	r2, #64	@ 0x40
 800210a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800210c:	003b      	movs	r3, r7
 800210e:	2202      	movs	r2, #2
 8002110:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002112:	003b      	movs	r3, r7
 8002114:	2200      	movs	r2, #0
 8002116:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002118:	003b      	movs	r3, r7
 800211a:	2200      	movs	r2, #0
 800211c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800211e:	003b      	movs	r3, r7
 8002120:	2200      	movs	r2, #0
 8002122:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 8002124:	003b      	movs	r3, r7
 8002126:	2200      	movs	r2, #0
 8002128:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800212a:	003a      	movs	r2, r7
 800212c:	23a0      	movs	r3, #160	@ 0xa0
 800212e:	05db      	lsls	r3, r3, #23
 8002130:	0011      	movs	r1, r2
 8002132:	0018      	movs	r0, r3
 8002134:	f7fe f93b 	bl	80003ae <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8002138:	003b      	movs	r3, r7
 800213a:	2280      	movs	r2, #128	@ 0x80
 800213c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800213e:	003b      	movs	r3, r7
 8002140:	2202      	movs	r2, #2
 8002142:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002144:	003b      	movs	r3, r7
 8002146:	2202      	movs	r2, #2
 8002148:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800214a:	003b      	movs	r3, r7
 800214c:	2200      	movs	r2, #0
 800214e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002150:	003b      	movs	r3, r7
 8002152:	2200      	movs	r2, #0
 8002154:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 8002156:	003b      	movs	r3, r7
 8002158:	2200      	movs	r2, #0
 800215a:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800215c:	003a      	movs	r2, r7
 800215e:	23a0      	movs	r3, #160	@ 0xa0
 8002160:	05db      	lsls	r3, r3, #23
 8002162:	0011      	movs	r1, r2
 8002164:	0018      	movs	r0, r3
 8002166:	f7fe f922 	bl	80003ae <LL_GPIO_Init>
  NVIC_SetPriority(SPI1_IRQn, 1);
  NVIC_EnableIRQ(SPI1_IRQn);
#endif

  /* SPI1 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800216a:	0021      	movs	r1, r4
 800216c:	187b      	adds	r3, r7, r1
 800216e:	2200      	movs	r2, #0
 8002170:	601a      	str	r2, [r3, #0]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8002172:	187b      	adds	r3, r7, r1
 8002174:	2282      	movs	r2, #130	@ 0x82
 8002176:	0052      	lsls	r2, r2, #1
 8002178:	605a      	str	r2, [r3, #4]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800217a:	187b      	adds	r3, r7, r1
 800217c:	22e0      	movs	r2, #224	@ 0xe0
 800217e:	00d2      	lsls	r2, r2, #3
 8002180:	609a      	str	r2, [r3, #8]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;//LL_SPI_POLARITY_HIGH;
 8002182:	187b      	adds	r3, r7, r1
 8002184:	2200      	movs	r2, #0
 8002186:	60da      	str	r2, [r3, #12]
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;//LL_SPI_PHASE_2EDGE;
 8002188:	187b      	adds	r3, r7, r1
 800218a:	2200      	movs	r2, #0
 800218c:	611a      	str	r2, [r3, #16]
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800218e:	187b      	adds	r3, r7, r1
 8002190:	2280      	movs	r2, #128	@ 0x80
 8002192:	0092      	lsls	r2, r2, #2
 8002194:	615a      	str	r2, [r3, #20]
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 8002196:	187b      	adds	r3, r7, r1
 8002198:	2210      	movs	r2, #16
 800219a:	619a      	str	r2, [r3, #24]
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800219c:	187b      	adds	r3, r7, r1
 800219e:	2200      	movs	r2, #0
 80021a0:	61da      	str	r2, [r3, #28]
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80021a2:	187b      	adds	r3, r7, r1
 80021a4:	2200      	movs	r2, #0
 80021a6:	621a      	str	r2, [r3, #32]
  SPI_InitStruct.CRCPoly = 7;
 80021a8:	187b      	adds	r3, r7, r1
 80021aa:	2207      	movs	r2, #7
 80021ac:	625a      	str	r2, [r3, #36]	@ 0x24
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 80021ae:	187b      	adds	r3, r7, r1
 80021b0:	4a06      	ldr	r2, [pc, #24]	@ (80021cc <SPI1_init+0x12c>)
 80021b2:	0019      	movs	r1, r3
 80021b4:	0010      	movs	r0, r2
 80021b6:	f7fe fa69 	bl	800068c <LL_SPI_Init>
 // LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
  //LL_SPI_DisableNSSPulseMgt(SPI1);
//active SPI
  LL_SPI_Enable(SPI1);
 80021ba:	4b04      	ldr	r3, [pc, #16]	@ (80021cc <SPI1_init+0x12c>)
 80021bc:	0018      	movs	r0, r3
 80021be:	f7ff ff61 	bl	8002084 <LL_SPI_Enable>

}
 80021c2:	46c0      	nop			@ (mov r8, r8)
 80021c4:	46bd      	mov	sp, r7
 80021c6:	b011      	add	sp, #68	@ 0x44
 80021c8:	bd90      	pop	{r4, r7, pc}
 80021ca:	46c0      	nop			@ (mov r8, r8)
 80021cc:	40013000 	.word	0x40013000

080021d0 <SPI1_readWrite>:

uint8_t SPI1_readWrite(uint8_t TxData){
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	0002      	movs	r2, r0
 80021d8:	1dfb      	adds	r3, r7, #7
 80021da:	701a      	strb	r2, [r3, #0]
	uint8_t ret  = 0;
 80021dc:	230f      	movs	r3, #15
 80021de:	18fb      	adds	r3, r7, r3
 80021e0:	2200      	movs	r2, #0
 80021e2:	701a      	strb	r2, [r3, #0]
	while(!(SPI1->SR & SPI_SR_TXE));
 80021e4:	46c0      	nop			@ (mov r8, r8)
 80021e6:	4b0d      	ldr	r3, [pc, #52]	@ (800221c <SPI1_readWrite+0x4c>)
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	2202      	movs	r2, #2
 80021ec:	4013      	ands	r3, r2
 80021ee:	d0fa      	beq.n	80021e6 <SPI1_readWrite+0x16>
	*((__IO uint8_t *)&SPI1->DR) = TxData;
 80021f0:	4a0b      	ldr	r2, [pc, #44]	@ (8002220 <SPI1_readWrite+0x50>)
 80021f2:	1dfb      	adds	r3, r7, #7
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	7013      	strb	r3, [r2, #0]
	while(!((SPI1->SR) & SPI_SR_RXNE));
 80021f8:	46c0      	nop			@ (mov r8, r8)
 80021fa:	4b08      	ldr	r3, [pc, #32]	@ (800221c <SPI1_readWrite+0x4c>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	2201      	movs	r2, #1
 8002200:	4013      	ands	r3, r2
 8002202:	d0fa      	beq.n	80021fa <SPI1_readWrite+0x2a>
	ret =  (uint8_t)SPI1->DR;
 8002204:	4b05      	ldr	r3, [pc, #20]	@ (800221c <SPI1_readWrite+0x4c>)
 8002206:	68da      	ldr	r2, [r3, #12]
 8002208:	210f      	movs	r1, #15
 800220a:	187b      	adds	r3, r7, r1
 800220c:	701a      	strb	r2, [r3, #0]
	return ret;
 800220e:	187b      	adds	r3, r7, r1
 8002210:	781b      	ldrb	r3, [r3, #0]
}
 8002212:	0018      	movs	r0, r3
 8002214:	46bd      	mov	sp, r7
 8002216:	b004      	add	sp, #16
 8002218:	bd80      	pop	{r7, pc}
 800221a:	46c0      	nop			@ (mov r8, r8)
 800221c:	40013000 	.word	0x40013000
 8002220:	4001300c 	.word	0x4001300c

08002224 <SPI1_WriteByte>:
uint8_t SPI1_ReadByte() {
	LL_SPI_TransmitData8(SPI1, 0xff);
	return LL_SPI_ReceiveData8(SPI1);
}
#else
void SPI1_WriteByte(uint8_t TxData) {
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	0002      	movs	r2, r0
 800222c:	1dfb      	adds	r3, r7, #7
 800222e:	701a      	strb	r2, [r3, #0]
	SPI1_readWrite(TxData);
 8002230:	1dfb      	adds	r3, r7, #7
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	0018      	movs	r0, r3
 8002236:	f7ff ffcb 	bl	80021d0 <SPI1_readWrite>
}
 800223a:	46c0      	nop			@ (mov r8, r8)
 800223c:	46bd      	mov	sp, r7
 800223e:	b002      	add	sp, #8
 8002240:	bd80      	pop	{r7, pc}

08002242 <SPI1_ReadByte>:

uint8_t SPI1_ReadByte() {
 8002242:	b580      	push	{r7, lr}
 8002244:	af00      	add	r7, sp, #0
	return SPI1_readWrite(0xff);
 8002246:	20ff      	movs	r0, #255	@ 0xff
 8002248:	f7ff ffc2 	bl	80021d0 <SPI1_readWrite>
 800224c:	0003      	movs	r3, r0
}
 800224e:	0018      	movs	r0, r3
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}

08002254 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	0002      	movs	r2, r0
 800225c:	1dfb      	adds	r3, r7, #7
 800225e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002260:	1dfb      	adds	r3, r7, #7
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	2b7f      	cmp	r3, #127	@ 0x7f
 8002266:	d809      	bhi.n	800227c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002268:	1dfb      	adds	r3, r7, #7
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	001a      	movs	r2, r3
 800226e:	231f      	movs	r3, #31
 8002270:	401a      	ands	r2, r3
 8002272:	4b04      	ldr	r3, [pc, #16]	@ (8002284 <__NVIC_EnableIRQ+0x30>)
 8002274:	2101      	movs	r1, #1
 8002276:	4091      	lsls	r1, r2
 8002278:	000a      	movs	r2, r1
 800227a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800227c:	46c0      	nop			@ (mov r8, r8)
 800227e:	46bd      	mov	sp, r7
 8002280:	b002      	add	sp, #8
 8002282:	bd80      	pop	{r7, pc}
 8002284:	e000e100 	.word	0xe000e100

08002288 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	0002      	movs	r2, r0
 8002290:	1dfb      	adds	r3, r7, #7
 8002292:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002294:	1dfb      	adds	r3, r7, #7
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	2b7f      	cmp	r3, #127	@ 0x7f
 800229a:	d810      	bhi.n	80022be <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800229c:	1dfb      	adds	r3, r7, #7
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	001a      	movs	r2, r3
 80022a2:	231f      	movs	r3, #31
 80022a4:	4013      	ands	r3, r2
 80022a6:	4908      	ldr	r1, [pc, #32]	@ (80022c8 <__NVIC_DisableIRQ+0x40>)
 80022a8:	2201      	movs	r2, #1
 80022aa:	409a      	lsls	r2, r3
 80022ac:	0013      	movs	r3, r2
 80022ae:	2280      	movs	r2, #128	@ 0x80
 80022b0:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80022b2:	f3bf 8f4f 	dsb	sy
}
 80022b6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 80022b8:	f3bf 8f6f 	isb	sy
}
 80022bc:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 80022be:	46c0      	nop			@ (mov r8, r8)
 80022c0:	46bd      	mov	sp, r7
 80022c2:	b002      	add	sp, #8
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	46c0      	nop			@ (mov r8, r8)
 80022c8:	e000e100 	.word	0xe000e100

080022cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022cc:	b590      	push	{r4, r7, lr}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	0002      	movs	r2, r0
 80022d4:	6039      	str	r1, [r7, #0]
 80022d6:	1dfb      	adds	r3, r7, #7
 80022d8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80022da:	1dfb      	adds	r3, r7, #7
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	2b7f      	cmp	r3, #127	@ 0x7f
 80022e0:	d828      	bhi.n	8002334 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80022e2:	4a2f      	ldr	r2, [pc, #188]	@ (80023a0 <__NVIC_SetPriority+0xd4>)
 80022e4:	1dfb      	adds	r3, r7, #7
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	b25b      	sxtb	r3, r3
 80022ea:	089b      	lsrs	r3, r3, #2
 80022ec:	33c0      	adds	r3, #192	@ 0xc0
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	589b      	ldr	r3, [r3, r2]
 80022f2:	1dfa      	adds	r2, r7, #7
 80022f4:	7812      	ldrb	r2, [r2, #0]
 80022f6:	0011      	movs	r1, r2
 80022f8:	2203      	movs	r2, #3
 80022fa:	400a      	ands	r2, r1
 80022fc:	00d2      	lsls	r2, r2, #3
 80022fe:	21ff      	movs	r1, #255	@ 0xff
 8002300:	4091      	lsls	r1, r2
 8002302:	000a      	movs	r2, r1
 8002304:	43d2      	mvns	r2, r2
 8002306:	401a      	ands	r2, r3
 8002308:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	019b      	lsls	r3, r3, #6
 800230e:	22ff      	movs	r2, #255	@ 0xff
 8002310:	401a      	ands	r2, r3
 8002312:	1dfb      	adds	r3, r7, #7
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	0018      	movs	r0, r3
 8002318:	2303      	movs	r3, #3
 800231a:	4003      	ands	r3, r0
 800231c:	00db      	lsls	r3, r3, #3
 800231e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002320:	481f      	ldr	r0, [pc, #124]	@ (80023a0 <__NVIC_SetPriority+0xd4>)
 8002322:	1dfb      	adds	r3, r7, #7
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	b25b      	sxtb	r3, r3
 8002328:	089b      	lsrs	r3, r3, #2
 800232a:	430a      	orrs	r2, r1
 800232c:	33c0      	adds	r3, #192	@ 0xc0
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002332:	e031      	b.n	8002398 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002334:	4a1b      	ldr	r2, [pc, #108]	@ (80023a4 <__NVIC_SetPriority+0xd8>)
 8002336:	1dfb      	adds	r3, r7, #7
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	0019      	movs	r1, r3
 800233c:	230f      	movs	r3, #15
 800233e:	400b      	ands	r3, r1
 8002340:	3b08      	subs	r3, #8
 8002342:	089b      	lsrs	r3, r3, #2
 8002344:	3306      	adds	r3, #6
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	18d3      	adds	r3, r2, r3
 800234a:	3304      	adds	r3, #4
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	1dfa      	adds	r2, r7, #7
 8002350:	7812      	ldrb	r2, [r2, #0]
 8002352:	0011      	movs	r1, r2
 8002354:	2203      	movs	r2, #3
 8002356:	400a      	ands	r2, r1
 8002358:	00d2      	lsls	r2, r2, #3
 800235a:	21ff      	movs	r1, #255	@ 0xff
 800235c:	4091      	lsls	r1, r2
 800235e:	000a      	movs	r2, r1
 8002360:	43d2      	mvns	r2, r2
 8002362:	401a      	ands	r2, r3
 8002364:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	019b      	lsls	r3, r3, #6
 800236a:	22ff      	movs	r2, #255	@ 0xff
 800236c:	401a      	ands	r2, r3
 800236e:	1dfb      	adds	r3, r7, #7
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	0018      	movs	r0, r3
 8002374:	2303      	movs	r3, #3
 8002376:	4003      	ands	r3, r0
 8002378:	00db      	lsls	r3, r3, #3
 800237a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800237c:	4809      	ldr	r0, [pc, #36]	@ (80023a4 <__NVIC_SetPriority+0xd8>)
 800237e:	1dfb      	adds	r3, r7, #7
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	001c      	movs	r4, r3
 8002384:	230f      	movs	r3, #15
 8002386:	4023      	ands	r3, r4
 8002388:	3b08      	subs	r3, #8
 800238a:	089b      	lsrs	r3, r3, #2
 800238c:	430a      	orrs	r2, r1
 800238e:	3306      	adds	r3, #6
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	18c3      	adds	r3, r0, r3
 8002394:	3304      	adds	r3, #4
 8002396:	601a      	str	r2, [r3, #0]
}
 8002398:	46c0      	nop			@ (mov r8, r8)
 800239a:	46bd      	mov	sp, r7
 800239c:	b003      	add	sp, #12
 800239e:	bd90      	pop	{r4, r7, pc}
 80023a0:	e000e100 	.word	0xe000e100
 80023a4:	e000ed00 	.word	0xe000ed00

080023a8 <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 80023b6:	4a0b      	ldr	r2, [pc, #44]	@ (80023e4 <LL_DMA_EnableChannel+0x3c>)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	18d3      	adds	r3, r2, r3
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	001a      	movs	r2, r3
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	18d3      	adds	r3, r2, r3
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	4907      	ldr	r1, [pc, #28]	@ (80023e4 <LL_DMA_EnableChannel+0x3c>)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	18cb      	adds	r3, r1, r3
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	0019      	movs	r1, r3
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	18cb      	adds	r3, r1, r3
 80023d4:	2101      	movs	r1, #1
 80023d6:	430a      	orrs	r2, r1
 80023d8:	601a      	str	r2, [r3, #0]
}
 80023da:	46c0      	nop			@ (mov r8, r8)
 80023dc:	46bd      	mov	sp, r7
 80023de:	b004      	add	sp, #16
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	46c0      	nop			@ (mov r8, r8)
 80023e4:	08005020 	.word	0x08005020

080023e8 <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	60fb      	str	r3, [r7, #12]
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 80023f6:	4a0b      	ldr	r2, [pc, #44]	@ (8002424 <LL_DMA_DisableChannel+0x3c>)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	18d3      	adds	r3, r2, r3
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	001a      	movs	r2, r3
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	18d3      	adds	r3, r2, r3
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	4907      	ldr	r1, [pc, #28]	@ (8002424 <LL_DMA_DisableChannel+0x3c>)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	18cb      	adds	r3, r1, r3
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	0019      	movs	r1, r3
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	18cb      	adds	r3, r1, r3
 8002414:	2101      	movs	r1, #1
 8002416:	438a      	bics	r2, r1
 8002418:	601a      	str	r2, [r3, #0]
}
 800241a:	46c0      	nop			@ (mov r8, r8)
 800241c:	46bd      	mov	sp, r7
 800241e:	b004      	add	sp, #16
 8002420:	bd80      	pop	{r7, pc}
 8002422:	46c0      	nop			@ (mov r8, r8)
 8002424:	08005020 	.word	0x08005020

08002428 <LL_DMA_ConfigTransfer>:
  *         @arg @ref LL_DMA_MDATAALIGN_BYTE or @ref LL_DMA_MDATAALIGN_HALFWORD or @ref LL_DMA_MDATAALIGN_WORD
  *         @arg @ref LL_DMA_PRIORITY_LOW or @ref LL_DMA_PRIORITY_MEDIUM or @ref LL_DMA_PRIORITY_HIGH or @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigTransfer(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Configuration)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b086      	sub	sp, #24
 800242c:	af00      	add	r7, sp, #0
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8002438:	4a0c      	ldr	r2, [pc, #48]	@ (800246c <LL_DMA_ConfigTransfer+0x44>)
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	18d3      	adds	r3, r2, r3
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	001a      	movs	r2, r3
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	18d3      	adds	r3, r2, r3
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a09      	ldr	r2, [pc, #36]	@ (8002470 <LL_DMA_ConfigTransfer+0x48>)
 800244a:	4013      	ands	r3, r2
 800244c:	0019      	movs	r1, r3
 800244e:	4a07      	ldr	r2, [pc, #28]	@ (800246c <LL_DMA_ConfigTransfer+0x44>)
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	18d3      	adds	r3, r2, r3
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	001a      	movs	r2, r3
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	18d3      	adds	r3, r2, r3
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	430a      	orrs	r2, r1
 8002460:	601a      	str	r2, [r3, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM | DMA_CCR_CIRC | DMA_CCR_PINC | DMA_CCR_MINC | DMA_CCR_PSIZE | DMA_CCR_MSIZE | DMA_CCR_PL,
             Configuration);
}
 8002462:	46c0      	nop			@ (mov r8, r8)
 8002464:	46bd      	mov	sp, r7
 8002466:	b006      	add	sp, #24
 8002468:	bd80      	pop	{r7, pc}
 800246a:	46c0      	nop			@ (mov r8, r8)
 800246c:	08005020 	.word	0x08005020
 8002470:	ffff800f 	.word	0xffff800f

08002474 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b086      	sub	sp, #24
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8002484:	4a0b      	ldr	r2, [pc, #44]	@ (80024b4 <LL_DMA_SetDataLength+0x40>)
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	18d3      	adds	r3, r2, r3
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	001a      	movs	r2, r3
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	18d3      	adds	r3, r2, r3
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	0c1b      	lsrs	r3, r3, #16
 8002496:	0419      	lsls	r1, r3, #16
 8002498:	4a06      	ldr	r2, [pc, #24]	@ (80024b4 <LL_DMA_SetDataLength+0x40>)
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	18d3      	adds	r3, r2, r3
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	001a      	movs	r2, r3
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	18d3      	adds	r3, r2, r3
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	430a      	orrs	r2, r1
 80024aa:	605a      	str	r2, [r3, #4]
             DMA_CNDTR_NDT, NbData);
}
 80024ac:	46c0      	nop			@ (mov r8, r8)
 80024ae:	46bd      	mov	sp, r7
 80024b0:	b006      	add	sp, #24
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	08005020 	.word	0x08005020

080024b8 <LL_DMA_GetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_DMA_GetDataLength(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	60fb      	str	r3, [r7, #12]
  return (READ_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 80024c6:	4a07      	ldr	r2, [pc, #28]	@ (80024e4 <LL_DMA_GetDataLength+0x2c>)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	18d3      	adds	r3, r2, r3
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	001a      	movs	r2, r3
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	18d3      	adds	r3, r2, r3
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	041b      	lsls	r3, r3, #16
 80024d8:	0c1b      	lsrs	r3, r3, #16
                   DMA_CNDTR_NDT));
}
 80024da:	0018      	movs	r0, r3
 80024dc:	46bd      	mov	sp, r7
 80024de:	b004      	add	sp, #16
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	46c0      	nop			@ (mov r8, r8)
 80024e4:	08005020 	.word	0x08005020

080024e8 <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  MemoryAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryAddress)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b086      	sub	sp, #24
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	60b9      	str	r1, [r7, #8]
 80024f2:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 80024f8:	4a06      	ldr	r2, [pc, #24]	@ (8002514 <LL_DMA_SetMemoryAddress+0x2c>)
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	18d3      	adds	r3, r2, r3
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	001a      	movs	r2, r3
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	18d3      	adds	r3, r2, r3
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	60da      	str	r2, [r3, #12]
}
 800250a:	46c0      	nop			@ (mov r8, r8)
 800250c:	46bd      	mov	sp, r7
 800250e:	b006      	add	sp, #24
 8002510:	bd80      	pop	{r7, pc}
 8002512:	46c0      	nop			@ (mov r8, r8)
 8002514:	08005020 	.word	0x08005020

08002518 <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  PeriphAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAddress)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b086      	sub	sp, #24
 800251c:	af00      	add	r7, sp, #0
 800251e:	60f8      	str	r0, [r7, #12]
 8002520:	60b9      	str	r1, [r7, #8]
 8002522:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, PeriphAddress);
 8002528:	4a06      	ldr	r2, [pc, #24]	@ (8002544 <LL_DMA_SetPeriphAddress+0x2c>)
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	18d3      	adds	r3, r2, r3
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	001a      	movs	r2, r3
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	18d3      	adds	r3, r2, r3
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	609a      	str	r2, [r3, #8]
}
 800253a:	46c0      	nop			@ (mov r8, r8)
 800253c:	46bd      	mov	sp, r7
 800253e:	b006      	add	sp, #24
 8002540:	bd80      	pop	{r7, pc}
 8002542:	46c0      	nop			@ (mov r8, r8)
 8002544:	08005020 	.word	0x08005020

08002548 <LL_DMA_SetPeriphRequest>:
  *         @arg @ref LL_DMAMUX_REQ_UCPD2_RX
  *         @arg @ref LL_DMAMUX_REQ_UCPD2_TX
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Request)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b086      	sub	sp, #24
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	60b9      	str	r1, [r7, #8]
 8002552:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 7U);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	0a9b      	lsrs	r3, r3, #10
 8002558:	4a0f      	ldr	r2, [pc, #60]	@ (8002598 <LL_DMA_SetPeriphRequest+0x50>)
 800255a:	405a      	eors	r2, r3
 800255c:	0013      	movs	r3, r2
 800255e:	00db      	lsls	r3, r3, #3
 8002560:	1a9b      	subs	r3, r3, r2
 8002562:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 8002564:	68ba      	ldr	r2, [r7, #8]
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	18d3      	adds	r3, r2, r3
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	4a0b      	ldr	r2, [pc, #44]	@ (800259c <LL_DMA_SetPeriphRequest+0x54>)
 800256e:	4694      	mov	ip, r2
 8002570:	4463      	add	r3, ip
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	227f      	movs	r2, #127	@ 0x7f
 8002576:	4393      	bics	r3, r2
 8002578:	0019      	movs	r1, r3
 800257a:	68ba      	ldr	r2, [r7, #8]
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	18d3      	adds	r3, r2, r3
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	4a06      	ldr	r2, [pc, #24]	@ (800259c <LL_DMA_SetPeriphRequest+0x54>)
 8002584:	4694      	mov	ip, r2
 8002586:	4463      	add	r3, ip
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	430a      	orrs	r2, r1
 800258c:	601a      	str	r2, [r3, #0]
}
 800258e:	46c0      	nop			@ (mov r8, r8)
 8002590:	46bd      	mov	sp, r7
 8002592:	b006      	add	sp, #24
 8002594:	bd80      	pop	{r7, pc}
 8002596:	46c0      	nop			@ (mov r8, r8)
 8002598:	00100080 	.word	0x00100080
 800259c:	40020800 	.word	0x40020800

080025a0 <LL_AHB1_GRP1_EnableClock>:
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 80025a8:	4b07      	ldr	r3, [pc, #28]	@ (80025c8 <LL_AHB1_GRP1_EnableClock+0x28>)
 80025aa:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80025ac:	4b06      	ldr	r3, [pc, #24]	@ (80025c8 <LL_AHB1_GRP1_EnableClock+0x28>)
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	430a      	orrs	r2, r1
 80025b2:	639a      	str	r2, [r3, #56]	@ 0x38
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80025b4:	4b04      	ldr	r3, [pc, #16]	@ (80025c8 <LL_AHB1_GRP1_EnableClock+0x28>)
 80025b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	4013      	ands	r3, r2
 80025bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80025be:	68fb      	ldr	r3, [r7, #12]
}
 80025c0:	46c0      	nop			@ (mov r8, r8)
 80025c2:	46bd      	mov	sp, r7
 80025c4:	b004      	add	sp, #16
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	40021000 	.word	0x40021000

080025cc <LL_APB1_GRP1_EnableClock>:
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR1, Periphs);
 80025d4:	4b07      	ldr	r3, [pc, #28]	@ (80025f4 <LL_APB1_GRP1_EnableClock+0x28>)
 80025d6:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80025d8:	4b06      	ldr	r3, [pc, #24]	@ (80025f4 <LL_APB1_GRP1_EnableClock+0x28>)
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	430a      	orrs	r2, r1
 80025de:	63da      	str	r2, [r3, #60]	@ 0x3c
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 80025e0:	4b04      	ldr	r3, [pc, #16]	@ (80025f4 <LL_APB1_GRP1_EnableClock+0x28>)
 80025e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	4013      	ands	r3, r2
 80025e8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80025ea:	68fb      	ldr	r3, [r7, #12]
}
 80025ec:	46c0      	nop			@ (mov r8, r8)
 80025ee:	46bd      	mov	sp, r7
 80025f0:	b004      	add	sp, #16
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	40021000 	.word	0x40021000

080025f8 <LL_APB1_GRP1_DisableClock>:
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APBENR1, Periphs);
 8002600:	4b05      	ldr	r3, [pc, #20]	@ (8002618 <LL_APB1_GRP1_DisableClock+0x20>)
 8002602:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	43d9      	mvns	r1, r3
 8002608:	4b03      	ldr	r3, [pc, #12]	@ (8002618 <LL_APB1_GRP1_DisableClock+0x20>)
 800260a:	400a      	ands	r2, r1
 800260c:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800260e:	46c0      	nop			@ (mov r8, r8)
 8002610:	46bd      	mov	sp, r7
 8002612:	b002      	add	sp, #8
 8002614:	bd80      	pop	{r7, pc}
 8002616:	46c0      	nop			@ (mov r8, r8)
 8002618:	40021000 	.word	0x40021000

0800261c <LL_APB1_GRP1_ForceReset>:
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBRSTR1, Periphs);
 8002624:	4b04      	ldr	r3, [pc, #16]	@ (8002638 <LL_APB1_GRP1_ForceReset+0x1c>)
 8002626:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002628:	4b03      	ldr	r3, [pc, #12]	@ (8002638 <LL_APB1_GRP1_ForceReset+0x1c>)
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	430a      	orrs	r2, r1
 800262e:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8002630:	46c0      	nop			@ (mov r8, r8)
 8002632:	46bd      	mov	sp, r7
 8002634:	b002      	add	sp, #8
 8002636:	bd80      	pop	{r7, pc}
 8002638:	40021000 	.word	0x40021000

0800263c <LL_APB1_GRP1_ReleaseReset>:
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APBRSTR1, Periphs);
 8002644:	4b05      	ldr	r3, [pc, #20]	@ (800265c <LL_APB1_GRP1_ReleaseReset+0x20>)
 8002646:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	43d9      	mvns	r1, r3
 800264c:	4b03      	ldr	r3, [pc, #12]	@ (800265c <LL_APB1_GRP1_ReleaseReset+0x20>)
 800264e:	400a      	ands	r2, r1
 8002650:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8002652:	46c0      	nop			@ (mov r8, r8)
 8002654:	46bd      	mov	sp, r7
 8002656:	b002      	add	sp, #8
 8002658:	bd80      	pop	{r7, pc}
 800265a:	46c0      	nop			@ (mov r8, r8)
 800265c:	40021000 	.word	0x40021000

08002660 <LL_APB2_GRP1_EnableClock>:
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR2, Periphs);
 8002668:	4b07      	ldr	r3, [pc, #28]	@ (8002688 <LL_APB2_GRP1_EnableClock+0x28>)
 800266a:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800266c:	4b06      	ldr	r3, [pc, #24]	@ (8002688 <LL_APB2_GRP1_EnableClock+0x28>)
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	430a      	orrs	r2, r1
 8002672:	641a      	str	r2, [r3, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 8002674:	4b04      	ldr	r3, [pc, #16]	@ (8002688 <LL_APB2_GRP1_EnableClock+0x28>)
 8002676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	4013      	ands	r3, r2
 800267c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800267e:	68fb      	ldr	r3, [r7, #12]
}
 8002680:	46c0      	nop			@ (mov r8, r8)
 8002682:	46bd      	mov	sp, r7
 8002684:	b004      	add	sp, #16
 8002686:	bd80      	pop	{r7, pc}
 8002688:	40021000 	.word	0x40021000

0800268c <LL_APB2_GRP1_DisableClock>:
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APBENR2, Periphs);
 8002694:	4b05      	ldr	r3, [pc, #20]	@ (80026ac <LL_APB2_GRP1_DisableClock+0x20>)
 8002696:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	43d9      	mvns	r1, r3
 800269c:	4b03      	ldr	r3, [pc, #12]	@ (80026ac <LL_APB2_GRP1_DisableClock+0x20>)
 800269e:	400a      	ands	r2, r1
 80026a0:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80026a2:	46c0      	nop			@ (mov r8, r8)
 80026a4:	46bd      	mov	sp, r7
 80026a6:	b002      	add	sp, #8
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	46c0      	nop			@ (mov r8, r8)
 80026ac:	40021000 	.word	0x40021000

080026b0 <LL_APB2_GRP1_ForceReset>:
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBRSTR2, Periphs);
 80026b8:	4b04      	ldr	r3, [pc, #16]	@ (80026cc <LL_APB2_GRP1_ForceReset+0x1c>)
 80026ba:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80026bc:	4b03      	ldr	r3, [pc, #12]	@ (80026cc <LL_APB2_GRP1_ForceReset+0x1c>)
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	430a      	orrs	r2, r1
 80026c2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80026c4:	46c0      	nop			@ (mov r8, r8)
 80026c6:	46bd      	mov	sp, r7
 80026c8:	b002      	add	sp, #8
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	40021000 	.word	0x40021000

080026d0 <LL_APB2_GRP1_ReleaseReset>:
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APBRSTR2, Periphs);
 80026d8:	4b05      	ldr	r3, [pc, #20]	@ (80026f0 <LL_APB2_GRP1_ReleaseReset+0x20>)
 80026da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	43d9      	mvns	r1, r3
 80026e0:	4b03      	ldr	r3, [pc, #12]	@ (80026f0 <LL_APB2_GRP1_ReleaseReset+0x20>)
 80026e2:	400a      	ands	r2, r1
 80026e4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80026e6:	46c0      	nop			@ (mov r8, r8)
 80026e8:	46bd      	mov	sp, r7
 80026ea:	b002      	add	sp, #8
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	46c0      	nop			@ (mov r8, r8)
 80026f0:	40021000 	.word	0x40021000

080026f4 <LL_IOP_GRP1_EnableClock>:
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 80026fc:	4b07      	ldr	r3, [pc, #28]	@ (800271c <LL_IOP_GRP1_EnableClock+0x28>)
 80026fe:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002700:	4b06      	ldr	r3, [pc, #24]	@ (800271c <LL_IOP_GRP1_EnableClock+0x28>)
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	430a      	orrs	r2, r1
 8002706:	635a      	str	r2, [r3, #52]	@ 0x34
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8002708:	4b04      	ldr	r3, [pc, #16]	@ (800271c <LL_IOP_GRP1_EnableClock+0x28>)
 800270a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	4013      	ands	r3, r2
 8002710:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002712:	68fb      	ldr	r3, [r7, #12]
}
 8002714:	46c0      	nop			@ (mov r8, r8)
 8002716:	46bd      	mov	sp, r7
 8002718:	b004      	add	sp, #16
 800271a:	bd80      	pop	{r7, pc}
 800271c:	40021000 	.word	0x40021000

08002720 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	2201      	movs	r2, #1
 800272e:	431a      	orrs	r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	601a      	str	r2, [r3, #0]
}
 8002734:	46c0      	nop			@ (mov r8, r8)
 8002736:	46bd      	mov	sp, r7
 8002738:	b002      	add	sp, #8
 800273a:	bd80      	pop	{r7, pc}

0800273c <LL_USART_Disable>:
  * @rmtoll CR1          UE            LL_USART_Disable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Disable(USART_TypeDef *USARTx)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2201      	movs	r2, #1
 800274a:	4393      	bics	r3, r2
 800274c:	001a      	movs	r2, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	601a      	str	r2, [r3, #0]
}
 8002752:	46c0      	nop			@ (mov r8, r8)
 8002754:	46bd      	mov	sp, r7
 8002756:	b002      	add	sp, #8
 8002758:	bd80      	pop	{r7, pc}

0800275a <LL_USART_SetTransferDirection>:
  *         @arg @ref LL_USART_DIRECTION_TX
  *         @arg @ref LL_USART_DIRECTION_TX_RX
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTransferDirection(USART_TypeDef *USARTx, uint32_t TransferDirection)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	b086      	sub	sp, #24
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
 8002762:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002764:	f3ef 8310 	mrs	r3, PRIMASK
 8002768:	60bb      	str	r3, [r7, #8]
  return(result);
 800276a:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 800276c:	617b      	str	r3, [r7, #20]
 800276e:	2301      	movs	r3, #1
 8002770:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	f383 8810 	msr	PRIMASK, r3
}
 8002778:	46c0      	nop			@ (mov r8, r8)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	220c      	movs	r2, #12
 8002780:	4393      	bics	r3, r2
 8002782:	001a      	movs	r2, r3
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	431a      	orrs	r2, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	601a      	str	r2, [r3, #0]
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	f383 8810 	msr	PRIMASK, r3
}
 8002796:	46c0      	nop			@ (mov r8, r8)
}
 8002798:	46c0      	nop			@ (mov r8, r8)
 800279a:	46bd      	mov	sp, r7
 800279c:	b006      	add	sp, #24
 800279e:	bd80      	pop	{r7, pc}

080027a0 <LL_USART_SetParity>:
  *         @arg @ref LL_USART_PARITY_EVEN
  *         @arg @ref LL_USART_PARITY_ODD
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetParity(USART_TypeDef *USARTx, uint32_t Parity)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE, Parity);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a05      	ldr	r2, [pc, #20]	@ (80027c4 <LL_USART_SetParity+0x24>)
 80027b0:	401a      	ands	r2, r3
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	431a      	orrs	r2, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	601a      	str	r2, [r3, #0]
}
 80027ba:	46c0      	nop			@ (mov r8, r8)
 80027bc:	46bd      	mov	sp, r7
 80027be:	b002      	add	sp, #8
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	46c0      	nop			@ (mov r8, r8)
 80027c4:	fffff9ff 	.word	0xfffff9ff

080027c8 <LL_USART_SetDataWidth>:
  *         @arg @ref LL_USART_DATAWIDTH_8B
  *         @arg @ref LL_USART_DATAWIDTH_9B
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetDataWidth(USART_TypeDef *USARTx, uint32_t DataWidth)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR1, USART_CR1_M, DataWidth);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a05      	ldr	r2, [pc, #20]	@ (80027ec <LL_USART_SetDataWidth+0x24>)
 80027d8:	401a      	ands	r2, r3
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	431a      	orrs	r2, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	601a      	str	r2, [r3, #0]
}
 80027e2:	46c0      	nop			@ (mov r8, r8)
 80027e4:	46bd      	mov	sp, r7
 80027e6:	b002      	add	sp, #8
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	46c0      	nop			@ (mov r8, r8)
 80027ec:	efffefff 	.word	0xefffefff

080027f0 <LL_USART_SetStopBitsLength>:
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	4a05      	ldr	r2, [pc, #20]	@ (8002814 <LL_USART_SetStopBitsLength+0x24>)
 8002800:	401a      	ands	r2, r3
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	431a      	orrs	r2, r3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	605a      	str	r2, [r3, #4]
}
 800280a:	46c0      	nop			@ (mov r8, r8)
 800280c:	46bd      	mov	sp, r7
 800280e:	b002      	add	sp, #8
 8002810:	bd80      	pop	{r7, pc}
 8002812:	46c0      	nop			@ (mov r8, r8)
 8002814:	ffffcfff 	.word	0xffffcfff

08002818 <LL_USART_SetHWFlowCtrl>:
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	4a05      	ldr	r2, [pc, #20]	@ (800283c <LL_USART_SetHWFlowCtrl+0x24>)
 8002828:	401a      	ands	r2, r3
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	431a      	orrs	r2, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	609a      	str	r2, [r3, #8]
}
 8002832:	46c0      	nop			@ (mov r8, r8)
 8002834:	46bd      	mov	sp, r7
 8002836:	b002      	add	sp, #8
 8002838:	bd80      	pop	{r7, pc}
 800283a:	46c0      	nop			@ (mov r8, r8)
 800283c:	fffffcff 	.word	0xfffffcff

08002840 <LL_USART_SetBaudRate>:
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t PrescalerValue,
                                          uint32_t OverSampling,
                                          uint32_t BaudRate)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b086      	sub	sp, #24
 8002844:	af00      	add	r7, sp, #0
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	60b9      	str	r1, [r7, #8]
 800284a:	607a      	str	r2, [r7, #4]
 800284c:	603b      	str	r3, [r7, #0]
  uint32_t usartdiv;
  uint32_t brrtemp;

  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2b0b      	cmp	r3, #11
 8002852:	d846      	bhi.n	80028e2 <LL_USART_SetBaudRate+0xa2>
  {
    /* Do not overstep the size of USART_PRESCALER_TAB */
  }
  else if (BaudRate == 0U)
 8002854:	6a3b      	ldr	r3, [r7, #32]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d043      	beq.n	80028e2 <LL_USART_SetBaudRate+0xa2>
  {
    /* Can Not divide per 0 */
  }
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 800285a:	683a      	ldr	r2, [r7, #0]
 800285c:	2380      	movs	r3, #128	@ 0x80
 800285e:	021b      	lsls	r3, r3, #8
 8002860:	429a      	cmp	r2, r3
 8002862:	d126      	bne.n	80028b2 <LL_USART_SetBaudRate+0x72>
  {
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	b2db      	uxtb	r3, r3
 8002868:	001a      	movs	r2, r3
 800286a:	4b20      	ldr	r3, [pc, #128]	@ (80028ec <LL_USART_SetBaudRate+0xac>)
 800286c:	0092      	lsls	r2, r2, #2
 800286e:	58d3      	ldr	r3, [r2, r3]
 8002870:	0019      	movs	r1, r3
 8002872:	68b8      	ldr	r0, [r7, #8]
 8002874:	f7fd fc56 	bl	8000124 <__udivsi3>
 8002878:	0003      	movs	r3, r0
 800287a:	005a      	lsls	r2, r3, #1
 800287c:	6a3b      	ldr	r3, [r7, #32]
 800287e:	085b      	lsrs	r3, r3, #1
 8002880:	18d3      	adds	r3, r2, r3
 8002882:	6a39      	ldr	r1, [r7, #32]
 8002884:	0018      	movs	r0, r3
 8002886:	f7fd fc4d 	bl	8000124 <__udivsi3>
 800288a:	0003      	movs	r3, r0
 800288c:	b29b      	uxth	r3, r3
 800288e:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	4a17      	ldr	r2, [pc, #92]	@ (80028f0 <LL_USART_SetBaudRate+0xb0>)
 8002894:	4013      	ands	r3, r2
 8002896:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	085b      	lsrs	r3, r3, #1
 800289c:	b29b      	uxth	r3, r3
 800289e:	001a      	movs	r2, r3
 80028a0:	2307      	movs	r3, #7
 80028a2:	4013      	ands	r3, r2
 80028a4:	693a      	ldr	r2, [r7, #16]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	693a      	ldr	r2, [r7, #16]
 80028ae:	60da      	str	r2, [r3, #12]
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
  }
}
 80028b0:	e017      	b.n	80028e2 <LL_USART_SetBaudRate+0xa2>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	001a      	movs	r2, r3
 80028b8:	4b0c      	ldr	r3, [pc, #48]	@ (80028ec <LL_USART_SetBaudRate+0xac>)
 80028ba:	0092      	lsls	r2, r2, #2
 80028bc:	58d3      	ldr	r3, [r2, r3]
 80028be:	0019      	movs	r1, r3
 80028c0:	68b8      	ldr	r0, [r7, #8]
 80028c2:	f7fd fc2f 	bl	8000124 <__udivsi3>
 80028c6:	0003      	movs	r3, r0
 80028c8:	001a      	movs	r2, r3
 80028ca:	6a3b      	ldr	r3, [r7, #32]
 80028cc:	085b      	lsrs	r3, r3, #1
 80028ce:	18d3      	adds	r3, r2, r3
 80028d0:	6a39      	ldr	r1, [r7, #32]
 80028d2:	0018      	movs	r0, r3
 80028d4:	f7fd fc26 	bl	8000124 <__udivsi3>
 80028d8:	0003      	movs	r3, r0
 80028da:	b29b      	uxth	r3, r3
 80028dc:	001a      	movs	r2, r3
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	60da      	str	r2, [r3, #12]
}
 80028e2:	46c0      	nop			@ (mov r8, r8)
 80028e4:	46bd      	mov	sp, r7
 80028e6:	b006      	add	sp, #24
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	46c0      	nop			@ (mov r8, r8)
 80028ec:	08005028 	.word	0x08005028
 80028f0:	0000fff0 	.word	0x0000fff0

080028f4 <LL_USART_IsActiveFlag_PE>:
  * @rmtoll ISR          PE            LL_USART_IsActiveFlag_PE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_PE(const USART_TypeDef *USARTx)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_PE) == (USART_ISR_PE)) ? 1UL : 0UL);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	69db      	ldr	r3, [r3, #28]
 8002900:	2201      	movs	r2, #1
 8002902:	4013      	ands	r3, r2
 8002904:	2b01      	cmp	r3, #1
 8002906:	d101      	bne.n	800290c <LL_USART_IsActiveFlag_PE+0x18>
 8002908:	2301      	movs	r3, #1
 800290a:	e000      	b.n	800290e <LL_USART_IsActiveFlag_PE+0x1a>
 800290c:	2300      	movs	r3, #0
}
 800290e:	0018      	movs	r0, r3
 8002910:	46bd      	mov	sp, r7
 8002912:	b002      	add	sp, #8
 8002914:	bd80      	pop	{r7, pc}

08002916 <LL_USART_IsActiveFlag_FE>:
  * @rmtoll ISR          FE            LL_USART_IsActiveFlag_FE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_FE(const USART_TypeDef *USARTx)
{
 8002916:	b580      	push	{r7, lr}
 8002918:	b082      	sub	sp, #8
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	69db      	ldr	r3, [r3, #28]
 8002922:	2202      	movs	r2, #2
 8002924:	4013      	ands	r3, r2
 8002926:	2b02      	cmp	r3, #2
 8002928:	d101      	bne.n	800292e <LL_USART_IsActiveFlag_FE+0x18>
 800292a:	2301      	movs	r3, #1
 800292c:	e000      	b.n	8002930 <LL_USART_IsActiveFlag_FE+0x1a>
 800292e:	2300      	movs	r3, #0
}
 8002930:	0018      	movs	r0, r3
 8002932:	46bd      	mov	sp, r7
 8002934:	b002      	add	sp, #8
 8002936:	bd80      	pop	{r7, pc}

08002938 <LL_USART_IsActiveFlag_NE>:
  * @rmtoll ISR          NE            LL_USART_IsActiveFlag_NE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_NE(const USART_TypeDef *USARTx)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	69db      	ldr	r3, [r3, #28]
 8002944:	2204      	movs	r2, #4
 8002946:	4013      	ands	r3, r2
 8002948:	2b04      	cmp	r3, #4
 800294a:	d101      	bne.n	8002950 <LL_USART_IsActiveFlag_NE+0x18>
 800294c:	2301      	movs	r3, #1
 800294e:	e000      	b.n	8002952 <LL_USART_IsActiveFlag_NE+0x1a>
 8002950:	2300      	movs	r3, #0
}
 8002952:	0018      	movs	r0, r3
 8002954:	46bd      	mov	sp, r7
 8002956:	b002      	add	sp, #8
 8002958:	bd80      	pop	{r7, pc}

0800295a <LL_USART_IsActiveFlag_ORE>:
  * @rmtoll ISR          ORE           LL_USART_IsActiveFlag_ORE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_ORE(const USART_TypeDef *USARTx)
{
 800295a:	b580      	push	{r7, lr}
 800295c:	b082      	sub	sp, #8
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	69db      	ldr	r3, [r3, #28]
 8002966:	2208      	movs	r2, #8
 8002968:	4013      	ands	r3, r2
 800296a:	2b08      	cmp	r3, #8
 800296c:	d101      	bne.n	8002972 <LL_USART_IsActiveFlag_ORE+0x18>
 800296e:	2301      	movs	r3, #1
 8002970:	e000      	b.n	8002974 <LL_USART_IsActiveFlag_ORE+0x1a>
 8002972:	2300      	movs	r3, #0
}
 8002974:	0018      	movs	r0, r3
 8002976:	46bd      	mov	sp, r7
 8002978:	b002      	add	sp, #8
 800297a:	bd80      	pop	{r7, pc}

0800297c <LL_USART_IsActiveFlag_IDLE>:
  * @rmtoll ISR          IDLE          LL_USART_IsActiveFlag_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(const USART_TypeDef *USARTx)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	69db      	ldr	r3, [r3, #28]
 8002988:	2210      	movs	r2, #16
 800298a:	4013      	ands	r3, r2
 800298c:	2b10      	cmp	r3, #16
 800298e:	d101      	bne.n	8002994 <LL_USART_IsActiveFlag_IDLE+0x18>
 8002990:	2301      	movs	r3, #1
 8002992:	e000      	b.n	8002996 <LL_USART_IsActiveFlag_IDLE+0x1a>
 8002994:	2300      	movs	r3, #0
}
 8002996:	0018      	movs	r0, r3
 8002998:	46bd      	mov	sp, r7
 800299a:	b002      	add	sp, #8
 800299c:	bd80      	pop	{r7, pc}

0800299e <LL_USART_IsActiveFlag_RXNE_RXFNE>:
  * @rmtoll ISR          RXNE_RXFNE    LL_USART_IsActiveFlag_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE_RXFNE(const USART_TypeDef *USARTx)
{
 800299e:	b580      	push	{r7, lr}
 80029a0:	b082      	sub	sp, #8
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	69db      	ldr	r3, [r3, #28]
 80029aa:	2220      	movs	r2, #32
 80029ac:	4013      	ands	r3, r2
 80029ae:	2b20      	cmp	r3, #32
 80029b0:	d101      	bne.n	80029b6 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x18>
 80029b2:	2301      	movs	r3, #1
 80029b4:	e000      	b.n	80029b8 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x1a>
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	0018      	movs	r0, r3
 80029ba:	46bd      	mov	sp, r7
 80029bc:	b002      	add	sp, #8
 80029be:	bd80      	pop	{r7, pc}

080029c0 <LL_USART_IsActiveFlag_TXE_TXFNF>:
  * @rmtoll ISR          TXE_TXFNF     LL_USART_IsActiveFlag_TXE_TXFNF
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE_TXFNF(const USART_TypeDef *USARTx)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	69db      	ldr	r3, [r3, #28]
 80029cc:	2280      	movs	r2, #128	@ 0x80
 80029ce:	4013      	ands	r3, r2
 80029d0:	2b80      	cmp	r3, #128	@ 0x80
 80029d2:	d101      	bne.n	80029d8 <LL_USART_IsActiveFlag_TXE_TXFNF+0x18>
 80029d4:	2301      	movs	r3, #1
 80029d6:	e000      	b.n	80029da <LL_USART_IsActiveFlag_TXE_TXFNF+0x1a>
 80029d8:	2300      	movs	r3, #0
}
 80029da:	0018      	movs	r0, r3
 80029dc:	46bd      	mov	sp, r7
 80029de:	b002      	add	sp, #8
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <LL_USART_IsActiveFlag_TEACK>:
  * @rmtoll ISR          TEACK         LL_USART_IsActiveFlag_TEACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(const USART_TypeDef *USARTx)
{
 80029e2:	b580      	push	{r7, lr}
 80029e4:	b082      	sub	sp, #8
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	69da      	ldr	r2, [r3, #28]
 80029ee:	2380      	movs	r3, #128	@ 0x80
 80029f0:	039b      	lsls	r3, r3, #14
 80029f2:	401a      	ands	r2, r3
 80029f4:	2380      	movs	r3, #128	@ 0x80
 80029f6:	039b      	lsls	r3, r3, #14
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d101      	bne.n	8002a00 <LL_USART_IsActiveFlag_TEACK+0x1e>
 80029fc:	2301      	movs	r3, #1
 80029fe:	e000      	b.n	8002a02 <LL_USART_IsActiveFlag_TEACK+0x20>
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	0018      	movs	r0, r3
 8002a04:	46bd      	mov	sp, r7
 8002a06:	b002      	add	sp, #8
 8002a08:	bd80      	pop	{r7, pc}

08002a0a <LL_USART_IsActiveFlag_REACK>:
  * @rmtoll ISR          REACK         LL_USART_IsActiveFlag_REACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(const USART_TypeDef *USARTx)
{
 8002a0a:	b580      	push	{r7, lr}
 8002a0c:	b082      	sub	sp, #8
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	69da      	ldr	r2, [r3, #28]
 8002a16:	2380      	movs	r3, #128	@ 0x80
 8002a18:	03db      	lsls	r3, r3, #15
 8002a1a:	401a      	ands	r2, r3
 8002a1c:	2380      	movs	r3, #128	@ 0x80
 8002a1e:	03db      	lsls	r3, r3, #15
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d101      	bne.n	8002a28 <LL_USART_IsActiveFlag_REACK+0x1e>
 8002a24:	2301      	movs	r3, #1
 8002a26:	e000      	b.n	8002a2a <LL_USART_IsActiveFlag_REACK+0x20>
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	0018      	movs	r0, r3
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	b002      	add	sp, #8
 8002a30:	bd80      	pop	{r7, pc}

08002a32 <LL_USART_ClearFlag_PE>:
  * @rmtoll ICR          PECF          LL_USART_ClearFlag_PE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_PE(USART_TypeDef *USARTx)
{
 8002a32:	b580      	push	{r7, lr}
 8002a34:	b082      	sub	sp, #8
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_PECF);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	621a      	str	r2, [r3, #32]
}
 8002a40:	46c0      	nop			@ (mov r8, r8)
 8002a42:	46bd      	mov	sp, r7
 8002a44:	b002      	add	sp, #8
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <LL_USART_ClearFlag_FE>:
  * @rmtoll ICR          FECF          LL_USART_ClearFlag_FE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_FE(USART_TypeDef *USARTx)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2202      	movs	r2, #2
 8002a54:	621a      	str	r2, [r3, #32]
}
 8002a56:	46c0      	nop			@ (mov r8, r8)
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	b002      	add	sp, #8
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <LL_USART_ClearFlag_NE>:
  * @rmtoll ICR          NECF          LL_USART_ClearFlag_NE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_NE(USART_TypeDef *USARTx)
{
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b082      	sub	sp, #8
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_NECF);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2204      	movs	r2, #4
 8002a6a:	621a      	str	r2, [r3, #32]
}
 8002a6c:	46c0      	nop			@ (mov r8, r8)
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	b002      	add	sp, #8
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <LL_USART_ClearFlag_ORE>:
  * @rmtoll ICR          ORECF         LL_USART_ClearFlag_ORE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2208      	movs	r2, #8
 8002a80:	621a      	str	r2, [r3, #32]
}
 8002a82:	46c0      	nop			@ (mov r8, r8)
 8002a84:	46bd      	mov	sp, r7
 8002a86:	b002      	add	sp, #8
 8002a88:	bd80      	pop	{r7, pc}

08002a8a <LL_USART_ClearFlag_IDLE>:
  * @rmtoll ICR          IDLECF        LL_USART_ClearFlag_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
{
 8002a8a:	b580      	push	{r7, lr}
 8002a8c:	b082      	sub	sp, #8
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2210      	movs	r2, #16
 8002a96:	621a      	str	r2, [r3, #32]
}
 8002a98:	46c0      	nop			@ (mov r8, r8)
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	b002      	add	sp, #8
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <LL_USART_ClearFlag_TXFE>:
  * @rmtoll ICR          TXFECF        LL_USART_ClearFlag_TXFE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_TXFE(USART_TypeDef *USARTx)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_TXFECF);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2220      	movs	r2, #32
 8002aac:	621a      	str	r2, [r3, #32]
}
 8002aae:	46c0      	nop			@ (mov r8, r8)
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	b002      	add	sp, #8
 8002ab4:	bd80      	pop	{r7, pc}

08002ab6 <LL_USART_EnableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	b086      	sub	sp, #24
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002abe:	f3ef 8310 	mrs	r3, PRIMASK
 8002ac2:	60bb      	str	r3, [r7, #8]
  return(result);
 8002ac4:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8002ac6:	617b      	str	r3, [r7, #20]
 8002ac8:	2301      	movs	r3, #1
 8002aca:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f383 8810 	msr	PRIMASK, r3
}
 8002ad2:	46c0      	nop			@ (mov r8, r8)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2210      	movs	r2, #16
 8002ada:	431a      	orrs	r2, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	601a      	str	r2, [r3, #0]
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	f383 8810 	msr	PRIMASK, r3
}
 8002aea:	46c0      	nop			@ (mov r8, r8)
}
 8002aec:	46c0      	nop			@ (mov r8, r8)
 8002aee:	46bd      	mov	sp, r7
 8002af0:	b006      	add	sp, #24
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <LL_USART_EnableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b086      	sub	sp, #24
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002afc:	f3ef 8310 	mrs	r3, PRIMASK
 8002b00:	60bb      	str	r3, [r7, #8]
  return(result);
 8002b02:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8002b04:	617b      	str	r3, [r7, #20]
 8002b06:	2301      	movs	r3, #1
 8002b08:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	f383 8810 	msr	PRIMASK, r3
}
 8002b10:	46c0      	nop			@ (mov r8, r8)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	2201      	movs	r2, #1
 8002b18:	431a      	orrs	r2, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	609a      	str	r2, [r3, #8]
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	f383 8810 	msr	PRIMASK, r3
}
 8002b28:	46c0      	nop			@ (mov r8, r8)
}
 8002b2a:	46c0      	nop			@ (mov r8, r8)
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	b006      	add	sp, #24
 8002b30:	bd80      	pop	{r7, pc}

08002b32 <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 8002b32:	b580      	push	{r7, lr}
 8002b34:	b086      	sub	sp, #24
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b3a:	f3ef 8310 	mrs	r3, PRIMASK
 8002b3e:	60bb      	str	r3, [r7, #8]
  return(result);
 8002b40:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8002b42:	617b      	str	r3, [r7, #20]
 8002b44:	2301      	movs	r3, #1
 8002b46:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f383 8810 	msr	PRIMASK, r3
}
 8002b4e:	46c0      	nop			@ (mov r8, r8)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	2240      	movs	r2, #64	@ 0x40
 8002b56:	431a      	orrs	r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	609a      	str	r2, [r3, #8]
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	f383 8810 	msr	PRIMASK, r3
}
 8002b66:	46c0      	nop			@ (mov r8, r8)
}
 8002b68:	46c0      	nop			@ (mov r8, r8)
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	b006      	add	sp, #24
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b7c:	b2db      	uxtb	r3, r3
}
 8002b7e:	0018      	movs	r0, r3
 8002b80:	46bd      	mov	sp, r7
 8002b82:	b002      	add	sp, #8
 8002b84:	bd80      	pop	{r7, pc}

08002b86 <LL_GPIO_SetPinMode>:
{
 8002b86:	b580      	push	{r7, lr}
 8002b88:	b084      	sub	sp, #16
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	60f8      	str	r0, [r7, #12]
 8002b8e:	60b9      	str	r1, [r7, #8]
 8002b90:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	6819      	ldr	r1, [r3, #0]
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	435b      	muls	r3, r3
 8002b9a:	001a      	movs	r2, r3
 8002b9c:	0013      	movs	r3, r2
 8002b9e:	005b      	lsls	r3, r3, #1
 8002ba0:	189b      	adds	r3, r3, r2
 8002ba2:	43db      	mvns	r3, r3
 8002ba4:	400b      	ands	r3, r1
 8002ba6:	001a      	movs	r2, r3
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	435b      	muls	r3, r3
 8002bac:	6879      	ldr	r1, [r7, #4]
 8002bae:	434b      	muls	r3, r1
 8002bb0:	431a      	orrs	r2, r3
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	601a      	str	r2, [r3, #0]
}
 8002bb6:	46c0      	nop			@ (mov r8, r8)
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	b004      	add	sp, #16
 8002bbc:	bd80      	pop	{r7, pc}

08002bbe <LL_GPIO_SetPinOutputType>:
{
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b084      	sub	sp, #16
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	60f8      	str	r0, [r7, #12]
 8002bc6:	60b9      	str	r1, [r7, #8]
 8002bc8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	68ba      	ldr	r2, [r7, #8]
 8002bd0:	43d2      	mvns	r2, r2
 8002bd2:	401a      	ands	r2, r3
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	6879      	ldr	r1, [r7, #4]
 8002bd8:	434b      	muls	r3, r1
 8002bda:	431a      	orrs	r2, r3
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	605a      	str	r2, [r3, #4]
}
 8002be0:	46c0      	nop			@ (mov r8, r8)
 8002be2:	46bd      	mov	sp, r7
 8002be4:	b004      	add	sp, #16
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <LL_GPIO_SetPinSpeed>:
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6899      	ldr	r1, [r3, #8]
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	435b      	muls	r3, r3
 8002bfc:	001a      	movs	r2, r3
 8002bfe:	0013      	movs	r3, r2
 8002c00:	005b      	lsls	r3, r3, #1
 8002c02:	189b      	adds	r3, r3, r2
 8002c04:	43db      	mvns	r3, r3
 8002c06:	400b      	ands	r3, r1
 8002c08:	001a      	movs	r2, r3
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	435b      	muls	r3, r3
 8002c0e:	6879      	ldr	r1, [r7, #4]
 8002c10:	434b      	muls	r3, r1
 8002c12:	431a      	orrs	r2, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	609a      	str	r2, [r3, #8]
}
 8002c18:	46c0      	nop			@ (mov r8, r8)
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	b004      	add	sp, #16
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <LL_GPIO_SetPinPull>:
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	60b9      	str	r1, [r7, #8]
 8002c2a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	68d9      	ldr	r1, [r3, #12]
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	435b      	muls	r3, r3
 8002c34:	001a      	movs	r2, r3
 8002c36:	0013      	movs	r3, r2
 8002c38:	005b      	lsls	r3, r3, #1
 8002c3a:	189b      	adds	r3, r3, r2
 8002c3c:	43db      	mvns	r3, r3
 8002c3e:	400b      	ands	r3, r1
 8002c40:	001a      	movs	r2, r3
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	435b      	muls	r3, r3
 8002c46:	6879      	ldr	r1, [r7, #4]
 8002c48:	434b      	muls	r3, r1
 8002c4a:	431a      	orrs	r2, r3
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	60da      	str	r2, [r3, #12]
}
 8002c50:	46c0      	nop			@ (mov r8, r8)
 8002c52:	46bd      	mov	sp, r7
 8002c54:	b004      	add	sp, #16
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <LL_GPIO_SetAFPin_0_7>:
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6a19      	ldr	r1, [r3, #32]
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	435b      	muls	r3, r3
 8002c6c:	68ba      	ldr	r2, [r7, #8]
 8002c6e:	4353      	muls	r3, r2
 8002c70:	68ba      	ldr	r2, [r7, #8]
 8002c72:	435a      	muls	r2, r3
 8002c74:	0013      	movs	r3, r2
 8002c76:	011b      	lsls	r3, r3, #4
 8002c78:	1a9b      	subs	r3, r3, r2
 8002c7a:	43db      	mvns	r3, r3
 8002c7c:	400b      	ands	r3, r1
 8002c7e:	001a      	movs	r2, r3
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	435b      	muls	r3, r3
 8002c84:	68b9      	ldr	r1, [r7, #8]
 8002c86:	434b      	muls	r3, r1
 8002c88:	68b9      	ldr	r1, [r7, #8]
 8002c8a:	434b      	muls	r3, r1
 8002c8c:	6879      	ldr	r1, [r7, #4]
 8002c8e:	434b      	muls	r3, r1
 8002c90:	431a      	orrs	r2, r3
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	621a      	str	r2, [r3, #32]
}
 8002c96:	46c0      	nop			@ (mov r8, r8)
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	b004      	add	sp, #16
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <LL_GPIO_SetAFPin_8_15>:
{
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b084      	sub	sp, #16
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	60f8      	str	r0, [r7, #12]
 8002ca6:	60b9      	str	r1, [r7, #8]
 8002ca8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	0a1b      	lsrs	r3, r3, #8
 8002cb2:	68ba      	ldr	r2, [r7, #8]
 8002cb4:	0a12      	lsrs	r2, r2, #8
 8002cb6:	4353      	muls	r3, r2
 8002cb8:	68ba      	ldr	r2, [r7, #8]
 8002cba:	0a12      	lsrs	r2, r2, #8
 8002cbc:	4353      	muls	r3, r2
 8002cbe:	68ba      	ldr	r2, [r7, #8]
 8002cc0:	0a12      	lsrs	r2, r2, #8
 8002cc2:	435a      	muls	r2, r3
 8002cc4:	0013      	movs	r3, r2
 8002cc6:	011b      	lsls	r3, r3, #4
 8002cc8:	1a9b      	subs	r3, r3, r2
 8002cca:	43db      	mvns	r3, r3
 8002ccc:	400b      	ands	r3, r1
 8002cce:	001a      	movs	r2, r3
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	0a1b      	lsrs	r3, r3, #8
 8002cd4:	68b9      	ldr	r1, [r7, #8]
 8002cd6:	0a09      	lsrs	r1, r1, #8
 8002cd8:	434b      	muls	r3, r1
 8002cda:	68b9      	ldr	r1, [r7, #8]
 8002cdc:	0a09      	lsrs	r1, r1, #8
 8002cde:	434b      	muls	r3, r1
 8002ce0:	68b9      	ldr	r1, [r7, #8]
 8002ce2:	0a09      	lsrs	r1, r1, #8
 8002ce4:	434b      	muls	r3, r1
 8002ce6:	6879      	ldr	r1, [r7, #4]
 8002ce8:	434b      	muls	r3, r1
 8002cea:	431a      	orrs	r2, r3
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8002cf0:	46c0      	nop			@ (mov r8, r8)
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	b004      	add	sp, #16
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <LL_GPIO_ResetOutputPin>:
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	683a      	ldr	r2, [r7, #0]
 8002d06:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002d08:	46c0      	nop			@ (mov r8, r8)
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	b002      	add	sp, #8
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <USART1_setup>:
static void USARTx_Init(USART_TypeDef *USARTx,uint32_t baudrate);
static void USARTx_DMA_RX_Init(USART_TypeDef *USARTx,const DMA_TypeDef *DMAx, uint32_t Channel,  uint32_t Request,uint8_t* rx_bufer,uint16_t rx_bufer_size );
static void USARTx_DMA_TX_Init(USART_TypeDef *USARTx,const DMA_TypeDef *DMAx, uint32_t Channel,  uint32_t Request,uint8_t* tx_bufer,uint16_t tx_bufer_size );


void USART1_setup(uint32_t baudrate) {
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af02      	add	r7, sp, #8
 8002d16:	6078      	str	r0, [r7, #4]
	USART1_deinit();
 8002d18:	f000 f86e 	bl	8002df8 <USART1_deinit>

	USART1_GPIO_Init();
 8002d1c:	f000 fa96 	bl	800324c <USART1_GPIO_Init>
	USART1_CLK_ENABLE();
 8002d20:	2380      	movs	r3, #128	@ 0x80
 8002d22:	01db      	lsls	r3, r3, #7
 8002d24:	0018      	movs	r0, r3
 8002d26:	f7ff fc9b 	bl	8002660 <LL_APB2_GRP1_EnableClock>
	USARTx_Init(USART1, baudrate);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a12      	ldr	r2, [pc, #72]	@ (8002d78 <USART1_setup+0x68>)
 8002d2e:	0019      	movs	r1, r3
 8002d30:	0010      	movs	r0, r2
 8002d32:	f000 fb23 	bl	800337c <USARTx_Init>

#if USART1_ENABLE_RX_DMA
	LL_USART_EnableIT_IDLE(USART1);
 8002d36:	4b10      	ldr	r3, [pc, #64]	@ (8002d78 <USART1_setup+0x68>)
 8002d38:	0018      	movs	r0, r3
 8002d3a:	f7ff febc 	bl	8002ab6 <LL_USART_EnableIT_IDLE>
#else
	LL_USART_EnableIT_RXNE_RXFNE(USART1);
#endif
	LL_USART_EnableIT_ERROR(USART1); // Bật ngắt lỗi
 8002d3e:	4b0e      	ldr	r3, [pc, #56]	@ (8002d78 <USART1_setup+0x68>)
 8002d40:	0018      	movs	r0, r3
 8002d42:	f7ff fed7 	bl	8002af4 <LL_USART_EnableIT_ERROR>
	NVIC_SetPriority(USART1_IRQn, 1);
 8002d46:	2101      	movs	r1, #1
 8002d48:	201b      	movs	r0, #27
 8002d4a:	f7ff fabf 	bl	80022cc <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART1_IRQn);
 8002d4e:	201b      	movs	r0, #27
 8002d50:	f7ff fa80 	bl	8002254 <__NVIC_EnableIRQ>

#if USART1_ENABLE_RX_DMA
	DMA1_Channelx_DeInit(USART1_RX_DMA_CHANEL);
 8002d54:	2000      	movs	r0, #0
 8002d56:	f000 fb91 	bl	800347c <DMA1_Channelx_DeInit>
	USARTx_DMA_RX_Init(USART1, USART1_RX_DMA, USART1_RX_DMA_CHANEL, USART1_RX_DMA_DMAMUX_REQ, usart1_rxBuffer, USART1_RX_BUFFER_SIZE);
 8002d5a:	4908      	ldr	r1, [pc, #32]	@ (8002d7c <USART1_setup+0x6c>)
 8002d5c:	4806      	ldr	r0, [pc, #24]	@ (8002d78 <USART1_setup+0x68>)
 8002d5e:	2380      	movs	r3, #128	@ 0x80
 8002d60:	00db      	lsls	r3, r3, #3
 8002d62:	9301      	str	r3, [sp, #4]
 8002d64:	4b06      	ldr	r3, [pc, #24]	@ (8002d80 <USART1_setup+0x70>)
 8002d66:	9300      	str	r3, [sp, #0]
 8002d68:	2332      	movs	r3, #50	@ 0x32
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f000 fb46 	bl	80033fc <USARTx_DMA_RX_Init>
	NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn, 1);
	NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn);
	USARTx_DMA_TX_Init(USART1, USART1_TX_DMA, USART1_TX_DMA_CHANEL, USART1_TX_DMA_DMAMUX_REQ, usart1_txBuffer, USART1_TX_BUFFER_SIZE);
#endif

}
 8002d70:	46c0      	nop			@ (mov r8, r8)
 8002d72:	46bd      	mov	sp, r7
 8002d74:	b002      	add	sp, #8
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	40013800 	.word	0x40013800
 8002d7c:	40020000 	.word	0x40020000
 8002d80:	200004b4 	.word	0x200004b4

08002d84 <USART3_setup>:

void USART3_setup(uint32_t baudrate) {
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af02      	add	r7, sp, #8
 8002d8a:	6078      	str	r0, [r7, #4]
	USART3_deinit();
 8002d8c:	f000 f862 	bl	8002e54 <USART3_deinit>

	USART3_GPIO_Init();
 8002d90:	f000 fab0 	bl	80032f4 <USART3_GPIO_Init>
	USART3_CLK_ENABLE();
 8002d94:	2380      	movs	r3, #128	@ 0x80
 8002d96:	02db      	lsls	r3, r3, #11
 8002d98:	0018      	movs	r0, r3
 8002d9a:	f7ff fc17 	bl	80025cc <LL_APB1_GRP1_EnableClock>
	USARTx_Init(USART3, baudrate);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a12      	ldr	r2, [pc, #72]	@ (8002dec <USART3_setup+0x68>)
 8002da2:	0019      	movs	r1, r3
 8002da4:	0010      	movs	r0, r2
 8002da6:	f000 fae9 	bl	800337c <USARTx_Init>
#if USART3_ENABLE_RX_DMA
	LL_USART_EnableIT_IDLE(USART3);
 8002daa:	4b10      	ldr	r3, [pc, #64]	@ (8002dec <USART3_setup+0x68>)
 8002dac:	0018      	movs	r0, r3
 8002dae:	f7ff fe82 	bl	8002ab6 <LL_USART_EnableIT_IDLE>
#else
	LL_USART_EnableIT_RXNE_RXFNE(USART3);
#endif
	LL_USART_EnableIT_ERROR(USART3);
 8002db2:	4b0e      	ldr	r3, [pc, #56]	@ (8002dec <USART3_setup+0x68>)
 8002db4:	0018      	movs	r0, r3
 8002db6:	f7ff fe9d 	bl	8002af4 <LL_USART_EnableIT_ERROR>
	NVIC_SetPriority(USART3_4_5_6_IRQn, 1);
 8002dba:	2101      	movs	r1, #1
 8002dbc:	201d      	movs	r0, #29
 8002dbe:	f7ff fa85 	bl	80022cc <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART3_4_5_6_IRQn);
 8002dc2:	201d      	movs	r0, #29
 8002dc4:	f7ff fa46 	bl	8002254 <__NVIC_EnableIRQ>
#if USART3_ENABLE_RX_DMA
	DMA1_Channelx_DeInit(USART3_RX_DMA_CHANEL);
 8002dc8:	2001      	movs	r0, #1
 8002dca:	f000 fb57 	bl	800347c <DMA1_Channelx_DeInit>
	USARTx_DMA_RX_Init(USART3, USART3_RX_DMA, USART3_RX_DMA_CHANEL, USART3_RX_DMA_DMAMUX_REQ, usart3_rxBuffer, USART3_RX_BUFFER_SIZE);
 8002dce:	4908      	ldr	r1, [pc, #32]	@ (8002df0 <USART3_setup+0x6c>)
 8002dd0:	4806      	ldr	r0, [pc, #24]	@ (8002dec <USART3_setup+0x68>)
 8002dd2:	2380      	movs	r3, #128	@ 0x80
 8002dd4:	00db      	lsls	r3, r3, #3
 8002dd6:	9301      	str	r3, [sp, #4]
 8002dd8:	4b06      	ldr	r3, [pc, #24]	@ (8002df4 <USART3_setup+0x70>)
 8002dda:	9300      	str	r3, [sp, #0]
 8002ddc:	2336      	movs	r3, #54	@ 0x36
 8002dde:	2201      	movs	r2, #1
 8002de0:	f000 fb0c 	bl	80033fc <USARTx_DMA_RX_Init>
	DMA1_Channelx_DeInit(USART3_TX_DMA_CHANEL);
	NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn, 1);
	NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn);
	USARTx_DMA_TX_Init(USART3, USART3_TX_DMA, USART3_TX_DMA_CHANEL, USART3_TX_DMA_DMAMUX_REQ, USART3_txBuffer, USART3_TX_BUFFER_SIZE);
#endif
}
 8002de4:	46c0      	nop			@ (mov r8, r8)
 8002de6:	46bd      	mov	sp, r7
 8002de8:	b002      	add	sp, #8
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	40004800 	.word	0x40004800
 8002df0:	40020000 	.word	0x40020000
 8002df4:	200008b4 	.word	0x200008b4

08002df8 <USART1_deinit>:

void USART1_deinit() {
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	af00      	add	r7, sp, #0
	LL_USART_Disable(USART1);
 8002dfc:	4b14      	ldr	r3, [pc, #80]	@ (8002e50 <USART1_deinit+0x58>)
 8002dfe:	0018      	movs	r0, r3
 8002e00:	f7ff fc9c 	bl	800273c <LL_USART_Disable>
	NVIC_DisableIRQ(USART1_IRQn);
 8002e04:	201b      	movs	r0, #27
 8002e06:	f7ff fa3f 	bl	8002288 <__NVIC_DisableIRQ>

	LL_APB2_GRP1_ForceReset(LL_APB2_GRP1_PERIPH_USART1);
 8002e0a:	2380      	movs	r3, #128	@ 0x80
 8002e0c:	01db      	lsls	r3, r3, #7
 8002e0e:	0018      	movs	r0, r3
 8002e10:	f7ff fc4e 	bl	80026b0 <LL_APB2_GRP1_ForceReset>
	LL_APB2_GRP1_ReleaseReset(LL_APB2_GRP1_PERIPH_USART1);
 8002e14:	2380      	movs	r3, #128	@ 0x80
 8002e16:	01db      	lsls	r3, r3, #7
 8002e18:	0018      	movs	r0, r3
 8002e1a:	f7ff fc59 	bl	80026d0 <LL_APB2_GRP1_ReleaseReset>
	LL_APB2_GRP1_DisableClock(LL_APB2_GRP1_PERIPH_USART1);
 8002e1e:	2380      	movs	r3, #128	@ 0x80
 8002e20:	01db      	lsls	r3, r3, #7
 8002e22:	0018      	movs	r0, r3
 8002e24:	f7ff fc32 	bl	800268c <LL_APB2_GRP1_DisableClock>

	LL_GPIO_ResetOutputPin(USART1_TX_GPIO_Port, USART1_TX_Pin); // TX
 8002e28:	2380      	movs	r3, #128	@ 0x80
 8002e2a:	009a      	lsls	r2, r3, #2
 8002e2c:	23a0      	movs	r3, #160	@ 0xa0
 8002e2e:	05db      	lsls	r3, r3, #23
 8002e30:	0011      	movs	r1, r2
 8002e32:	0018      	movs	r0, r3
 8002e34:	f7ff ff60 	bl	8002cf8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(USART1_RX_GPIO_Port, USART1_RX_Pin); // RX
 8002e38:	2380      	movs	r3, #128	@ 0x80
 8002e3a:	00da      	lsls	r2, r3, #3
 8002e3c:	23a0      	movs	r3, #160	@ 0xa0
 8002e3e:	05db      	lsls	r3, r3, #23
 8002e40:	0011      	movs	r1, r2
 8002e42:	0018      	movs	r0, r3
 8002e44:	f7ff ff58 	bl	8002cf8 <LL_GPIO_ResetOutputPin>
}
 8002e48:	46c0      	nop			@ (mov r8, r8)
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	46c0      	nop			@ (mov r8, r8)
 8002e50:	40013800 	.word	0x40013800

08002e54 <USART3_deinit>:
void USART3_deinit() {
 8002e54:	b580      	push	{r7, lr}
 8002e56:	af00      	add	r7, sp, #0
	LL_USART_Disable(USART3);
 8002e58:	4b11      	ldr	r3, [pc, #68]	@ (8002ea0 <USART3_deinit+0x4c>)
 8002e5a:	0018      	movs	r0, r3
 8002e5c:	f7ff fc6e 	bl	800273c <LL_USART_Disable>
	NVIC_DisableIRQ(USART3_4_5_6_IRQn);
 8002e60:	201d      	movs	r0, #29
 8002e62:	f7ff fa11 	bl	8002288 <__NVIC_DisableIRQ>

	LL_APB1_GRP1_ForceReset(LL_APB1_GRP1_PERIPH_USART3);
 8002e66:	2380      	movs	r3, #128	@ 0x80
 8002e68:	02db      	lsls	r3, r3, #11
 8002e6a:	0018      	movs	r0, r3
 8002e6c:	f7ff fbd6 	bl	800261c <LL_APB1_GRP1_ForceReset>
	LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_USART3);
 8002e70:	2380      	movs	r3, #128	@ 0x80
 8002e72:	02db      	lsls	r3, r3, #11
 8002e74:	0018      	movs	r0, r3
 8002e76:	f7ff fbe1 	bl	800263c <LL_APB1_GRP1_ReleaseReset>
	LL_APB1_GRP1_DisableClock(LL_APB1_GRP1_PERIPH_USART3);
 8002e7a:	2380      	movs	r3, #128	@ 0x80
 8002e7c:	02db      	lsls	r3, r3, #11
 8002e7e:	0018      	movs	r0, r3
 8002e80:	f7ff fbba 	bl	80025f8 <LL_APB1_GRP1_DisableClock>

	LL_GPIO_ResetOutputPin(USART3_TX_GPIO_Port, USART3_TX_Pin); // TX
 8002e84:	4b07      	ldr	r3, [pc, #28]	@ (8002ea4 <USART3_deinit+0x50>)
 8002e86:	2110      	movs	r1, #16
 8002e88:	0018      	movs	r0, r3
 8002e8a:	f7ff ff35 	bl	8002cf8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(USART3_RX_GPIO_Port, USART3_RX_Pin); // RX
 8002e8e:	4b05      	ldr	r3, [pc, #20]	@ (8002ea4 <USART3_deinit+0x50>)
 8002e90:	2120      	movs	r1, #32
 8002e92:	0018      	movs	r0, r3
 8002e94:	f7ff ff30 	bl	8002cf8 <LL_GPIO_ResetOutputPin>
}
 8002e98:	46c0      	nop			@ (mov r8, r8)
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	46c0      	nop			@ (mov r8, r8)
 8002ea0:	40004800 	.word	0x40004800
 8002ea4:	50000800 	.word	0x50000800

08002ea8 <USART1_putchar>:


void USART1_putchar(uint8_t c){
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	0002      	movs	r2, r0
 8002eb0:	1dfb      	adds	r3, r7, #7
 8002eb2:	701a      	strb	r2, [r3, #0]
	while ((USART1->ISR & USART_ISR_TXE_TXFNF) != USART_ISR_TXE_TXFNF);
 8002eb4:	46c0      	nop			@ (mov r8, r8)
 8002eb6:	4b07      	ldr	r3, [pc, #28]	@ (8002ed4 <USART1_putchar+0x2c>)
 8002eb8:	69db      	ldr	r3, [r3, #28]
 8002eba:	2280      	movs	r2, #128	@ 0x80
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	2b80      	cmp	r3, #128	@ 0x80
 8002ec0:	d1f9      	bne.n	8002eb6 <USART1_putchar+0xe>
	USART1->TDR = c;
 8002ec2:	4b04      	ldr	r3, [pc, #16]	@ (8002ed4 <USART1_putchar+0x2c>)
 8002ec4:	1dfa      	adds	r2, r7, #7
 8002ec6:	7812      	ldrb	r2, [r2, #0]
 8002ec8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002eca:	46c0      	nop			@ (mov r8, r8)
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	b002      	add	sp, #8
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	46c0      	nop			@ (mov r8, r8)
 8002ed4:	40013800 	.word	0x40013800

08002ed8 <USART3_putchar>:

void USART3_putchar(uint8_t c){
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	0002      	movs	r2, r0
 8002ee0:	1dfb      	adds	r3, r7, #7
 8002ee2:	701a      	strb	r2, [r3, #0]
	while ((USART3->ISR & USART_ISR_TXE_TXFNF) != USART_ISR_TXE_TXFNF);
 8002ee4:	46c0      	nop			@ (mov r8, r8)
 8002ee6:	4b07      	ldr	r3, [pc, #28]	@ (8002f04 <USART3_putchar+0x2c>)
 8002ee8:	69db      	ldr	r3, [r3, #28]
 8002eea:	2280      	movs	r2, #128	@ 0x80
 8002eec:	4013      	ands	r3, r2
 8002eee:	2b80      	cmp	r3, #128	@ 0x80
 8002ef0:	d1f9      	bne.n	8002ee6 <USART3_putchar+0xe>
	USART3->TDR = c;
 8002ef2:	4b04      	ldr	r3, [pc, #16]	@ (8002f04 <USART3_putchar+0x2c>)
 8002ef4:	1dfa      	adds	r2, r7, #7
 8002ef6:	7812      	ldrb	r2, [r2, #0]
 8002ef8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002efa:	46c0      	nop			@ (mov r8, r8)
 8002efc:	46bd      	mov	sp, r7
 8002efe:	b002      	add	sp, #8
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	46c0      	nop			@ (mov r8, r8)
 8002f04:	40004800 	.word	0x40004800

08002f08 <USART1_TX_transmit>:


void USART1_TX_transmit(uint8_t *str, uint16_t len, uint32_t timeout) {
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b086      	sub	sp, #24
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	607a      	str	r2, [r7, #4]
 8002f12:	230a      	movs	r3, #10
 8002f14:	18fb      	adds	r3, r7, r3
 8002f16:	1c0a      	adds	r2, r1, #0
 8002f18:	801a      	strh	r2, [r3, #0]
		LL_USART_ClearFlag_TC(USART1);
		LL_DMA_EnableChannel(USART1_TX_DMA, USART1_TX_DMA_CHANEL);
		usart1_transmit_busy = u32MiliCount;
	}
#else
	for(int i =0;i< len;i++){
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	617b      	str	r3, [r7, #20]
 8002f1e:	e00a      	b.n	8002f36 <USART1_TX_transmit+0x2e>
		USART1_putchar(*str);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	0018      	movs	r0, r3
 8002f26:	f7ff ffbf 	bl	8002ea8 <USART1_putchar>
				str++;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	60fb      	str	r3, [r7, #12]
	for(int i =0;i< len;i++){
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	3301      	adds	r3, #1
 8002f34:	617b      	str	r3, [r7, #20]
 8002f36:	230a      	movs	r3, #10
 8002f38:	18fb      	adds	r3, r7, r3
 8002f3a:	881b      	ldrh	r3, [r3, #0]
 8002f3c:	697a      	ldr	r2, [r7, #20]
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	dbee      	blt.n	8002f20 <USART1_TX_transmit+0x18>
	}
#endif
}
 8002f42:	46c0      	nop			@ (mov r8, r8)
 8002f44:	46c0      	nop			@ (mov r8, r8)
 8002f46:	46bd      	mov	sp, r7
 8002f48:	b006      	add	sp, #24
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <USART3_TX_transmit>:


void USART3_TX_transmit(uint8_t *str, uint16_t len, uint32_t timeout) {
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b086      	sub	sp, #24
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	607a      	str	r2, [r7, #4]
 8002f56:	230a      	movs	r3, #10
 8002f58:	18fb      	adds	r3, r7, r3
 8002f5a:	1c0a      	adds	r2, r1, #0
 8002f5c:	801a      	strh	r2, [r3, #0]
		LL_USART_ClearFlag_TC(USART3);
		LL_DMA_EnableChannel(USART3_TX_DMA, USART3_TX_DMA_CHANEL);
		USART3_transmit_busy = 1;
	}
#else
	for(int i =0;i< len;i++){
 8002f5e:	2300      	movs	r3, #0
 8002f60:	617b      	str	r3, [r7, #20]
 8002f62:	e00a      	b.n	8002f7a <USART3_TX_transmit+0x2e>
		USART3_putchar(*str);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	0018      	movs	r0, r3
 8002f6a:	f7ff ffb5 	bl	8002ed8 <USART3_putchar>
				str++;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	3301      	adds	r3, #1
 8002f72:	60fb      	str	r3, [r7, #12]
	for(int i =0;i< len;i++){
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	3301      	adds	r3, #1
 8002f78:	617b      	str	r3, [r7, #20]
 8002f7a:	230a      	movs	r3, #10
 8002f7c:	18fb      	adds	r3, r7, r3
 8002f7e:	881b      	ldrh	r3, [r3, #0]
 8002f80:	697a      	ldr	r2, [r7, #20]
 8002f82:	429a      	cmp	r2, r3
 8002f84:	dbee      	blt.n	8002f64 <USART3_TX_transmit+0x18>
	}
#endif
}
 8002f86:	46c0      	nop			@ (mov r8, r8)
 8002f88:	46c0      	nop			@ (mov r8, r8)
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	b006      	add	sp, #24
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <USART1_TX_callback>:
#endif
}



void USART1_TX_callback(void) {
 8002f90:	b580      	push	{r7, lr}
 8002f92:	af00      	add	r7, sp, #0
		LL_DMA_ClearFlag_TC4(USART1_TX_DMA);
		LL_DMA_DisableChannel(USART1_TX_DMA, USART1_TX_DMA_CHANEL);
		usart1_transmit_busy = 0;
	}
#endif
}
 8002f94:	46c0      	nop			@ (mov r8, r8)
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <USART3_TX_callback>:

void USART3_TX_callback(void) {
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	af00      	add	r7, sp, #0
		LL_DMA_ClearFlag_TC5(USART3_TX_DMA);
		LL_DMA_DisableChannel(USART3_TX_DMA, USART3_TX_DMA_CHANEL);
		USART3_transmit_busy = 0;
	}
#endif
}
 8002f9e:	46c0      	nop			@ (mov r8, r8)
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <LPUART1_TX_callback>:


void LPUART1_TX_callback(void) {
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	af00      	add	r7, sp, #0
		LL_DMA_ClearFlag_TC6(LPUART1_TX_DMA);
		LL_DMA_DisableChannel(LPUART1_TX_DMA, LPUART1_TX_DMA_CHANEL);
		lpuart1_transmit_busy = 0;
	}
#endif
}
 8002fa8:	46c0      	nop			@ (mov r8, r8)
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
	...

08002fb0 <USART1_callback>:

void USART1_callback(void) {
 8002fb0:	b590      	push	{r4, r7, lr}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
	uint8_t cChar = 0;
 8002fb6:	1dfb      	adds	r3, r7, #7
 8002fb8:	2200      	movs	r2, #0
 8002fba:	701a      	strb	r2, [r3, #0]
	if (LL_USART_IsActiveFlag_IDLE(USART1)) {
 8002fbc:	4b4b      	ldr	r3, [pc, #300]	@ (80030ec <USART1_callback+0x13c>)
 8002fbe:	0018      	movs	r0, r3
 8002fc0:	f7ff fcdc 	bl	800297c <LL_USART_IsActiveFlag_IDLE>
 8002fc4:	1e03      	subs	r3, r0, #0
 8002fc6:	d02e      	beq.n	8003026 <USART1_callback+0x76>

#if USART1_ENABLE_RX_DMA
		/* Disable and Re-enable DMA to reset the buffer */
		LL_DMA_DisableChannel(USART1_RX_DMA, USART1_RX_DMA_CHANEL);
 8002fc8:	4b49      	ldr	r3, [pc, #292]	@ (80030f0 <USART1_callback+0x140>)
 8002fca:	2100      	movs	r1, #0
 8002fcc:	0018      	movs	r0, r3
 8002fce:	f7ff fa0b 	bl	80023e8 <LL_DMA_DisableChannel>
		uint16_t remainingBytes = LL_DMA_GetDataLength(USART1_RX_DMA, USART1_RX_DMA_CHANEL);
 8002fd2:	4b47      	ldr	r3, [pc, #284]	@ (80030f0 <USART1_callback+0x140>)
 8002fd4:	2100      	movs	r1, #0
 8002fd6:	0018      	movs	r0, r3
 8002fd8:	f7ff fa6e 	bl	80024b8 <LL_DMA_GetDataLength>
 8002fdc:	0002      	movs	r2, r0
 8002fde:	1d3b      	adds	r3, r7, #4
 8002fe0:	801a      	strh	r2, [r3, #0]
		uint16_t receivedLength = USART1_RX_BUFFER_SIZE - remainingBytes;
 8002fe2:	1cbb      	adds	r3, r7, #2
 8002fe4:	1d3a      	adds	r2, r7, #4
 8002fe6:	8812      	ldrh	r2, [r2, #0]
 8002fe8:	2180      	movs	r1, #128	@ 0x80
 8002fea:	00c9      	lsls	r1, r1, #3
 8002fec:	1a8a      	subs	r2, r1, r2
 8002fee:	801a      	strh	r2, [r3, #0]

		if (receivedLength > 0) {
 8002ff0:	1cbb      	adds	r3, r7, #2
 8002ff2:	881b      	ldrh	r3, [r3, #0]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d006      	beq.n	8003006 <USART1_callback+0x56>
			putcomdata(usart1_rxBuffer, receivedLength, source_485);
 8002ff8:	1cbb      	adds	r3, r7, #2
 8002ffa:	8819      	ldrh	r1, [r3, #0]
 8002ffc:	4b3d      	ldr	r3, [pc, #244]	@ (80030f4 <USART1_callback+0x144>)
 8002ffe:	2201      	movs	r2, #1
 8003000:	0018      	movs	r0, r3
 8003002:	f000 fd1f 	bl	8003a44 <putcomdata>
		}

		/* Process received data */
		/* Restart DMA */
		LL_DMA_SetDataLength(USART1_RX_DMA, USART1_RX_DMA_CHANEL, USART1_RX_BUFFER_SIZE);
 8003006:	2380      	movs	r3, #128	@ 0x80
 8003008:	00db      	lsls	r3, r3, #3
 800300a:	4839      	ldr	r0, [pc, #228]	@ (80030f0 <USART1_callback+0x140>)
 800300c:	001a      	movs	r2, r3
 800300e:	2100      	movs	r1, #0
 8003010:	f7ff fa30 	bl	8002474 <LL_DMA_SetDataLength>
		LL_DMA_EnableChannel(USART1_RX_DMA, USART1_RX_DMA_CHANEL);
 8003014:	4b36      	ldr	r3, [pc, #216]	@ (80030f0 <USART1_callback+0x140>)
 8003016:	2100      	movs	r1, #0
 8003018:	0018      	movs	r0, r3
 800301a:	f7ff f9c5 	bl	80023a8 <LL_DMA_EnableChannel>
#endif
		LL_USART_ClearFlag_IDLE(USART1);  // Clear flag
 800301e:	4b33      	ldr	r3, [pc, #204]	@ (80030ec <USART1_callback+0x13c>)
 8003020:	0018      	movs	r0, r3
 8003022:	f7ff fd32 	bl	8002a8a <LL_USART_ClearFlag_IDLE>
	}
	if (LL_USART_IsActiveFlag_RXNE_RXFNE(USART1)) {
 8003026:	4b31      	ldr	r3, [pc, #196]	@ (80030ec <USART1_callback+0x13c>)
 8003028:	0018      	movs	r0, r3
 800302a:	f7ff fcb8 	bl	800299e <LL_USART_IsActiveFlag_RXNE_RXFNE>
 800302e:	1e03      	subs	r3, r0, #0
 8003030:	d009      	beq.n	8003046 <USART1_callback+0x96>
		cChar = USART1->RDR;
 8003032:	4b2e      	ldr	r3, [pc, #184]	@ (80030ec <USART1_callback+0x13c>)
 8003034:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003036:	1dfb      	adds	r3, r7, #7
 8003038:	701a      	strb	r2, [r3, #0]
		USART1->ICR |= USART_RQR_RXFRQ;
 800303a:	4b2c      	ldr	r3, [pc, #176]	@ (80030ec <USART1_callback+0x13c>)
 800303c:	6a1a      	ldr	r2, [r3, #32]
 800303e:	4b2b      	ldr	r3, [pc, #172]	@ (80030ec <USART1_callback+0x13c>)
 8003040:	2108      	movs	r1, #8
 8003042:	430a      	orrs	r2, r1
 8003044:	621a      	str	r2, [r3, #32]

	}
	//(ORE)
	if (LL_USART_IsActiveFlag_ORE(USART1)) {
 8003046:	4b29      	ldr	r3, [pc, #164]	@ (80030ec <USART1_callback+0x13c>)
 8003048:	0018      	movs	r0, r3
 800304a:	f7ff fc86 	bl	800295a <LL_USART_IsActiveFlag_ORE>
 800304e:	1e03      	subs	r3, r0, #0
 8003050:	d00a      	beq.n	8003068 <USART1_callback+0xb8>
		LL_USART_ClearFlag_ORE(USART1);
 8003052:	4b26      	ldr	r3, [pc, #152]	@ (80030ec <USART1_callback+0x13c>)
 8003054:	0018      	movs	r0, r3
 8003056:	f7ff fd0d 	bl	8002a74 <LL_USART_ClearFlag_ORE>
		cChar = LL_USART_ReceiveData8(USART1);
 800305a:	1dfc      	adds	r4, r7, #7
 800305c:	4b23      	ldr	r3, [pc, #140]	@ (80030ec <USART1_callback+0x13c>)
 800305e:	0018      	movs	r0, r3
 8003060:	f7ff fd86 	bl	8002b70 <LL_USART_ReceiveData8>
 8003064:	0003      	movs	r3, r0
 8003066:	7023      	strb	r3, [r4, #0]
	}

	//Framing (FE)
	if (LL_USART_IsActiveFlag_FE(USART1)) {
 8003068:	4b20      	ldr	r3, [pc, #128]	@ (80030ec <USART1_callback+0x13c>)
 800306a:	0018      	movs	r0, r3
 800306c:	f7ff fc53 	bl	8002916 <LL_USART_IsActiveFlag_FE>
 8003070:	1e03      	subs	r3, r0, #0
 8003072:	d00a      	beq.n	800308a <USART1_callback+0xda>
		LL_USART_ClearFlag_FE(USART1);
 8003074:	4b1d      	ldr	r3, [pc, #116]	@ (80030ec <USART1_callback+0x13c>)
 8003076:	0018      	movs	r0, r3
 8003078:	f7ff fce6 	bl	8002a48 <LL_USART_ClearFlag_FE>
		cChar = LL_USART_ReceiveData8(USART1);
 800307c:	1dfc      	adds	r4, r7, #7
 800307e:	4b1b      	ldr	r3, [pc, #108]	@ (80030ec <USART1_callback+0x13c>)
 8003080:	0018      	movs	r0, r3
 8003082:	f7ff fd75 	bl	8002b70 <LL_USART_ReceiveData8>
 8003086:	0003      	movs	r3, r0
 8003088:	7023      	strb	r3, [r4, #0]
	}

	//(NE)
	if (LL_USART_IsActiveFlag_NE(USART1)) {
 800308a:	4b18      	ldr	r3, [pc, #96]	@ (80030ec <USART1_callback+0x13c>)
 800308c:	0018      	movs	r0, r3
 800308e:	f7ff fc53 	bl	8002938 <LL_USART_IsActiveFlag_NE>
 8003092:	1e03      	subs	r3, r0, #0
 8003094:	d00a      	beq.n	80030ac <USART1_callback+0xfc>
		LL_USART_ClearFlag_NE(USART1);
 8003096:	4b15      	ldr	r3, [pc, #84]	@ (80030ec <USART1_callback+0x13c>)
 8003098:	0018      	movs	r0, r3
 800309a:	f7ff fce0 	bl	8002a5e <LL_USART_ClearFlag_NE>
		cChar = LL_USART_ReceiveData8(USART1);
 800309e:	1dfc      	adds	r4, r7, #7
 80030a0:	4b12      	ldr	r3, [pc, #72]	@ (80030ec <USART1_callback+0x13c>)
 80030a2:	0018      	movs	r0, r3
 80030a4:	f7ff fd64 	bl	8002b70 <LL_USART_ReceiveData8>
 80030a8:	0003      	movs	r3, r0
 80030aa:	7023      	strb	r3, [r4, #0]
	}

	//(PE)
	if (LL_USART_IsActiveFlag_PE(USART1)) {
 80030ac:	4b0f      	ldr	r3, [pc, #60]	@ (80030ec <USART1_callback+0x13c>)
 80030ae:	0018      	movs	r0, r3
 80030b0:	f7ff fc20 	bl	80028f4 <LL_USART_IsActiveFlag_PE>
 80030b4:	1e03      	subs	r3, r0, #0
 80030b6:	d00a      	beq.n	80030ce <USART1_callback+0x11e>
		LL_USART_ClearFlag_PE(USART1);
 80030b8:	4b0c      	ldr	r3, [pc, #48]	@ (80030ec <USART1_callback+0x13c>)
 80030ba:	0018      	movs	r0, r3
 80030bc:	f7ff fcb9 	bl	8002a32 <LL_USART_ClearFlag_PE>
		cChar = LL_USART_ReceiveData8(USART1);
 80030c0:	1dfc      	adds	r4, r7, #7
 80030c2:	4b0a      	ldr	r3, [pc, #40]	@ (80030ec <USART1_callback+0x13c>)
 80030c4:	0018      	movs	r0, r3
 80030c6:	f7ff fd53 	bl	8002b70 <LL_USART_ReceiveData8>
 80030ca:	0003      	movs	r3, r0
 80030cc:	7023      	strb	r3, [r4, #0]
	}

	if (LL_USART_IsActiveFlag_TXE(USART1)) {
 80030ce:	4b07      	ldr	r3, [pc, #28]	@ (80030ec <USART1_callback+0x13c>)
 80030d0:	0018      	movs	r0, r3
 80030d2:	f7ff fc75 	bl	80029c0 <LL_USART_IsActiveFlag_TXE_TXFNF>
 80030d6:	1e03      	subs	r3, r0, #0
 80030d8:	d003      	beq.n	80030e2 <USART1_callback+0x132>
		LL_USART_ClearFlag_TXFE(USART1);
 80030da:	4b04      	ldr	r3, [pc, #16]	@ (80030ec <USART1_callback+0x13c>)
 80030dc:	0018      	movs	r0, r3
 80030de:	f7ff fcdf 	bl	8002aa0 <LL_USART_ClearFlag_TXFE>
	}
}
 80030e2:	46c0      	nop			@ (mov r8, r8)
 80030e4:	46bd      	mov	sp, r7
 80030e6:	b003      	add	sp, #12
 80030e8:	bd90      	pop	{r4, r7, pc}
 80030ea:	46c0      	nop			@ (mov r8, r8)
 80030ec:	40013800 	.word	0x40013800
 80030f0:	40020000 	.word	0x40020000
 80030f4:	200004b4 	.word	0x200004b4

080030f8 <USART3_callback>:

char ble_buf[256] ={0};
int ble_idx =0;

void USART3_callback(void) {
 80030f8:	b590      	push	{r4, r7, lr}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
	uint8_t cChar = 0;
 80030fe:	1dfb      	adds	r3, r7, #7
 8003100:	2200      	movs	r2, #0
 8003102:	701a      	strb	r2, [r3, #0]
	if (LL_USART_IsActiveFlag_IDLE(USART3)) {
 8003104:	4b4e      	ldr	r3, [pc, #312]	@ (8003240 <USART3_callback+0x148>)
 8003106:	0018      	movs	r0, r3
 8003108:	f7ff fc38 	bl	800297c <LL_USART_IsActiveFlag_IDLE>
 800310c:	1e03      	subs	r3, r0, #0
 800310e:	d034      	beq.n	800317a <USART3_callback+0x82>

#if USART3_ENABLE_RX_DMA
		/* Disable and Re-enable DMA to reset the buffer */
		LL_DMA_DisableChannel(USART3_RX_DMA, USART3_RX_DMA_CHANEL);
 8003110:	4b4c      	ldr	r3, [pc, #304]	@ (8003244 <USART3_callback+0x14c>)
 8003112:	2101      	movs	r1, #1
 8003114:	0018      	movs	r0, r3
 8003116:	f7ff f967 	bl	80023e8 <LL_DMA_DisableChannel>
		uint16_t remainingBytes = LL_DMA_GetDataLength(USART3_RX_DMA, USART3_RX_DMA_CHANEL);
 800311a:	4b4a      	ldr	r3, [pc, #296]	@ (8003244 <USART3_callback+0x14c>)
 800311c:	2101      	movs	r1, #1
 800311e:	0018      	movs	r0, r3
 8003120:	f7ff f9ca 	bl	80024b8 <LL_DMA_GetDataLength>
 8003124:	0002      	movs	r2, r0
 8003126:	1d3b      	adds	r3, r7, #4
 8003128:	801a      	strh	r2, [r3, #0]
		uint16_t receivedLength = USART3_RX_BUFFER_SIZE - remainingBytes;
 800312a:	1cbb      	adds	r3, r7, #2
 800312c:	1d3a      	adds	r2, r7, #4
 800312e:	8812      	ldrh	r2, [r2, #0]
 8003130:	2180      	movs	r1, #128	@ 0x80
 8003132:	00c9      	lsls	r1, r1, #3
 8003134:	1a8a      	subs	r2, r1, r2
 8003136:	801a      	strh	r2, [r3, #0]

		if (receivedLength > 0) {
 8003138:	1cbb      	adds	r3, r7, #2
 800313a:	881b      	ldrh	r3, [r3, #0]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d006      	beq.n	800314e <USART3_callback+0x56>
			putcomdata(usart3_rxBuffer, receivedLength, source_debug);
 8003140:	1cbb      	adds	r3, r7, #2
 8003142:	8819      	ldrh	r1, [r3, #0]
 8003144:	4b40      	ldr	r3, [pc, #256]	@ (8003248 <USART3_callback+0x150>)
 8003146:	2203      	movs	r2, #3
 8003148:	0018      	movs	r0, r3
 800314a:	f000 fc7b 	bl	8003a44 <putcomdata>
		}

		LL_DMA_SetMemoryAddress(USART3_RX_DMA, USART3_RX_DMA_CHANEL, (uint32_t) usart3_rxBuffer);
 800314e:	4b3e      	ldr	r3, [pc, #248]	@ (8003248 <USART3_callback+0x150>)
 8003150:	483c      	ldr	r0, [pc, #240]	@ (8003244 <USART3_callback+0x14c>)
 8003152:	001a      	movs	r2, r3
 8003154:	2101      	movs	r1, #1
 8003156:	f7ff f9c7 	bl	80024e8 <LL_DMA_SetMemoryAddress>
		LL_DMA_SetDataLength(USART3_RX_DMA, USART3_RX_DMA_CHANEL, USART3_RX_BUFFER_SIZE);
 800315a:	2380      	movs	r3, #128	@ 0x80
 800315c:	00db      	lsls	r3, r3, #3
 800315e:	4839      	ldr	r0, [pc, #228]	@ (8003244 <USART3_callback+0x14c>)
 8003160:	001a      	movs	r2, r3
 8003162:	2101      	movs	r1, #1
 8003164:	f7ff f986 	bl	8002474 <LL_DMA_SetDataLength>
		LL_DMA_EnableChannel(USART3_RX_DMA, USART3_RX_DMA_CHANEL);
 8003168:	4b36      	ldr	r3, [pc, #216]	@ (8003244 <USART3_callback+0x14c>)
 800316a:	2101      	movs	r1, #1
 800316c:	0018      	movs	r0, r3
 800316e:	f7ff f91b 	bl	80023a8 <LL_DMA_EnableChannel>
#endif
		LL_USART_ClearFlag_IDLE(USART3);  // Clear flag
 8003172:	4b33      	ldr	r3, [pc, #204]	@ (8003240 <USART3_callback+0x148>)
 8003174:	0018      	movs	r0, r3
 8003176:	f7ff fc88 	bl	8002a8a <LL_USART_ClearFlag_IDLE>
	}
	if (LL_USART_IsActiveFlag_RXNE_RXFNE(USART3)) {
 800317a:	4b31      	ldr	r3, [pc, #196]	@ (8003240 <USART3_callback+0x148>)
 800317c:	0018      	movs	r0, r3
 800317e:	f7ff fc0e 	bl	800299e <LL_USART_IsActiveFlag_RXNE_RXFNE>
 8003182:	1e03      	subs	r3, r0, #0
 8003184:	d009      	beq.n	800319a <USART3_callback+0xa2>
		cChar = USART3->RDR;
 8003186:	4b2e      	ldr	r3, [pc, #184]	@ (8003240 <USART3_callback+0x148>)
 8003188:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800318a:	1dfb      	adds	r3, r7, #7
 800318c:	701a      	strb	r2, [r3, #0]
		USART3->ICR |= USART_RQR_RXFRQ;
 800318e:	4b2c      	ldr	r3, [pc, #176]	@ (8003240 <USART3_callback+0x148>)
 8003190:	6a1a      	ldr	r2, [r3, #32]
 8003192:	4b2b      	ldr	r3, [pc, #172]	@ (8003240 <USART3_callback+0x148>)
 8003194:	2108      	movs	r1, #8
 8003196:	430a      	orrs	r2, r1
 8003198:	621a      	str	r2, [r3, #32]
	}

	//(ORE)
	if (LL_USART_IsActiveFlag_ORE(USART3)) {
 800319a:	4b29      	ldr	r3, [pc, #164]	@ (8003240 <USART3_callback+0x148>)
 800319c:	0018      	movs	r0, r3
 800319e:	f7ff fbdc 	bl	800295a <LL_USART_IsActiveFlag_ORE>
 80031a2:	1e03      	subs	r3, r0, #0
 80031a4:	d00a      	beq.n	80031bc <USART3_callback+0xc4>
		LL_USART_ClearFlag_ORE(USART3);
 80031a6:	4b26      	ldr	r3, [pc, #152]	@ (8003240 <USART3_callback+0x148>)
 80031a8:	0018      	movs	r0, r3
 80031aa:	f7ff fc63 	bl	8002a74 <LL_USART_ClearFlag_ORE>
		cChar = LL_USART_ReceiveData8(USART3);
 80031ae:	1dfc      	adds	r4, r7, #7
 80031b0:	4b23      	ldr	r3, [pc, #140]	@ (8003240 <USART3_callback+0x148>)
 80031b2:	0018      	movs	r0, r3
 80031b4:	f7ff fcdc 	bl	8002b70 <LL_USART_ReceiveData8>
 80031b8:	0003      	movs	r3, r0
 80031ba:	7023      	strb	r3, [r4, #0]
	}

	//Framing (FE)
	if (LL_USART_IsActiveFlag_FE(USART3)) {
 80031bc:	4b20      	ldr	r3, [pc, #128]	@ (8003240 <USART3_callback+0x148>)
 80031be:	0018      	movs	r0, r3
 80031c0:	f7ff fba9 	bl	8002916 <LL_USART_IsActiveFlag_FE>
 80031c4:	1e03      	subs	r3, r0, #0
 80031c6:	d00a      	beq.n	80031de <USART3_callback+0xe6>
		LL_USART_ClearFlag_FE(USART3);
 80031c8:	4b1d      	ldr	r3, [pc, #116]	@ (8003240 <USART3_callback+0x148>)
 80031ca:	0018      	movs	r0, r3
 80031cc:	f7ff fc3c 	bl	8002a48 <LL_USART_ClearFlag_FE>
		cChar = LL_USART_ReceiveData8(USART3);
 80031d0:	1dfc      	adds	r4, r7, #7
 80031d2:	4b1b      	ldr	r3, [pc, #108]	@ (8003240 <USART3_callback+0x148>)
 80031d4:	0018      	movs	r0, r3
 80031d6:	f7ff fccb 	bl	8002b70 <LL_USART_ReceiveData8>
 80031da:	0003      	movs	r3, r0
 80031dc:	7023      	strb	r3, [r4, #0]
	}

	//(NE)
	if (LL_USART_IsActiveFlag_NE(USART3)) {
 80031de:	4b18      	ldr	r3, [pc, #96]	@ (8003240 <USART3_callback+0x148>)
 80031e0:	0018      	movs	r0, r3
 80031e2:	f7ff fba9 	bl	8002938 <LL_USART_IsActiveFlag_NE>
 80031e6:	1e03      	subs	r3, r0, #0
 80031e8:	d00a      	beq.n	8003200 <USART3_callback+0x108>
		LL_USART_ClearFlag_NE(USART3);
 80031ea:	4b15      	ldr	r3, [pc, #84]	@ (8003240 <USART3_callback+0x148>)
 80031ec:	0018      	movs	r0, r3
 80031ee:	f7ff fc36 	bl	8002a5e <LL_USART_ClearFlag_NE>
		cChar = LL_USART_ReceiveData8(USART3);
 80031f2:	1dfc      	adds	r4, r7, #7
 80031f4:	4b12      	ldr	r3, [pc, #72]	@ (8003240 <USART3_callback+0x148>)
 80031f6:	0018      	movs	r0, r3
 80031f8:	f7ff fcba 	bl	8002b70 <LL_USART_ReceiveData8>
 80031fc:	0003      	movs	r3, r0
 80031fe:	7023      	strb	r3, [r4, #0]
	}

	//(PE)
	if (LL_USART_IsActiveFlag_PE(USART3)) {
 8003200:	4b0f      	ldr	r3, [pc, #60]	@ (8003240 <USART3_callback+0x148>)
 8003202:	0018      	movs	r0, r3
 8003204:	f7ff fb76 	bl	80028f4 <LL_USART_IsActiveFlag_PE>
 8003208:	1e03      	subs	r3, r0, #0
 800320a:	d00a      	beq.n	8003222 <USART3_callback+0x12a>
		LL_USART_ClearFlag_PE(USART3);
 800320c:	4b0c      	ldr	r3, [pc, #48]	@ (8003240 <USART3_callback+0x148>)
 800320e:	0018      	movs	r0, r3
 8003210:	f7ff fc0f 	bl	8002a32 <LL_USART_ClearFlag_PE>
		cChar = LL_USART_ReceiveData8(USART3);
 8003214:	1dfc      	adds	r4, r7, #7
 8003216:	4b0a      	ldr	r3, [pc, #40]	@ (8003240 <USART3_callback+0x148>)
 8003218:	0018      	movs	r0, r3
 800321a:	f7ff fca9 	bl	8002b70 <LL_USART_ReceiveData8>
 800321e:	0003      	movs	r3, r0
 8003220:	7023      	strb	r3, [r4, #0]
	}

	if (LL_USART_IsActiveFlag_TXE(USART3)) {
 8003222:	4b07      	ldr	r3, [pc, #28]	@ (8003240 <USART3_callback+0x148>)
 8003224:	0018      	movs	r0, r3
 8003226:	f7ff fbcb 	bl	80029c0 <LL_USART_IsActiveFlag_TXE_TXFNF>
 800322a:	1e03      	subs	r3, r0, #0
 800322c:	d003      	beq.n	8003236 <USART3_callback+0x13e>
		LL_USART_ClearFlag_TXFE(USART3);
 800322e:	4b04      	ldr	r3, [pc, #16]	@ (8003240 <USART3_callback+0x148>)
 8003230:	0018      	movs	r0, r3
 8003232:	f7ff fc35 	bl	8002aa0 <LL_USART_ClearFlag_TXFE>

	}
}
 8003236:	46c0      	nop			@ (mov r8, r8)
 8003238:	46bd      	mov	sp, r7
 800323a:	b003      	add	sp, #12
 800323c:	bd90      	pop	{r4, r7, pc}
 800323e:	46c0      	nop			@ (mov r8, r8)
 8003240:	40004800 	.word	0x40004800
 8003244:	40020000 	.word	0x40020000
 8003248:	200008b4 	.word	0x200008b4

0800324c <USART1_GPIO_Init>:
	LL_GPIO_ResetOutputPin(USART3_TX_GPIO_Port, USART3_TX_Pin); // TX
	LL_GPIO_ResetOutputPin(USART3_RX_GPIO_Port, USART3_RX_Pin); // RX
}


static void USART1_GPIO_Init() {
 800324c:	b580      	push	{r7, lr}
 800324e:	af00      	add	r7, sp, #0
	LL_IOP_GRP1_EnableClock(USART1_TX_GPIO_CLK);
 8003250:	2001      	movs	r0, #1
 8003252:	f7ff fa4f 	bl	80026f4 <LL_IOP_GRP1_EnableClock>
	LL_IOP_GRP1_EnableClock(USART1_RX_GPIO_CLK);
 8003256:	2001      	movs	r0, #1
 8003258:	f7ff fa4c 	bl	80026f4 <LL_IOP_GRP1_EnableClock>
	/*TX*/
	LL_GPIO_SetPinMode(USART1_TX_GPIO_Port, USART1_TX_Pin, LL_GPIO_MODE_ALTERNATE);
 800325c:	2380      	movs	r3, #128	@ 0x80
 800325e:	0099      	lsls	r1, r3, #2
 8003260:	23a0      	movs	r3, #160	@ 0xa0
 8003262:	05db      	lsls	r3, r3, #23
 8003264:	2202      	movs	r2, #2
 8003266:	0018      	movs	r0, r3
 8003268:	f7ff fc8d 	bl	8002b86 <LL_GPIO_SetPinMode>
	if (USART1_TX_Pin < LL_GPIO_PIN_8)
		LL_GPIO_SetAFPin_0_7(USART1_TX_GPIO_Port, USART1_TX_Pin, USART1_TX_GPIO_AF);
	else
		LL_GPIO_SetAFPin_8_15(USART1_TX_GPIO_Port, USART1_TX_Pin, USART1_TX_GPIO_AF);
 800326c:	2380      	movs	r3, #128	@ 0x80
 800326e:	0099      	lsls	r1, r3, #2
 8003270:	23a0      	movs	r3, #160	@ 0xa0
 8003272:	05db      	lsls	r3, r3, #23
 8003274:	2201      	movs	r2, #1
 8003276:	0018      	movs	r0, r3
 8003278:	f7ff fd11 	bl	8002c9e <LL_GPIO_SetAFPin_8_15>
	LL_GPIO_SetPinSpeed(USART1_TX_GPIO_Port, USART1_TX_Pin, LL_GPIO_SPEED_FREQ_HIGH);
 800327c:	2380      	movs	r3, #128	@ 0x80
 800327e:	0099      	lsls	r1, r3, #2
 8003280:	23a0      	movs	r3, #160	@ 0xa0
 8003282:	05db      	lsls	r3, r3, #23
 8003284:	2202      	movs	r2, #2
 8003286:	0018      	movs	r0, r3
 8003288:	f7ff fcae 	bl	8002be8 <LL_GPIO_SetPinSpeed>
	LL_GPIO_SetPinOutputType(USART1_TX_GPIO_Port, USART1_TX_Pin, LL_GPIO_OUTPUT_PUSHPULL);
 800328c:	2380      	movs	r3, #128	@ 0x80
 800328e:	0099      	lsls	r1, r3, #2
 8003290:	23a0      	movs	r3, #160	@ 0xa0
 8003292:	05db      	lsls	r3, r3, #23
 8003294:	2200      	movs	r2, #0
 8003296:	0018      	movs	r0, r3
 8003298:	f7ff fc91 	bl	8002bbe <LL_GPIO_SetPinOutputType>
	LL_GPIO_SetPinPull(USART1_TX_GPIO_Port, USART1_TX_Pin, LL_GPIO_PULL_UP);
 800329c:	2380      	movs	r3, #128	@ 0x80
 800329e:	0099      	lsls	r1, r3, #2
 80032a0:	23a0      	movs	r3, #160	@ 0xa0
 80032a2:	05db      	lsls	r3, r3, #23
 80032a4:	2201      	movs	r2, #1
 80032a6:	0018      	movs	r0, r3
 80032a8:	f7ff fcba 	bl	8002c20 <LL_GPIO_SetPinPull>
	/*RX*/
	LL_GPIO_SetPinMode(USART1_RX_GPIO_Port, USART1_RX_Pin, LL_GPIO_MODE_ALTERNATE);
 80032ac:	2380      	movs	r3, #128	@ 0x80
 80032ae:	00d9      	lsls	r1, r3, #3
 80032b0:	23a0      	movs	r3, #160	@ 0xa0
 80032b2:	05db      	lsls	r3, r3, #23
 80032b4:	2202      	movs	r2, #2
 80032b6:	0018      	movs	r0, r3
 80032b8:	f7ff fc65 	bl	8002b86 <LL_GPIO_SetPinMode>
	if (USART1_RX_Pin < LL_GPIO_PIN_8)
		LL_GPIO_SetAFPin_0_7(USART1_RX_GPIO_Port, USART1_RX_Pin, USART1_RX_GPIO_AF);
	else
		LL_GPIO_SetAFPin_8_15(USART1_RX_GPIO_Port, USART1_RX_Pin, USART1_RX_GPIO_AF);
 80032bc:	2380      	movs	r3, #128	@ 0x80
 80032be:	00d9      	lsls	r1, r3, #3
 80032c0:	23a0      	movs	r3, #160	@ 0xa0
 80032c2:	05db      	lsls	r3, r3, #23
 80032c4:	2201      	movs	r2, #1
 80032c6:	0018      	movs	r0, r3
 80032c8:	f7ff fce9 	bl	8002c9e <LL_GPIO_SetAFPin_8_15>
	LL_GPIO_SetPinSpeed(USART1_RX_GPIO_Port, USART1_RX_Pin, LL_GPIO_SPEED_FREQ_HIGH);
 80032cc:	2380      	movs	r3, #128	@ 0x80
 80032ce:	00d9      	lsls	r1, r3, #3
 80032d0:	23a0      	movs	r3, #160	@ 0xa0
 80032d2:	05db      	lsls	r3, r3, #23
 80032d4:	2202      	movs	r2, #2
 80032d6:	0018      	movs	r0, r3
 80032d8:	f7ff fc86 	bl	8002be8 <LL_GPIO_SetPinSpeed>
	LL_GPIO_SetPinPull(USART1_RX_GPIO_Port, USART1_RX_Pin, LL_GPIO_PULL_UP);
 80032dc:	2380      	movs	r3, #128	@ 0x80
 80032de:	00d9      	lsls	r1, r3, #3
 80032e0:	23a0      	movs	r3, #160	@ 0xa0
 80032e2:	05db      	lsls	r3, r3, #23
 80032e4:	2201      	movs	r2, #1
 80032e6:	0018      	movs	r0, r3
 80032e8:	f7ff fc9a 	bl	8002c20 <LL_GPIO_SetPinPull>

}
 80032ec:	46c0      	nop			@ (mov r8, r8)
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
	...

080032f4 <USART3_GPIO_Init>:



static void USART3_GPIO_Init() {
 80032f4:	b580      	push	{r7, lr}
 80032f6:	af00      	add	r7, sp, #0
	LL_IOP_GRP1_EnableClock(USART3_TX_GPIO_CLK);
 80032f8:	2004      	movs	r0, #4
 80032fa:	f7ff f9fb 	bl	80026f4 <LL_IOP_GRP1_EnableClock>
	LL_IOP_GRP1_EnableClock(USART3_RX_GPIO_CLK);
 80032fe:	2004      	movs	r0, #4
 8003300:	f7ff f9f8 	bl	80026f4 <LL_IOP_GRP1_EnableClock>
	/*TX*/
	LL_GPIO_SetPinMode(USART3_TX_GPIO_Port, USART3_TX_Pin, LL_GPIO_MODE_ALTERNATE);
 8003304:	4b1c      	ldr	r3, [pc, #112]	@ (8003378 <USART3_GPIO_Init+0x84>)
 8003306:	2202      	movs	r2, #2
 8003308:	2110      	movs	r1, #16
 800330a:	0018      	movs	r0, r3
 800330c:	f7ff fc3b 	bl	8002b86 <LL_GPIO_SetPinMode>
	if (USART3_TX_Pin < LL_GPIO_PIN_8)
		LL_GPIO_SetAFPin_0_7(USART3_TX_GPIO_Port, USART3_TX_Pin, USART3_TX_GPIO_AF);
 8003310:	4b19      	ldr	r3, [pc, #100]	@ (8003378 <USART3_GPIO_Init+0x84>)
 8003312:	2200      	movs	r2, #0
 8003314:	2110      	movs	r1, #16
 8003316:	0018      	movs	r0, r3
 8003318:	f7ff fc9e 	bl	8002c58 <LL_GPIO_SetAFPin_0_7>
	else
		LL_GPIO_SetAFPin_8_15(USART3_TX_GPIO_Port, USART3_TX_Pin, USART3_TX_GPIO_AF);

	LL_GPIO_SetPinSpeed(USART3_TX_GPIO_Port, USART3_TX_Pin, LL_GPIO_SPEED_FREQ_LOW);
 800331c:	4b16      	ldr	r3, [pc, #88]	@ (8003378 <USART3_GPIO_Init+0x84>)
 800331e:	2200      	movs	r2, #0
 8003320:	2110      	movs	r1, #16
 8003322:	0018      	movs	r0, r3
 8003324:	f7ff fc60 	bl	8002be8 <LL_GPIO_SetPinSpeed>
	LL_GPIO_SetPinOutputType(USART3_TX_GPIO_Port, USART3_TX_Pin, LL_GPIO_OUTPUT_PUSHPULL);
 8003328:	4b13      	ldr	r3, [pc, #76]	@ (8003378 <USART3_GPIO_Init+0x84>)
 800332a:	2200      	movs	r2, #0
 800332c:	2110      	movs	r1, #16
 800332e:	0018      	movs	r0, r3
 8003330:	f7ff fc45 	bl	8002bbe <LL_GPIO_SetPinOutputType>
	LL_GPIO_SetPinPull(USART3_TX_GPIO_Port, USART3_TX_Pin, LL_GPIO_PULL_UP);
 8003334:	4b10      	ldr	r3, [pc, #64]	@ (8003378 <USART3_GPIO_Init+0x84>)
 8003336:	2201      	movs	r2, #1
 8003338:	2110      	movs	r1, #16
 800333a:	0018      	movs	r0, r3
 800333c:	f7ff fc70 	bl	8002c20 <LL_GPIO_SetPinPull>
	/*RX*/
	LL_GPIO_SetPinMode(USART3_RX_GPIO_Port, USART3_RX_Pin, LL_GPIO_MODE_ALTERNATE);
 8003340:	4b0d      	ldr	r3, [pc, #52]	@ (8003378 <USART3_GPIO_Init+0x84>)
 8003342:	2202      	movs	r2, #2
 8003344:	2120      	movs	r1, #32
 8003346:	0018      	movs	r0, r3
 8003348:	f7ff fc1d 	bl	8002b86 <LL_GPIO_SetPinMode>
	if (USART3_RX_Pin < LL_GPIO_PIN_8)
		LL_GPIO_SetAFPin_0_7(USART3_RX_GPIO_Port, USART3_RX_Pin, USART3_RX_GPIO_AF);
 800334c:	4b0a      	ldr	r3, [pc, #40]	@ (8003378 <USART3_GPIO_Init+0x84>)
 800334e:	2200      	movs	r2, #0
 8003350:	2120      	movs	r1, #32
 8003352:	0018      	movs	r0, r3
 8003354:	f7ff fc80 	bl	8002c58 <LL_GPIO_SetAFPin_0_7>
	else
		LL_GPIO_SetAFPin_8_15(USART3_RX_GPIO_Port, USART3_RX_Pin, USART3_RX_GPIO_AF);

	LL_GPIO_SetPinSpeed(USART3_RX_GPIO_Port, USART3_RX_Pin, LL_GPIO_SPEED_FREQ_LOW);
 8003358:	4b07      	ldr	r3, [pc, #28]	@ (8003378 <USART3_GPIO_Init+0x84>)
 800335a:	2200      	movs	r2, #0
 800335c:	2120      	movs	r1, #32
 800335e:	0018      	movs	r0, r3
 8003360:	f7ff fc42 	bl	8002be8 <LL_GPIO_SetPinSpeed>
	LL_GPIO_SetPinPull(USART3_RX_GPIO_Port, USART3_RX_Pin, LL_GPIO_PULL_UP);
 8003364:	4b04      	ldr	r3, [pc, #16]	@ (8003378 <USART3_GPIO_Init+0x84>)
 8003366:	2201      	movs	r2, #1
 8003368:	2120      	movs	r1, #32
 800336a:	0018      	movs	r0, r3
 800336c:	f7ff fc58 	bl	8002c20 <LL_GPIO_SetPinPull>
}
 8003370:	46c0      	nop			@ (mov r8, r8)
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
 8003376:	46c0      	nop			@ (mov r8, r8)
 8003378:	50000800 	.word	0x50000800

0800337c <USARTx_Init>:


static void USARTx_Init(USART_TypeDef *USARTx,uint32_t baudrate) {
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af02      	add	r7, sp, #8
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	6039      	str	r1, [r7, #0]
    LL_USART_SetBaudRate(USARTx, SystemCoreClock, LL_USART_PRESCALER_DIV1, LL_USART_OVERSAMPLING_16, baudrate);
 8003386:	4b1c      	ldr	r3, [pc, #112]	@ (80033f8 <USARTx_Init+0x7c>)
 8003388:	6819      	ldr	r1, [r3, #0]
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	9300      	str	r3, [sp, #0]
 8003390:	2300      	movs	r3, #0
 8003392:	2200      	movs	r2, #0
 8003394:	f7ff fa54 	bl	8002840 <LL_USART_SetBaudRate>
    LL_USART_SetDataWidth(USARTx, LL_USART_DATAWIDTH_8B);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2100      	movs	r1, #0
 800339c:	0018      	movs	r0, r3
 800339e:	f7ff fa13 	bl	80027c8 <LL_USART_SetDataWidth>
    LL_USART_SetStopBitsLength(USARTx, LL_USART_STOPBITS_1);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2100      	movs	r1, #0
 80033a6:	0018      	movs	r0, r3
 80033a8:	f7ff fa22 	bl	80027f0 <LL_USART_SetStopBitsLength>
    LL_USART_SetParity(USARTx, LL_USART_PARITY_NONE);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2100      	movs	r1, #0
 80033b0:	0018      	movs	r0, r3
 80033b2:	f7ff f9f5 	bl	80027a0 <LL_USART_SetParity>
    LL_USART_SetTransferDirection(USARTx, LL_USART_DIRECTION_TX_RX);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	210c      	movs	r1, #12
 80033ba:	0018      	movs	r0, r3
 80033bc:	f7ff f9cd 	bl	800275a <LL_USART_SetTransferDirection>
    LL_USART_SetHWFlowCtrl(USARTx, LL_USART_HWCONTROL_NONE);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2100      	movs	r1, #0
 80033c4:	0018      	movs	r0, r3
 80033c6:	f7ff fa27 	bl	8002818 <LL_USART_SetHWFlowCtrl>

	//LL_LPUART_DisableFIFO(USARTx);
    /* Enable USART */
    LL_USART_Enable(USARTx);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	0018      	movs	r0, r3
 80033ce:	f7ff f9a7 	bl	8002720 <LL_USART_Enable>
    while((!(LL_USART_IsActiveFlag_TEACK(USARTx))) || (!(LL_USART_IsActiveFlag_REACK(USARTx))))
 80033d2:	46c0      	nop			@ (mov r8, r8)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	0018      	movs	r0, r3
 80033d8:	f7ff fb03 	bl	80029e2 <LL_USART_IsActiveFlag_TEACK>
 80033dc:	1e03      	subs	r3, r0, #0
 80033de:	d0f9      	beq.n	80033d4 <USARTx_Init+0x58>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	0018      	movs	r0, r3
 80033e4:	f7ff fb11 	bl	8002a0a <LL_USART_IsActiveFlag_REACK>
 80033e8:	1e03      	subs	r3, r0, #0
 80033ea:	d0f3      	beq.n	80033d4 <USARTx_Init+0x58>
     {
     }

}
 80033ec:	46c0      	nop			@ (mov r8, r8)
 80033ee:	46c0      	nop			@ (mov r8, r8)
 80033f0:	46bd      	mov	sp, r7
 80033f2:	b002      	add	sp, #8
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	46c0      	nop			@ (mov r8, r8)
 80033f8:	2000002c 	.word	0x2000002c

080033fc <USARTx_DMA_RX_Init>:

static void USARTx_DMA_RX_Init(USART_TypeDef *USARTx,const DMA_TypeDef *DMAx, uint32_t Channel,  uint32_t Request,uint8_t* rx_bufer,uint16_t rx_bufer_size ) {
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	60b9      	str	r1, [r7, #8]
 8003406:	607a      	str	r2, [r7, #4]
 8003408:	603b      	str	r3, [r7, #0]
    LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 800340a:	2001      	movs	r0, #1
 800340c:	f7ff f8c8 	bl	80025a0 <LL_AHB1_GRP1_EnableClock>

#if defined(DMA2)
    LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
 8003410:	2002      	movs	r0, #2
 8003412:	f7ff f8c5 	bl	80025a0 <LL_AHB1_GRP1_EnableClock>
#endif

    /* Configure DMA for USART3_RX */
    LL_DMA_ConfigTransfer(DMAx, Channel,
 8003416:	4a18      	ldr	r2, [pc, #96]	@ (8003478 <USARTx_DMA_RX_Init+0x7c>)
 8003418:	6879      	ldr	r1, [r7, #4]
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	0018      	movs	r0, r3
 800341e:	f7ff f803 	bl	8002428 <LL_DMA_ConfigTransfer>
                          LL_DMA_PDATAALIGN_BYTE |
                          LL_DMA_MDATAALIGN_BYTE |
                          LL_DMA_PRIORITY_HIGH);

    /* Set Peripheral Address */
    LL_DMA_SetPeriphAddress(DMAx, Channel, (uint32_t)&USARTx->RDR);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	3324      	adds	r3, #36	@ 0x24
 8003426:	001a      	movs	r2, r3
 8003428:	6879      	ldr	r1, [r7, #4]
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	0018      	movs	r0, r3
 800342e:	f7ff f873 	bl	8002518 <LL_DMA_SetPeriphAddress>
    /* Set Memory Address */
    LL_DMA_SetMemoryAddress(DMAx, Channel, (uint32_t)rx_bufer);
 8003432:	69ba      	ldr	r2, [r7, #24]
 8003434:	6879      	ldr	r1, [r7, #4]
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	0018      	movs	r0, r3
 800343a:	f7ff f855 	bl	80024e8 <LL_DMA_SetMemoryAddress>
    /* Set Number of Data to Transfer */
    LL_DMA_SetDataLength(DMAx, Channel, rx_bufer_size);
 800343e:	231c      	movs	r3, #28
 8003440:	18fb      	adds	r3, r7, r3
 8003442:	881a      	ldrh	r2, [r3, #0]
 8003444:	6879      	ldr	r1, [r7, #4]
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	0018      	movs	r0, r3
 800344a:	f7ff f813 	bl	8002474 <LL_DMA_SetDataLength>
    LL_DMA_SetPeriphRequest(DMAx, Channel, Request);
 800344e:	683a      	ldr	r2, [r7, #0]
 8003450:	6879      	ldr	r1, [r7, #4]
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	0018      	movs	r0, r3
 8003456:	f7ff f877 	bl	8002548 <LL_DMA_SetPeriphRequest>
	/* Enable USART DMA Reception */
	LL_USART_EnableDMAReq_RX(USARTx);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	0018      	movs	r0, r3
 800345e:	f7ff fb68 	bl	8002b32 <LL_USART_EnableDMAReq_RX>
	/* Enable DMA Channel */
	LL_DMA_EnableChannel(DMAx, Channel);
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	0011      	movs	r1, r2
 8003468:	0018      	movs	r0, r3
 800346a:	f7fe ff9d 	bl	80023a8 <LL_DMA_EnableChannel>

}
 800346e:	46c0      	nop			@ (mov r8, r8)
 8003470:	46bd      	mov	sp, r7
 8003472:	b004      	add	sp, #16
 8003474:	bd80      	pop	{r7, pc}
 8003476:	46c0      	nop			@ (mov r8, r8)
 8003478:	000020a0 	.word	0x000020a0

0800347c <DMA1_Channelx_DeInit>:
	/* Enable DMA Channel */
	LL_DMA_EnableChannel(DMAx, Channel);

}

static void DMA1_Channelx_DeInit(uint32_t Channel) {
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
	LL_DMA_DisableChannel(DMA1, Channel);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	4a04      	ldr	r2, [pc, #16]	@ (8003498 <DMA1_Channelx_DeInit+0x1c>)
 8003488:	0019      	movs	r1, r3
 800348a:	0010      	movs	r0, r2
 800348c:	f7fe ffac 	bl	80023e8 <LL_DMA_DisableChannel>
}
 8003490:	46c0      	nop			@ (mov r8, r8)
 8003492:	46bd      	mov	sp, r7
 8003494:	b002      	add	sp, #8
 8003496:	bd80      	pop	{r7, pc}
 8003498:	40020000 	.word	0x40020000

0800349c <NMI_Handler>:
extern volatile uint32_t u32MiliCount;
extern volatile uint32_t u32SecCount;

static uint32_t u32tickCount = 0;;
void NMI_Handler(void)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	af00      	add	r7, sp, #0
}
 80034a0:	46c0      	nop			@ (mov r8, r8)
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034a6:	b580      	push	{r7, lr}
 80034a8:	af00      	add	r7, sp, #0

  while (1)
 80034aa:	46c0      	nop			@ (mov r8, r8)
 80034ac:	e7fd      	b.n	80034aa <HardFault_Handler+0x4>

080034ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80034ae:	b580      	push	{r7, lr}
 80034b0:	af00      	add	r7, sp, #0
}
 80034b2:	46c0      	nop			@ (mov r8, r8)
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	af00      	add	r7, sp, #0
}
 80034bc:	46c0      	nop			@ (mov r8, r8)
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
	...

080034c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void) {
 80034c4:	b580      	push	{r7, lr}
 80034c6:	af00      	add	r7, sp, #0
	u32tickCount++;
 80034c8:	4b0b      	ldr	r3, [pc, #44]	@ (80034f8 <SysTick_Handler+0x34>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	1c5a      	adds	r2, r3, #1
 80034ce:	4b0a      	ldr	r3, [pc, #40]	@ (80034f8 <SysTick_Handler+0x34>)
 80034d0:	601a      	str	r2, [r3, #0]
	u32MiliCount++;
 80034d2:	4b0a      	ldr	r3, [pc, #40]	@ (80034fc <SysTick_Handler+0x38>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	1c5a      	adds	r2, r3, #1
 80034d8:	4b08      	ldr	r3, [pc, #32]	@ (80034fc <SysTick_Handler+0x38>)
 80034da:	601a      	str	r2, [r3, #0]
	if (u32tickCount >= 1000) {
 80034dc:	4b06      	ldr	r3, [pc, #24]	@ (80034f8 <SysTick_Handler+0x34>)
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	23fa      	movs	r3, #250	@ 0xfa
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d304      	bcc.n	80034f2 <SysTick_Handler+0x2e>
		u32SecCount++;
 80034e8:	4b05      	ldr	r3, [pc, #20]	@ (8003500 <SysTick_Handler+0x3c>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	1c5a      	adds	r2, r3, #1
 80034ee:	4b04      	ldr	r3, [pc, #16]	@ (8003500 <SysTick_Handler+0x3c>)
 80034f0:	601a      	str	r2, [r3, #0]
	}
}
 80034f2:	46c0      	nop			@ (mov r8, r8)
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	20000cb4 	.word	0x20000cb4
 80034fc:	20000cd4 	.word	0x20000cd4
 8003500:	20000cd8 	.word	0x20000cd8

08003504 <USART1_IRQHandler>:

void USART1_IRQHandler(void) {
 8003504:	b580      	push	{r7, lr}
 8003506:	af00      	add	r7, sp, #0
	USART1_callback();
 8003508:	f7ff fd52 	bl	8002fb0 <USART1_callback>
}
 800350c:	46c0      	nop			@ (mov r8, r8)
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}

08003512 <USART2_IRQHandler>:

void USART2_IRQHandler(void) {
 8003512:	b580      	push	{r7, lr}
 8003514:	af00      	add	r7, sp, #0
}
 8003516:	46c0      	nop			@ (mov r8, r8)
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <USART3_USART4_USART5_USART6_LPUART1_IRQHandler>:

void USART3_USART4_USART5_USART6_LPUART1_IRQHandler(void) {
 800351c:	b580      	push	{r7, lr}
 800351e:	af00      	add	r7, sp, #0
	USART3_callback();
 8003520:	f7ff fdea 	bl	80030f8 <USART3_callback>
}
 8003524:	46c0      	nop			@ (mov r8, r8)
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}

0800352a <DMA1_Channel1_IRQHandler>:

void LPUART1_IRQHandler(void) {
	LPUART1_callback();
}

void DMA1_Channel1_IRQHandler(void) {
 800352a:	b580      	push	{r7, lr}
 800352c:	af00      	add	r7, sp, #0
}
 800352e:	46c0      	nop			@ (mov r8, r8)
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}

08003534 <DMA1_Channel2_3_IRQHandler>:
void DMA1_Channel2_3_IRQHandler(void) {
 8003534:	b580      	push	{r7, lr}
 8003536:	af00      	add	r7, sp, #0

}
 8003538:	46c0      	nop			@ (mov r8, r8)
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}

0800353e <DMA1_Channel4_5_6_7_DMAMUX_DMA2_Channel1_2_3_4_5_IRQHandler>:

void DMA1_Channel4_5_6_7_DMAMUX_DMA2_Channel1_2_3_4_5_IRQHandler(void) {
 800353e:	b580      	push	{r7, lr}
 8003540:	af00      	add	r7, sp, #0
	USART1_TX_callback();
 8003542:	f7ff fd25 	bl	8002f90 <USART1_TX_callback>
	USART3_TX_callback();
 8003546:	f7ff fd28 	bl	8002f9a <USART3_TX_callback>
	LPUART1_TX_callback();
 800354a:	f7ff fd2b 	bl	8002fa4 <LPUART1_TX_callback>
}
 800354e:	46c0      	nop			@ (mov r8, r8)
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}

08003554 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b086      	sub	sp, #24
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800355c:	4a14      	ldr	r2, [pc, #80]	@ (80035b0 <_sbrk+0x5c>)
 800355e:	4b15      	ldr	r3, [pc, #84]	@ (80035b4 <_sbrk+0x60>)
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003568:	4b13      	ldr	r3, [pc, #76]	@ (80035b8 <_sbrk+0x64>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d102      	bne.n	8003576 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003570:	4b11      	ldr	r3, [pc, #68]	@ (80035b8 <_sbrk+0x64>)
 8003572:	4a12      	ldr	r2, [pc, #72]	@ (80035bc <_sbrk+0x68>)
 8003574:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003576:	4b10      	ldr	r3, [pc, #64]	@ (80035b8 <_sbrk+0x64>)
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	18d3      	adds	r3, r2, r3
 800357e:	693a      	ldr	r2, [r7, #16]
 8003580:	429a      	cmp	r2, r3
 8003582:	d207      	bcs.n	8003594 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003584:	f001 f882 	bl	800468c <__errno>
 8003588:	0003      	movs	r3, r0
 800358a:	220c      	movs	r2, #12
 800358c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800358e:	2301      	movs	r3, #1
 8003590:	425b      	negs	r3, r3
 8003592:	e009      	b.n	80035a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003594:	4b08      	ldr	r3, [pc, #32]	@ (80035b8 <_sbrk+0x64>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800359a:	4b07      	ldr	r3, [pc, #28]	@ (80035b8 <_sbrk+0x64>)
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	18d2      	adds	r2, r2, r3
 80035a2:	4b05      	ldr	r3, [pc, #20]	@ (80035b8 <_sbrk+0x64>)
 80035a4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80035a6:	68fb      	ldr	r3, [r7, #12]
}
 80035a8:	0018      	movs	r0, r3
 80035aa:	46bd      	mov	sp, r7
 80035ac:	b006      	add	sp, #24
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	20024000 	.word	0x20024000
 80035b4:	00000400 	.word	0x00000400
 80035b8:	20000cb8 	.word	0x20000cb8
 80035bc:	20000e30 	.word	0x20000e30

080035c0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80035c4:	46c0      	nop			@ (mov r8, r8)
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
	...

080035cc <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b086      	sub	sp, #24
 80035d0:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t pllm;
  uint32_t hsidiv;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035d2:	4b3b      	ldr	r3, [pc, #236]	@ (80036c0 <SystemCoreClockUpdate+0xf4>)
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	2238      	movs	r2, #56	@ 0x38
 80035d8:	4013      	ands	r3, r2
 80035da:	2b20      	cmp	r3, #32
 80035dc:	d011      	beq.n	8003602 <SystemCoreClockUpdate+0x36>
 80035de:	d849      	bhi.n	8003674 <SystemCoreClockUpdate+0xa8>
 80035e0:	2b18      	cmp	r3, #24
 80035e2:	d009      	beq.n	80035f8 <SystemCoreClockUpdate+0x2c>
 80035e4:	d846      	bhi.n	8003674 <SystemCoreClockUpdate+0xa8>
 80035e6:	2b08      	cmp	r3, #8
 80035e8:	d002      	beq.n	80035f0 <SystemCoreClockUpdate+0x24>
 80035ea:	2b10      	cmp	r3, #16
 80035ec:	d00e      	beq.n	800360c <SystemCoreClockUpdate+0x40>
 80035ee:	e041      	b.n	8003674 <SystemCoreClockUpdate+0xa8>
  {
    case RCC_CFGR_SWS_0:                /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 80035f0:	4b34      	ldr	r3, [pc, #208]	@ (80036c4 <SystemCoreClockUpdate+0xf8>)
 80035f2:	4a35      	ldr	r2, [pc, #212]	@ (80036c8 <SystemCoreClockUpdate+0xfc>)
 80035f4:	601a      	str	r2, [r3, #0]
      break;
 80035f6:	e04f      	b.n	8003698 <SystemCoreClockUpdate+0xcc>

    case (RCC_CFGR_SWS_1 | RCC_CFGR_SWS_0):  /* LSI used as system clock */
      SystemCoreClock = LSI_VALUE;
 80035f8:	4b32      	ldr	r3, [pc, #200]	@ (80036c4 <SystemCoreClockUpdate+0xf8>)
 80035fa:	22fa      	movs	r2, #250	@ 0xfa
 80035fc:	01d2      	lsls	r2, r2, #7
 80035fe:	601a      	str	r2, [r3, #0]
      break;
 8003600:	e04a      	b.n	8003698 <SystemCoreClockUpdate+0xcc>

    case RCC_CFGR_SWS_2:                /* LSE used as system clock */
      SystemCoreClock = LSE_VALUE;
 8003602:	4b30      	ldr	r3, [pc, #192]	@ (80036c4 <SystemCoreClockUpdate+0xf8>)
 8003604:	2280      	movs	r2, #128	@ 0x80
 8003606:	0212      	lsls	r2, r2, #8
 8003608:	601a      	str	r2, [r3, #0]
      break;
 800360a:	e045      	b.n	8003698 <SystemCoreClockUpdate+0xcc>

    case RCC_CFGR_SWS_1:  /* PLL used as system clock */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800360c:	4b2c      	ldr	r3, [pc, #176]	@ (80036c0 <SystemCoreClockUpdate+0xf4>)
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	2203      	movs	r2, #3
 8003612:	4013      	ands	r3, r2
 8003614:	613b      	str	r3, [r7, #16]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL;
 8003616:	4b2a      	ldr	r3, [pc, #168]	@ (80036c0 <SystemCoreClockUpdate+0xf4>)
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	091b      	lsrs	r3, r3, #4
 800361c:	2207      	movs	r2, #7
 800361e:	4013      	ands	r3, r2
 8003620:	3301      	adds	r3, #1
 8003622:	60fb      	str	r3, [r7, #12]

      if(pllsource == 0x03UL)           /* HSE used as PLL clock source */
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	2b03      	cmp	r3, #3
 8003628:	d106      	bne.n	8003638 <SystemCoreClockUpdate+0x6c>
      {
        pllvco = (HSE_VALUE / pllm);
 800362a:	68f9      	ldr	r1, [r7, #12]
 800362c:	4826      	ldr	r0, [pc, #152]	@ (80036c8 <SystemCoreClockUpdate+0xfc>)
 800362e:	f7fc fd79 	bl	8000124 <__udivsi3>
 8003632:	0003      	movs	r3, r0
 8003634:	617b      	str	r3, [r7, #20]
 8003636:	e005      	b.n	8003644 <SystemCoreClockUpdate+0x78>
      }
      else                              /* HSI used as PLL clock source */
      {
          pllvco = (HSI_VALUE / pllm);
 8003638:	68f9      	ldr	r1, [r7, #12]
 800363a:	4824      	ldr	r0, [pc, #144]	@ (80036cc <SystemCoreClockUpdate+0x100>)
 800363c:	f7fc fd72 	bl	8000124 <__udivsi3>
 8003640:	0003      	movs	r3, r0
 8003642:	617b      	str	r3, [r7, #20]
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003644:	4b1e      	ldr	r3, [pc, #120]	@ (80036c0 <SystemCoreClockUpdate+0xf4>)
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	0a1b      	lsrs	r3, r3, #8
 800364a:	227f      	movs	r2, #127	@ 0x7f
 800364c:	401a      	ands	r2, r3
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	4353      	muls	r3, r2
 8003652:	617b      	str	r3, [r7, #20]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8003654:	4b1a      	ldr	r3, [pc, #104]	@ (80036c0 <SystemCoreClockUpdate+0xf4>)
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	0f5b      	lsrs	r3, r3, #29
 800365a:	2207      	movs	r2, #7
 800365c:	4013      	ands	r3, r2
 800365e:	3301      	adds	r3, #1
 8003660:	60bb      	str	r3, [r7, #8]

      SystemCoreClock = pllvco/pllr;
 8003662:	68b9      	ldr	r1, [r7, #8]
 8003664:	6978      	ldr	r0, [r7, #20]
 8003666:	f7fc fd5d 	bl	8000124 <__udivsi3>
 800366a:	0003      	movs	r3, r0
 800366c:	001a      	movs	r2, r3
 800366e:	4b15      	ldr	r3, [pc, #84]	@ (80036c4 <SystemCoreClockUpdate+0xf8>)
 8003670:	601a      	str	r2, [r3, #0]
      break;
 8003672:	e011      	b.n	8003698 <SystemCoreClockUpdate+0xcc>
      
    case 0x00000000U:                   /* HSI used as system clock */
    default:                            /* HSI used as system clock */
      hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV))>> RCC_CR_HSIDIV_Pos));
 8003674:	4b12      	ldr	r3, [pc, #72]	@ (80036c0 <SystemCoreClockUpdate+0xf4>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	0adb      	lsrs	r3, r3, #11
 800367a:	2207      	movs	r2, #7
 800367c:	4013      	ands	r3, r2
 800367e:	2201      	movs	r2, #1
 8003680:	409a      	lsls	r2, r3
 8003682:	0013      	movs	r3, r2
 8003684:	607b      	str	r3, [r7, #4]
      SystemCoreClock = (HSI_VALUE/hsidiv);
 8003686:	6879      	ldr	r1, [r7, #4]
 8003688:	4810      	ldr	r0, [pc, #64]	@ (80036cc <SystemCoreClockUpdate+0x100>)
 800368a:	f7fc fd4b 	bl	8000124 <__udivsi3>
 800368e:	0003      	movs	r3, r0
 8003690:	001a      	movs	r2, r3
 8003692:	4b0c      	ldr	r3, [pc, #48]	@ (80036c4 <SystemCoreClockUpdate+0xf8>)
 8003694:	601a      	str	r2, [r3, #0]
      break;
 8003696:	46c0      	nop			@ (mov r8, r8)
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003698:	4b09      	ldr	r3, [pc, #36]	@ (80036c0 <SystemCoreClockUpdate+0xf4>)
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	0a1b      	lsrs	r3, r3, #8
 800369e:	220f      	movs	r2, #15
 80036a0:	401a      	ands	r2, r3
 80036a2:	4b0b      	ldr	r3, [pc, #44]	@ (80036d0 <SystemCoreClockUpdate+0x104>)
 80036a4:	0092      	lsls	r2, r2, #2
 80036a6:	58d3      	ldr	r3, [r2, r3]
 80036a8:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 80036aa:	4b06      	ldr	r3, [pc, #24]	@ (80036c4 <SystemCoreClockUpdate+0xf8>)
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	40da      	lsrs	r2, r3
 80036b2:	4b04      	ldr	r3, [pc, #16]	@ (80036c4 <SystemCoreClockUpdate+0xf8>)
 80036b4:	601a      	str	r2, [r3, #0]
}
 80036b6:	46c0      	nop			@ (mov r8, r8)
 80036b8:	46bd      	mov	sp, r7
 80036ba:	b006      	add	sp, #24
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	46c0      	nop			@ (mov r8, r8)
 80036c0:	40021000 	.word	0x40021000
 80036c4:	2000002c 	.word	0x2000002c
 80036c8:	007a1200 	.word	0x007a1200
 80036cc:	00f42400 	.word	0x00f42400
 80036d0:	08005058 	.word	0x08005058

080036d4 <ethernetInit>:
int32_t loopback_tcpc(uint8_t sn, uint8_t* buf, uint8_t* destip, uint16_t destport);
void network_init(void);
void my_ip_assign(void);
void my_ip_conflict(void);

void ethernetInit(){
 80036d4:	b580      	push	{r7, lr}
 80036d6:	af00      	add	r7, sp, #0
	W5500_SPI_int();
 80036d8:	f7fe fce2 	bl	80020a0 <SPI1_init>
	PCA9555_i2c_init();
 80036dc:	f7fe fbca 	bl	8001e74 <I2C1_Init>
	register_wizchip();
 80036e0:	f7fd fa0c 	bl	8000afc <register_wizchip>
	Load_Net_Parameters();
 80036e4:	f000 f830 	bl	8003748 <Load_Net_Parameters>
	if (ctlwizchip(0, (void*) memsize) == -1) {
 80036e8:	4b13      	ldr	r3, [pc, #76]	@ (8003738 <ethernetInit+0x64>)
 80036ea:	0019      	movs	r1, r3
 80036ec:	2000      	movs	r0, #0
 80036ee:	f7fd fadb 	bl	8000ca8 <ctlwizchip>
 80036f2:	0003      	movs	r3, r0
 80036f4:	3301      	adds	r3, #1
 80036f6:	d112      	bne.n	800371e <ethernetInit+0x4a>
		LOG("WIZCHIP Initialized fail.\r\n")
 80036f8:	4a10      	ldr	r2, [pc, #64]	@ (800373c <ethernetInit+0x68>)
 80036fa:	4b11      	ldr	r3, [pc, #68]	@ (8003740 <ethernetInit+0x6c>)
 80036fc:	0011      	movs	r1, r2
 80036fe:	0018      	movs	r0, r3
 8003700:	f000 ff8a 	bl	8004618 <siprintf>
 8003704:	4b0e      	ldr	r3, [pc, #56]	@ (8003740 <ethernetInit+0x6c>)
 8003706:	0018      	movs	r0, r3
 8003708:	f7fc fcfa 	bl	8000100 <strlen>
 800370c:	0003      	movs	r3, r0
 800370e:	b299      	uxth	r1, r3
 8003710:	23fa      	movs	r3, #250	@ 0xfa
 8003712:	009a      	lsls	r2, r3, #2
 8003714:	4b0a      	ldr	r3, [pc, #40]	@ (8003740 <ethernetInit+0x6c>)
 8003716:	0018      	movs	r0, r3
 8003718:	f7ff fc18 	bl	8002f4c <USART3_TX_transmit>
		setSHAR(gWIZNETINFO.mac);

		network_init();
	}

}
 800371c:	e008      	b.n	8003730 <ethernetInit+0x5c>
		setSHAR(gWIZNETINFO.mac);
 800371e:	4909      	ldr	r1, [pc, #36]	@ (8003744 <ethernetInit+0x70>)
 8003720:	2390      	movs	r3, #144	@ 0x90
 8003722:	011b      	lsls	r3, r3, #4
 8003724:	2206      	movs	r2, #6
 8003726:	0018      	movs	r0, r3
 8003728:	f7fd f932 	bl	8000990 <WIZCHIP_WRITE_BUF>
		network_init();
 800372c:	f000 f858 	bl	80037e0 <network_init>
}
 8003730:	46c0      	nop			@ (mov r8, r8)
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	46c0      	nop			@ (mov r8, r8)
 8003738:	20000030 	.word	0x20000030
 800373c:	08004e08 	.word	0x08004e08
 8003740:	200000b4 	.word	0x200000b4
 8003744:	20000cbc 	.word	0x20000cbc

08003748 <Load_Net_Parameters>:

static void Load_Net_Parameters()
{
 8003748:	b580      	push	{r7, lr}
 800374a:	af00      	add	r7, sp, #0
	gWIZNETINFO.gw[0] = 192; //Gateway
 800374c:	4b23      	ldr	r3, [pc, #140]	@ (80037dc <Load_Net_Parameters+0x94>)
 800374e:	22c0      	movs	r2, #192	@ 0xc0
 8003750:	739a      	strb	r2, [r3, #14]
	gWIZNETINFO.gw[1] = 168;
 8003752:	4b22      	ldr	r3, [pc, #136]	@ (80037dc <Load_Net_Parameters+0x94>)
 8003754:	22a8      	movs	r2, #168	@ 0xa8
 8003756:	73da      	strb	r2, [r3, #15]
	gWIZNETINFO.gw[2] = 1;
 8003758:	4b20      	ldr	r3, [pc, #128]	@ (80037dc <Load_Net_Parameters+0x94>)
 800375a:	2201      	movs	r2, #1
 800375c:	741a      	strb	r2, [r3, #16]
	gWIZNETINFO.gw[3] = 1;
 800375e:	4b1f      	ldr	r3, [pc, #124]	@ (80037dc <Load_Net_Parameters+0x94>)
 8003760:	2201      	movs	r2, #1
 8003762:	745a      	strb	r2, [r3, #17]

	gWIZNETINFO.sn[0]=255; //Mask
 8003764:	4b1d      	ldr	r3, [pc, #116]	@ (80037dc <Load_Net_Parameters+0x94>)
 8003766:	22ff      	movs	r2, #255	@ 0xff
 8003768:	729a      	strb	r2, [r3, #10]
	gWIZNETINFO.sn[1]=255;
 800376a:	4b1c      	ldr	r3, [pc, #112]	@ (80037dc <Load_Net_Parameters+0x94>)
 800376c:	22ff      	movs	r2, #255	@ 0xff
 800376e:	72da      	strb	r2, [r3, #11]
	gWIZNETINFO.sn[2]=255;
 8003770:	4b1a      	ldr	r3, [pc, #104]	@ (80037dc <Load_Net_Parameters+0x94>)
 8003772:	22ff      	movs	r2, #255	@ 0xff
 8003774:	731a      	strb	r2, [r3, #12]
	gWIZNETINFO.sn[3]=0;
 8003776:	4b19      	ldr	r3, [pc, #100]	@ (80037dc <Load_Net_Parameters+0x94>)
 8003778:	2200      	movs	r2, #0
 800377a:	735a      	strb	r2, [r3, #13]

	gWIZNETINFO.mac[0]=0x0c; //MAC
 800377c:	4b17      	ldr	r3, [pc, #92]	@ (80037dc <Load_Net_Parameters+0x94>)
 800377e:	220c      	movs	r2, #12
 8003780:	701a      	strb	r2, [r3, #0]
	gWIZNETINFO.mac[1]=0x29;
 8003782:	4b16      	ldr	r3, [pc, #88]	@ (80037dc <Load_Net_Parameters+0x94>)
 8003784:	2229      	movs	r2, #41	@ 0x29
 8003786:	705a      	strb	r2, [r3, #1]
	gWIZNETINFO.mac[2]=0xab;
 8003788:	4b14      	ldr	r3, [pc, #80]	@ (80037dc <Load_Net_Parameters+0x94>)
 800378a:	22ab      	movs	r2, #171	@ 0xab
 800378c:	709a      	strb	r2, [r3, #2]
	gWIZNETINFO.mac[3]=0x7c;
 800378e:	4b13      	ldr	r3, [pc, #76]	@ (80037dc <Load_Net_Parameters+0x94>)
 8003790:	227c      	movs	r2, #124	@ 0x7c
 8003792:	70da      	strb	r2, [r3, #3]
	gWIZNETINFO.mac[4]=0x00;
 8003794:	4b11      	ldr	r3, [pc, #68]	@ (80037dc <Load_Net_Parameters+0x94>)
 8003796:	2200      	movs	r2, #0
 8003798:	711a      	strb	r2, [r3, #4]
	gWIZNETINFO.mac[5]=0x00;
 800379a:	4b10      	ldr	r3, [pc, #64]	@ (80037dc <Load_Net_Parameters+0x94>)
 800379c:	2200      	movs	r2, #0
 800379e:	715a      	strb	r2, [r3, #5]

	gWIZNETINFO.ip[0]=192; //IP
 80037a0:	4b0e      	ldr	r3, [pc, #56]	@ (80037dc <Load_Net_Parameters+0x94>)
 80037a2:	22c0      	movs	r2, #192	@ 0xc0
 80037a4:	719a      	strb	r2, [r3, #6]
	gWIZNETINFO.ip[1]=168;
 80037a6:	4b0d      	ldr	r3, [pc, #52]	@ (80037dc <Load_Net_Parameters+0x94>)
 80037a8:	22a8      	movs	r2, #168	@ 0xa8
 80037aa:	71da      	strb	r2, [r3, #7]
	gWIZNETINFO.ip[2]=1;
 80037ac:	4b0b      	ldr	r3, [pc, #44]	@ (80037dc <Load_Net_Parameters+0x94>)
 80037ae:	2201      	movs	r2, #1
 80037b0:	721a      	strb	r2, [r3, #8]
	gWIZNETINFO.ip[3]=249;
 80037b2:	4b0a      	ldr	r3, [pc, #40]	@ (80037dc <Load_Net_Parameters+0x94>)
 80037b4:	22f9      	movs	r2, #249	@ 0xf9
 80037b6:	725a      	strb	r2, [r3, #9]

	gWIZNETINFO.dns[0] = 8;
 80037b8:	4b08      	ldr	r3, [pc, #32]	@ (80037dc <Load_Net_Parameters+0x94>)
 80037ba:	2208      	movs	r2, #8
 80037bc:	749a      	strb	r2, [r3, #18]
	gWIZNETINFO.dns[1] = 8;
 80037be:	4b07      	ldr	r3, [pc, #28]	@ (80037dc <Load_Net_Parameters+0x94>)
 80037c0:	2208      	movs	r2, #8
 80037c2:	74da      	strb	r2, [r3, #19]
	gWIZNETINFO.dns[2] = 8;
 80037c4:	4b05      	ldr	r3, [pc, #20]	@ (80037dc <Load_Net_Parameters+0x94>)
 80037c6:	2208      	movs	r2, #8
 80037c8:	751a      	strb	r2, [r3, #20]
	gWIZNETINFO.dns[3] = 8;
 80037ca:	4b04      	ldr	r3, [pc, #16]	@ (80037dc <Load_Net_Parameters+0x94>)
 80037cc:	2208      	movs	r2, #8
 80037ce:	755a      	strb	r2, [r3, #21]

	gWIZNETINFO.dhcp = NETINFO_STATIC;
 80037d0:	4b02      	ldr	r3, [pc, #8]	@ (80037dc <Load_Net_Parameters+0x94>)
 80037d2:	2201      	movs	r2, #1
 80037d4:	759a      	strb	r2, [r3, #22]
}
 80037d6:	46c0      	nop			@ (mov r8, r8)
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	20000cbc 	.word	0x20000cbc

080037e0 <network_init>:

void network_init(void)
{
 80037e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037e2:	b089      	sub	sp, #36	@ 0x24
 80037e4:	af04      	add	r7, sp, #16
 // wiz_NetTimeout gWIZNETTIME = {.retry_cnt = 3, .time_100us = 2000};
	 wiz_NetTimeout gWIZNETTIME = {.retry_cnt = 10, .time_100us = 2000};
 80037e6:	210c      	movs	r1, #12
 80037e8:	187b      	adds	r3, r7, r1
 80037ea:	4a7f      	ldr	r2, [pc, #508]	@ (80039e8 <network_init+0x208>)
 80037ec:	6812      	ldr	r2, [r2, #0]
 80037ee:	601a      	str	r2, [r3, #0]
  ctlnetwork(CN_SET_TIMEOUT,(void*)&gWIZNETTIME);
 80037f0:	000c      	movs	r4, r1
 80037f2:	193b      	adds	r3, r7, r4
 80037f4:	0019      	movs	r1, r3
 80037f6:	2004      	movs	r0, #4
 80037f8:	f7fd fb36 	bl	8000e68 <ctlnetwork>
  ctlnetwork(CN_GET_TIMEOUT, (void*)&gWIZNETTIME);
 80037fc:	193b      	adds	r3, r7, r4
 80037fe:	0019      	movs	r1, r3
 8003800:	2005      	movs	r0, #5
 8003802:	f7fd fb31 	bl	8000e68 <ctlnetwork>

  LOG("TIMEOUT: %d, %d\r\n", gWIZNETTIME.retry_cnt,gWIZNETTIME.time_100us);
 8003806:	0021      	movs	r1, r4
 8003808:	187b      	adds	r3, r7, r1
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	001a      	movs	r2, r3
 800380e:	187b      	adds	r3, r7, r1
 8003810:	885b      	ldrh	r3, [r3, #2]
 8003812:	4976      	ldr	r1, [pc, #472]	@ (80039ec <network_init+0x20c>)
 8003814:	4876      	ldr	r0, [pc, #472]	@ (80039f0 <network_init+0x210>)
 8003816:	f000 feff 	bl	8004618 <siprintf>
 800381a:	4b75      	ldr	r3, [pc, #468]	@ (80039f0 <network_init+0x210>)
 800381c:	0018      	movs	r0, r3
 800381e:	f7fc fc6f 	bl	8000100 <strlen>
 8003822:	0003      	movs	r3, r0
 8003824:	b299      	uxth	r1, r3
 8003826:	23fa      	movs	r3, #250	@ 0xfa
 8003828:	009a      	lsls	r2, r3, #2
 800382a:	4b71      	ldr	r3, [pc, #452]	@ (80039f0 <network_init+0x210>)
 800382c:	0018      	movs	r0, r3
 800382e:	f7ff fb8d 	bl	8002f4c <USART3_TX_transmit>

	ctlnetwork(CN_SET_NETINFO, (void*)&gWIZNETINFO);
 8003832:	4b70      	ldr	r3, [pc, #448]	@ (80039f4 <network_init+0x214>)
 8003834:	0019      	movs	r1, r3
 8003836:	2000      	movs	r0, #0
 8003838:	f7fd fb16 	bl	8000e68 <ctlnetwork>
	ctlnetwork(CN_GET_NETINFO, (void*)&gWIZNETINFO);
 800383c:	4b6d      	ldr	r3, [pc, #436]	@ (80039f4 <network_init+0x214>)
 800383e:	0019      	movs	r1, r3
 8003840:	2001      	movs	r0, #1
 8003842:	f7fd fb11 	bl	8000e68 <ctlnetwork>
	// Display Network Information
  uint8_t tmpstr[6];
	ctlwizchip(CW_GET_ID,(void*)tmpstr);
 8003846:	1d3b      	adds	r3, r7, #4
 8003848:	0019      	movs	r1, r3
 800384a:	2008      	movs	r0, #8
 800384c:	f7fd fa2c 	bl	8000ca8 <ctlwizchip>
	LOG("\r\n=== %s NET CONF ===\r\n",(char*)tmpstr);
 8003850:	1d3a      	adds	r2, r7, #4
 8003852:	4969      	ldr	r1, [pc, #420]	@ (80039f8 <network_init+0x218>)
 8003854:	4b66      	ldr	r3, [pc, #408]	@ (80039f0 <network_init+0x210>)
 8003856:	0018      	movs	r0, r3
 8003858:	f000 fede 	bl	8004618 <siprintf>
 800385c:	4b64      	ldr	r3, [pc, #400]	@ (80039f0 <network_init+0x210>)
 800385e:	0018      	movs	r0, r3
 8003860:	f7fc fc4e 	bl	8000100 <strlen>
 8003864:	0003      	movs	r3, r0
 8003866:	b299      	uxth	r1, r3
 8003868:	23fa      	movs	r3, #250	@ 0xfa
 800386a:	009a      	lsls	r2, r3, #2
 800386c:	4b60      	ldr	r3, [pc, #384]	@ (80039f0 <network_init+0x210>)
 800386e:	0018      	movs	r0, r3
 8003870:	f7ff fb6c 	bl	8002f4c <USART3_TX_transmit>
	LOG("MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8003874:	4b5f      	ldr	r3, [pc, #380]	@ (80039f4 <network_init+0x214>)
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	001e      	movs	r6, r3
 800387a:	4b5e      	ldr	r3, [pc, #376]	@ (80039f4 <network_init+0x214>)
 800387c:	785b      	ldrb	r3, [r3, #1]
 800387e:	469c      	mov	ip, r3
 8003880:	4b5c      	ldr	r3, [pc, #368]	@ (80039f4 <network_init+0x214>)
 8003882:	789b      	ldrb	r3, [r3, #2]
 8003884:	001a      	movs	r2, r3
 8003886:	4b5b      	ldr	r3, [pc, #364]	@ (80039f4 <network_init+0x214>)
 8003888:	78db      	ldrb	r3, [r3, #3]
 800388a:	001c      	movs	r4, r3
 800388c:	4b59      	ldr	r3, [pc, #356]	@ (80039f4 <network_init+0x214>)
 800388e:	791b      	ldrb	r3, [r3, #4]
 8003890:	001d      	movs	r5, r3
 8003892:	4b58      	ldr	r3, [pc, #352]	@ (80039f4 <network_init+0x214>)
 8003894:	795b      	ldrb	r3, [r3, #5]
 8003896:	4959      	ldr	r1, [pc, #356]	@ (80039fc <network_init+0x21c>)
 8003898:	4855      	ldr	r0, [pc, #340]	@ (80039f0 <network_init+0x210>)
 800389a:	9303      	str	r3, [sp, #12]
 800389c:	9502      	str	r5, [sp, #8]
 800389e:	9401      	str	r4, [sp, #4]
 80038a0:	9200      	str	r2, [sp, #0]
 80038a2:	4663      	mov	r3, ip
 80038a4:	0032      	movs	r2, r6
 80038a6:	f000 feb7 	bl	8004618 <siprintf>
 80038aa:	4b51      	ldr	r3, [pc, #324]	@ (80039f0 <network_init+0x210>)
 80038ac:	0018      	movs	r0, r3
 80038ae:	f7fc fc27 	bl	8000100 <strlen>
 80038b2:	0003      	movs	r3, r0
 80038b4:	b299      	uxth	r1, r3
 80038b6:	23fa      	movs	r3, #250	@ 0xfa
 80038b8:	009a      	lsls	r2, r3, #2
 80038ba:	4b4d      	ldr	r3, [pc, #308]	@ (80039f0 <network_init+0x210>)
 80038bc:	0018      	movs	r0, r3
 80038be:	f7ff fb45 	bl	8002f4c <USART3_TX_transmit>
    gWIZNETINFO.mac[0],gWIZNETINFO.mac[1],gWIZNETINFO.mac[2],gWIZNETINFO.mac[3],gWIZNETINFO.mac[4],gWIZNETINFO.mac[5]);
	LOG("SIP: %d.%d.%d.%d\r\n", gWIZNETINFO.ip[0],gWIZNETINFO.ip[1],gWIZNETINFO.ip[2],gWIZNETINFO.ip[3]);
 80038c2:	4b4c      	ldr	r3, [pc, #304]	@ (80039f4 <network_init+0x214>)
 80038c4:	799b      	ldrb	r3, [r3, #6]
 80038c6:	001c      	movs	r4, r3
 80038c8:	4b4a      	ldr	r3, [pc, #296]	@ (80039f4 <network_init+0x214>)
 80038ca:	79db      	ldrb	r3, [r3, #7]
 80038cc:	001d      	movs	r5, r3
 80038ce:	4b49      	ldr	r3, [pc, #292]	@ (80039f4 <network_init+0x214>)
 80038d0:	7a1b      	ldrb	r3, [r3, #8]
 80038d2:	001a      	movs	r2, r3
 80038d4:	4b47      	ldr	r3, [pc, #284]	@ (80039f4 <network_init+0x214>)
 80038d6:	7a5b      	ldrb	r3, [r3, #9]
 80038d8:	4949      	ldr	r1, [pc, #292]	@ (8003a00 <network_init+0x220>)
 80038da:	4845      	ldr	r0, [pc, #276]	@ (80039f0 <network_init+0x210>)
 80038dc:	9301      	str	r3, [sp, #4]
 80038de:	9200      	str	r2, [sp, #0]
 80038e0:	002b      	movs	r3, r5
 80038e2:	0022      	movs	r2, r4
 80038e4:	f000 fe98 	bl	8004618 <siprintf>
 80038e8:	4b41      	ldr	r3, [pc, #260]	@ (80039f0 <network_init+0x210>)
 80038ea:	0018      	movs	r0, r3
 80038ec:	f7fc fc08 	bl	8000100 <strlen>
 80038f0:	0003      	movs	r3, r0
 80038f2:	b299      	uxth	r1, r3
 80038f4:	23fa      	movs	r3, #250	@ 0xfa
 80038f6:	009a      	lsls	r2, r3, #2
 80038f8:	4b3d      	ldr	r3, [pc, #244]	@ (80039f0 <network_init+0x210>)
 80038fa:	0018      	movs	r0, r3
 80038fc:	f7ff fb26 	bl	8002f4c <USART3_TX_transmit>
	LOG("GAR: %d.%d.%d.%d\r\n", gWIZNETINFO.gw[0],gWIZNETINFO.gw[1],gWIZNETINFO.gw[2],gWIZNETINFO.gw[3]);
 8003900:	4b3c      	ldr	r3, [pc, #240]	@ (80039f4 <network_init+0x214>)
 8003902:	7b9b      	ldrb	r3, [r3, #14]
 8003904:	001c      	movs	r4, r3
 8003906:	4b3b      	ldr	r3, [pc, #236]	@ (80039f4 <network_init+0x214>)
 8003908:	7bdb      	ldrb	r3, [r3, #15]
 800390a:	001d      	movs	r5, r3
 800390c:	4b39      	ldr	r3, [pc, #228]	@ (80039f4 <network_init+0x214>)
 800390e:	7c1b      	ldrb	r3, [r3, #16]
 8003910:	001a      	movs	r2, r3
 8003912:	4b38      	ldr	r3, [pc, #224]	@ (80039f4 <network_init+0x214>)
 8003914:	7c5b      	ldrb	r3, [r3, #17]
 8003916:	493b      	ldr	r1, [pc, #236]	@ (8003a04 <network_init+0x224>)
 8003918:	4835      	ldr	r0, [pc, #212]	@ (80039f0 <network_init+0x210>)
 800391a:	9301      	str	r3, [sp, #4]
 800391c:	9200      	str	r2, [sp, #0]
 800391e:	002b      	movs	r3, r5
 8003920:	0022      	movs	r2, r4
 8003922:	f000 fe79 	bl	8004618 <siprintf>
 8003926:	4b32      	ldr	r3, [pc, #200]	@ (80039f0 <network_init+0x210>)
 8003928:	0018      	movs	r0, r3
 800392a:	f7fc fbe9 	bl	8000100 <strlen>
 800392e:	0003      	movs	r3, r0
 8003930:	b299      	uxth	r1, r3
 8003932:	23fa      	movs	r3, #250	@ 0xfa
 8003934:	009a      	lsls	r2, r3, #2
 8003936:	4b2e      	ldr	r3, [pc, #184]	@ (80039f0 <network_init+0x210>)
 8003938:	0018      	movs	r0, r3
 800393a:	f7ff fb07 	bl	8002f4c <USART3_TX_transmit>
	LOG("SUB: %d.%d.%d.%d\r\n", gWIZNETINFO.sn[0],gWIZNETINFO.sn[1],gWIZNETINFO.sn[2],gWIZNETINFO.sn[3]);
 800393e:	4b2d      	ldr	r3, [pc, #180]	@ (80039f4 <network_init+0x214>)
 8003940:	7a9b      	ldrb	r3, [r3, #10]
 8003942:	001c      	movs	r4, r3
 8003944:	4b2b      	ldr	r3, [pc, #172]	@ (80039f4 <network_init+0x214>)
 8003946:	7adb      	ldrb	r3, [r3, #11]
 8003948:	001d      	movs	r5, r3
 800394a:	4b2a      	ldr	r3, [pc, #168]	@ (80039f4 <network_init+0x214>)
 800394c:	7b1b      	ldrb	r3, [r3, #12]
 800394e:	001a      	movs	r2, r3
 8003950:	4b28      	ldr	r3, [pc, #160]	@ (80039f4 <network_init+0x214>)
 8003952:	7b5b      	ldrb	r3, [r3, #13]
 8003954:	492c      	ldr	r1, [pc, #176]	@ (8003a08 <network_init+0x228>)
 8003956:	4826      	ldr	r0, [pc, #152]	@ (80039f0 <network_init+0x210>)
 8003958:	9301      	str	r3, [sp, #4]
 800395a:	9200      	str	r2, [sp, #0]
 800395c:	002b      	movs	r3, r5
 800395e:	0022      	movs	r2, r4
 8003960:	f000 fe5a 	bl	8004618 <siprintf>
 8003964:	4b22      	ldr	r3, [pc, #136]	@ (80039f0 <network_init+0x210>)
 8003966:	0018      	movs	r0, r3
 8003968:	f7fc fbca 	bl	8000100 <strlen>
 800396c:	0003      	movs	r3, r0
 800396e:	b299      	uxth	r1, r3
 8003970:	23fa      	movs	r3, #250	@ 0xfa
 8003972:	009a      	lsls	r2, r3, #2
 8003974:	4b1e      	ldr	r3, [pc, #120]	@ (80039f0 <network_init+0x210>)
 8003976:	0018      	movs	r0, r3
 8003978:	f7ff fae8 	bl	8002f4c <USART3_TX_transmit>
	LOG("DNS: %d.%d.%d.%d\r\n", gWIZNETINFO.dns[0],gWIZNETINFO.dns[1],gWIZNETINFO.dns[2],gWIZNETINFO.dns[3]);
 800397c:	4b1d      	ldr	r3, [pc, #116]	@ (80039f4 <network_init+0x214>)
 800397e:	7c9b      	ldrb	r3, [r3, #18]
 8003980:	001c      	movs	r4, r3
 8003982:	4b1c      	ldr	r3, [pc, #112]	@ (80039f4 <network_init+0x214>)
 8003984:	7cdb      	ldrb	r3, [r3, #19]
 8003986:	001d      	movs	r5, r3
 8003988:	4b1a      	ldr	r3, [pc, #104]	@ (80039f4 <network_init+0x214>)
 800398a:	7d1b      	ldrb	r3, [r3, #20]
 800398c:	001a      	movs	r2, r3
 800398e:	4b19      	ldr	r3, [pc, #100]	@ (80039f4 <network_init+0x214>)
 8003990:	7d5b      	ldrb	r3, [r3, #21]
 8003992:	491e      	ldr	r1, [pc, #120]	@ (8003a0c <network_init+0x22c>)
 8003994:	4816      	ldr	r0, [pc, #88]	@ (80039f0 <network_init+0x210>)
 8003996:	9301      	str	r3, [sp, #4]
 8003998:	9200      	str	r2, [sp, #0]
 800399a:	002b      	movs	r3, r5
 800399c:	0022      	movs	r2, r4
 800399e:	f000 fe3b 	bl	8004618 <siprintf>
 80039a2:	4b13      	ldr	r3, [pc, #76]	@ (80039f0 <network_init+0x210>)
 80039a4:	0018      	movs	r0, r3
 80039a6:	f7fc fbab 	bl	8000100 <strlen>
 80039aa:	0003      	movs	r3, r0
 80039ac:	b299      	uxth	r1, r3
 80039ae:	23fa      	movs	r3, #250	@ 0xfa
 80039b0:	009a      	lsls	r2, r3, #2
 80039b2:	4b0f      	ldr	r3, [pc, #60]	@ (80039f0 <network_init+0x210>)
 80039b4:	0018      	movs	r0, r3
 80039b6:	f7ff fac9 	bl	8002f4c <USART3_TX_transmit>
	LOG("======================\r\n");
 80039ba:	4a15      	ldr	r2, [pc, #84]	@ (8003a10 <network_init+0x230>)
 80039bc:	4b0c      	ldr	r3, [pc, #48]	@ (80039f0 <network_init+0x210>)
 80039be:	0011      	movs	r1, r2
 80039c0:	0018      	movs	r0, r3
 80039c2:	f000 fe29 	bl	8004618 <siprintf>
 80039c6:	4b0a      	ldr	r3, [pc, #40]	@ (80039f0 <network_init+0x210>)
 80039c8:	0018      	movs	r0, r3
 80039ca:	f7fc fb99 	bl	8000100 <strlen>
 80039ce:	0003      	movs	r3, r0
 80039d0:	b299      	uxth	r1, r3
 80039d2:	23fa      	movs	r3, #250	@ 0xfa
 80039d4:	009a      	lsls	r2, r3, #2
 80039d6:	4b06      	ldr	r3, [pc, #24]	@ (80039f0 <network_init+0x210>)
 80039d8:	0018      	movs	r0, r3
 80039da:	f7ff fab7 	bl	8002f4c <USART3_TX_transmit>
}
 80039de:	46c0      	nop			@ (mov r8, r8)
 80039e0:	46bd      	mov	sp, r7
 80039e2:	b005      	add	sp, #20
 80039e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039e6:	46c0      	nop			@ (mov r8, r8)
 80039e8:	08004ee4 	.word	0x08004ee4
 80039ec:	08004e24 	.word	0x08004e24
 80039f0:	200000b4 	.word	0x200000b4
 80039f4:	20000cbc 	.word	0x20000cbc
 80039f8:	08004e38 	.word	0x08004e38
 80039fc:	08004e50 	.word	0x08004e50
 8003a00:	08004e78 	.word	0x08004e78
 8003a04:	08004e8c 	.word	0x08004e8c
 8003a08:	08004ea0 	.word	0x08004ea0
 8003a0c:	08004eb4 	.word	0x08004eb4
 8003a10:	08004ec8 	.word	0x08004ec8

08003a14 <LL_GPIO_SetOutputPin>:
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b082      	sub	sp, #8
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	683a      	ldr	r2, [r7, #0]
 8003a22:	619a      	str	r2, [r3, #24]
}
 8003a24:	46c0      	nop			@ (mov r8, r8)
 8003a26:	46bd      	mov	sp, r7
 8003a28:	b002      	add	sp, #8
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <LL_GPIO_ResetOutputPin>:
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	683a      	ldr	r2, [r7, #0]
 8003a3a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003a3c:	46c0      	nop			@ (mov r8, r8)
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	b002      	add	sp, #8
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <putcomdata>:
const uint8_t PCA9555_mask_int[32] ={1,2,3,10,9,8,12,14,
									16,18,20,22,24,26,28,30,
									32,34,36,38,40,42,44,46,
									48,50,52};

int putcomdata(uint8_t *data, uint16_t len, uint8_t source) {
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b086      	sub	sp, #24
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	0008      	movs	r0, r1
 8003a4e:	0011      	movs	r1, r2
 8003a50:	1cbb      	adds	r3, r7, #2
 8003a52:	1c02      	adds	r2, r0, #0
 8003a54:	801a      	strh	r2, [r3, #0]
 8003a56:	1c7b      	adds	r3, r7, #1
 8003a58:	1c0a      	adds	r2, r1, #0
 8003a5a:	701a      	strb	r2, [r3, #0]
	char *ptr = (char*) malloc(len);
 8003a5c:	1cbb      	adds	r3, r7, #2
 8003a5e:	881b      	ldrh	r3, [r3, #0]
 8003a60:	0018      	movs	r0, r3
 8003a62:	f000 fd13 	bl	800448c <malloc>
 8003a66:	0003      	movs	r3, r0
 8003a68:	617b      	str	r3, [r7, #20]
	memcpy(ptr, data, len);
 8003a6a:	1cbb      	adds	r3, r7, #2
 8003a6c:	881a      	ldrh	r2, [r3, #0]
 8003a6e:	6879      	ldr	r1, [r7, #4]
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	0018      	movs	r0, r3
 8003a74:	f000 fe36 	bl	80046e4 <memcpy>
	RS232_DATA *msg = (RS232_DATA*) malloc(sizeof(RS232_DATA));
 8003a78:	2008      	movs	r0, #8
 8003a7a:	f000 fd07 	bl	800448c <malloc>
 8003a7e:	0003      	movs	r3, r0
 8003a80:	613b      	str	r3, [r7, #16]
	msg->source = source;
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	1c7a      	adds	r2, r7, #1
 8003a86:	7812      	ldrb	r2, [r2, #0]
 8003a88:	701a      	strb	r2, [r3, #0]
	msg->len = len;
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	1cba      	adds	r2, r7, #2
 8003a8e:	8812      	ldrh	r2, [r2, #0]
 8003a90:	805a      	strh	r2, [r3, #2]
	msg->ptr_data = ptr;
 8003a92:	697a      	ldr	r2, [r7, #20]
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	605a      	str	r2, [r3, #4]
	int result = queue_put(DP_RxQueue, msg);
 8003a98:	4b0d      	ldr	r3, [pc, #52]	@ (8003ad0 <putcomdata+0x8c>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	693a      	ldr	r2, [r7, #16]
 8003a9e:	0011      	movs	r1, r2
 8003aa0:	0018      	movs	r0, r3
 8003aa2:	f000 fc67 	bl	8004374 <queue_put>
 8003aa6:	0003      	movs	r3, r0
 8003aa8:	60fb      	str	r3, [r7, #12]
	if (!result) {
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d109      	bne.n	8003ac4 <putcomdata+0x80>
		free(ptr);
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	0018      	movs	r0, r3
 8003ab4:	f000 fcf4 	bl	80044a0 <free>
		free(msg);
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	0018      	movs	r0, r3
 8003abc:	f000 fcf0 	bl	80044a0 <free>
		return 0;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	e000      	b.n	8003ac6 <putcomdata+0x82>
	}
	return 1;
 8003ac4:	2301      	movs	r3, #1
}
 8003ac6:	0018      	movs	r0, r3
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	b006      	add	sp, #24
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	46c0      	nop			@ (mov r8, r8)
 8003ad0:	20000ce0 	.word	0x20000ce0

08003ad4 <handler_comdata>:

int handler_comdata() {
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
	DataType_T ptr;
	RS232_DATA *comPtr;
	if (queue_get(DP_RxQueue, &ptr)) {
 8003ada:	4b22      	ldr	r3, [pc, #136]	@ (8003b64 <handler_comdata+0x90>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	003a      	movs	r2, r7
 8003ae0:	0011      	movs	r1, r2
 8003ae2:	0018      	movs	r0, r3
 8003ae4:	f000 fc73 	bl	80043ce <queue_get>
 8003ae8:	1e03      	subs	r3, r0, #0
 8003aea:	d035      	beq.n	8003b58 <handler_comdata+0x84>
		comPtr = (RS232_DATA*) ptr;
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	607b      	str	r3, [r7, #4]
		switch (comPtr->source) {
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d00c      	beq.n	8003b12 <handler_comdata+0x3e>
 8003af8:	2b03      	cmp	r3, #3
 8003afa:	d123      	bne.n	8003b44 <handler_comdata+0x70>
		case source_debug:
			COM_DEBUG_trans(comPtr->ptr_data, comPtr->len);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	0018      	movs	r0, r3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	885b      	ldrh	r3, [r3, #2]
 8003b06:	22fa      	movs	r2, #250	@ 0xfa
 8003b08:	0092      	lsls	r2, r2, #2
 8003b0a:	0019      	movs	r1, r3
 8003b0c:	f7ff fa1e 	bl	8002f4c <USART3_TX_transmit>
			break;
 8003b10:	e019      	b.n	8003b46 <handler_comdata+0x72>
		case source_485:
			RS485_DE();
 8003b12:	2380      	movs	r3, #128	@ 0x80
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	4a14      	ldr	r2, [pc, #80]	@ (8003b68 <handler_comdata+0x94>)
 8003b18:	0019      	movs	r1, r3
 8003b1a:	0010      	movs	r0, r2
 8003b1c:	f7ff ff7a 	bl	8003a14 <LL_GPIO_SetOutputPin>
			COM_RS485_trans(comPtr->ptr_data, comPtr->len);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6858      	ldr	r0, [r3, #4]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	885b      	ldrh	r3, [r3, #2]
 8003b28:	0019      	movs	r1, r3
 8003b2a:	23fa      	movs	r3, #250	@ 0xfa
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	001a      	movs	r2, r3
 8003b30:	f7ff f9ea 	bl	8002f08 <USART1_TX_transmit>
			RS485_RE();
 8003b34:	2380      	movs	r3, #128	@ 0x80
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	4a0b      	ldr	r2, [pc, #44]	@ (8003b68 <handler_comdata+0x94>)
 8003b3a:	0019      	movs	r1, r3
 8003b3c:	0010      	movs	r0, r2
 8003b3e:	f7ff ff75 	bl	8003a2c <LL_GPIO_ResetOutputPin>
			break;
 8003b42:	e000      	b.n	8003b46 <handler_comdata+0x72>
		default:
			break;
 8003b44:	46c0      	nop			@ (mov r8, r8)
		}

		free((char*) comPtr->ptr_data);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	0018      	movs	r0, r3
 8003b4c:	f000 fca8 	bl	80044a0 <free>
		free(comPtr);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	0018      	movs	r0, r3
 8003b54:	f000 fca4 	bl	80044a0 <free>
	}
	return 1;
 8003b58:	2301      	movs	r3, #1
}
 8003b5a:	0018      	movs	r0, r3
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	b002      	add	sp, #8
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	46c0      	nop			@ (mov r8, r8)
 8003b64:	20000ce0 	.word	0x20000ce0
 8003b68:	50000c00 	.word	0x50000c00

08003b6c <RJ45_IO_setup>:

void RJ45_IO_setup(){
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b082      	sub	sp, #8
 8003b70:	af00      	add	r7, sp, #0

	for (int i = 0; i < 4; i++) {
 8003b72:	2300      	movs	r3, #0
 8003b74:	607b      	str	r3, [r7, #4]
 8003b76:	e00d      	b.n	8003b94 <RJ45_IO_setup+0x28>
		PCA9555_Init16(PCA9555_addr[i],PCA9555_port_config[i]);
 8003b78:	4a0a      	ldr	r2, [pc, #40]	@ (8003ba4 <RJ45_IO_setup+0x38>)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	18d3      	adds	r3, r2, r3
 8003b7e:	7818      	ldrb	r0, [r3, #0]
 8003b80:	4b09      	ldr	r3, [pc, #36]	@ (8003ba8 <RJ45_IO_setup+0x3c>)
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	0052      	lsls	r2, r2, #1
 8003b86:	5ad3      	ldrh	r3, [r2, r3]
 8003b88:	0019      	movs	r1, r3
 8003b8a:	f000 fb8c 	bl	80042a6 <PCA9555_Init16>
	for (int i = 0; i < 4; i++) {
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	3301      	adds	r3, #1
 8003b92:	607b      	str	r3, [r7, #4]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2b03      	cmp	r3, #3
 8003b98:	ddee      	ble.n	8003b78 <RJ45_IO_setup+0xc>
	}
}
 8003b9a:	46c0      	nop			@ (mov r8, r8)
 8003b9c:	46c0      	nop			@ (mov r8, r8)
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	b002      	add	sp, #8
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	08005098 	.word	0x08005098
 8003ba8:	0800509c 	.word	0x0800509c

08003bac <RJ45_set_output>:

void RJ45_set_output(uint32_t value){
 8003bac:	b5b0      	push	{r4, r5, r7, lr}
 8003bae:	b090      	sub	sp, #64	@ 0x40
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6278      	str	r0, [r7, #36]	@ 0x24
	uint16_t data[4] = { 0 };
 8003bb4:	230c      	movs	r3, #12
 8003bb6:	2220      	movs	r2, #32
 8003bb8:	189b      	adds	r3, r3, r2
 8003bba:	19db      	adds	r3, r3, r7
 8003bbc:	0018      	movs	r0, r3
 8003bbe:	2308      	movs	r3, #8
 8003bc0:	001a      	movs	r2, r3
 8003bc2:	2100      	movs	r1, #0
 8003bc4:	f000 fd48 	bl	8004658 <memset>
	uint64_t u64data = 0;
 8003bc8:	2200      	movs	r2, #0
 8003bca:	2300      	movs	r3, #0
 8003bcc:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003bce:	63fb      	str	r3, [r7, #60]	@ 0x3c
	int i = 0;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	637b      	str	r3, [r7, #52]	@ 0x34
	for (i = 0; i < PCA9555_MAX_OUTPUT_PIN; i++) {
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	637b      	str	r3, [r7, #52]	@ 0x34
 8003bd8:	e020      	b.n	8003c1c <RJ45_set_output+0x70>
		if ((value >> i) & 0x01) {
 8003bda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bde:	40da      	lsrs	r2, r3
 8003be0:	0013      	movs	r3, r2
 8003be2:	2201      	movs	r2, #1
 8003be4:	4013      	ands	r3, r2
 8003be6:	d016      	beq.n	8003c16 <RJ45_set_output+0x6a>
			u64data |= 1 << PCA9555_mask_out[i];
 8003be8:	4a2f      	ldr	r2, [pc, #188]	@ (8003ca8 <RJ45_set_output+0xfc>)
 8003bea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bec:	18d3      	adds	r3, r2, r3
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	001a      	movs	r2, r3
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	4093      	lsls	r3, r2
 8003bf6:	61bb      	str	r3, [r7, #24]
 8003bf8:	17db      	asrs	r3, r3, #31
 8003bfa:	61fb      	str	r3, [r7, #28]
 8003bfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bfe:	69b9      	ldr	r1, [r7, #24]
 8003c00:	69fa      	ldr	r2, [r7, #28]
 8003c02:	0008      	movs	r0, r1
 8003c04:	4318      	orrs	r0, r3
 8003c06:	6038      	str	r0, [r7, #0]
 8003c08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c0a:	431a      	orrs	r2, r3
 8003c0c:	607a      	str	r2, [r7, #4]
 8003c0e:	683a      	ldr	r2, [r7, #0]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003c14:	63fb      	str	r3, [r7, #60]	@ 0x3c
	for (i = 0; i < PCA9555_MAX_OUTPUT_PIN; i++) {
 8003c16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c18:	3301      	adds	r3, #1
 8003c1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c1e:	2b1a      	cmp	r3, #26
 8003c20:	dddb      	ble.n	8003bda <RJ45_set_output+0x2e>
		}
	}

	data[0] = (uint16_t) (u64data);
 8003c22:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003c24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c26:	1c13      	adds	r3, r2, #0
 8003c28:	b29a      	uxth	r2, r3
 8003c2a:	210c      	movs	r1, #12
 8003c2c:	2020      	movs	r0, #32
 8003c2e:	180b      	adds	r3, r1, r0
 8003c30:	19db      	adds	r3, r3, r7
 8003c32:	801a      	strh	r2, [r3, #0]
	data[1] = (uint16_t) (u64data >> 16);
 8003c34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c36:	041b      	lsls	r3, r3, #16
 8003c38:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003c3a:	0c14      	lsrs	r4, r2, #16
 8003c3c:	431c      	orrs	r4, r3
 8003c3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c40:	0c1d      	lsrs	r5, r3, #16
 8003c42:	b2a2      	uxth	r2, r4
 8003c44:	180b      	adds	r3, r1, r0
 8003c46:	19db      	adds	r3, r3, r7
 8003c48:	805a      	strh	r2, [r3, #2]
	data[2] = (uint16_t) (u64data >> 32);
 8003c4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c4c:	001b      	movs	r3, r3
 8003c4e:	613b      	str	r3, [r7, #16]
 8003c50:	2300      	movs	r3, #0
 8003c52:	617b      	str	r3, [r7, #20]
 8003c54:	8a3a      	ldrh	r2, [r7, #16]
 8003c56:	180b      	adds	r3, r1, r0
 8003c58:	19db      	adds	r3, r3, r7
 8003c5a:	809a      	strh	r2, [r3, #4]
	data[3] = (uint16_t) (u64data >> 48);
 8003c5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c5e:	0c1b      	lsrs	r3, r3, #16
 8003c60:	60bb      	str	r3, [r7, #8]
 8003c62:	2300      	movs	r3, #0
 8003c64:	60fb      	str	r3, [r7, #12]
 8003c66:	893a      	ldrh	r2, [r7, #8]
 8003c68:	180b      	adds	r3, r1, r0
 8003c6a:	19db      	adds	r3, r3, r7
 8003c6c:	80da      	strh	r2, [r3, #6]

	for (i = 0; i < 4; i++) {
 8003c6e:	2300      	movs	r3, #0
 8003c70:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c72:	e010      	b.n	8003c96 <RJ45_set_output+0xea>
		 PCA9555_Write16(PCA9555_addr[i],data[i]);
 8003c74:	4a0d      	ldr	r2, [pc, #52]	@ (8003cac <RJ45_set_output+0x100>)
 8003c76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c78:	18d3      	adds	r3, r2, r3
 8003c7a:	7818      	ldrb	r0, [r3, #0]
 8003c7c:	230c      	movs	r3, #12
 8003c7e:	2220      	movs	r2, #32
 8003c80:	189b      	adds	r3, r3, r2
 8003c82:	19db      	adds	r3, r3, r7
 8003c84:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003c86:	0052      	lsls	r2, r2, #1
 8003c88:	5ad3      	ldrh	r3, [r2, r3]
 8003c8a:	0019      	movs	r1, r3
 8003c8c:	f000 fb2c 	bl	80042e8 <PCA9555_Write16>
	for (i = 0; i < 4; i++) {
 8003c90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c92:	3301      	adds	r3, #1
 8003c94:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c98:	2b03      	cmp	r3, #3
 8003c9a:	ddeb      	ble.n	8003c74 <RJ45_set_output+0xc8>
	}
}
 8003c9c:	46c0      	nop			@ (mov r8, r8)
 8003c9e:	46c0      	nop			@ (mov r8, r8)
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	b010      	add	sp, #64	@ 0x40
 8003ca4:	bdb0      	pop	{r4, r5, r7, pc}
 8003ca6:	46c0      	nop			@ (mov r8, r8)
 8003ca8:	080050a4 	.word	0x080050a4
 8003cac:	08005098 	.word	0x08005098

08003cb0 <__NVIC_SetPriority>:
{
 8003cb0:	b590      	push	{r4, r7, lr}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	0002      	movs	r2, r0
 8003cb8:	6039      	str	r1, [r7, #0]
 8003cba:	1dfb      	adds	r3, r7, #7
 8003cbc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003cbe:	1dfb      	adds	r3, r7, #7
 8003cc0:	781b      	ldrb	r3, [r3, #0]
 8003cc2:	2b7f      	cmp	r3, #127	@ 0x7f
 8003cc4:	d828      	bhi.n	8003d18 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003cc6:	4a2f      	ldr	r2, [pc, #188]	@ (8003d84 <__NVIC_SetPriority+0xd4>)
 8003cc8:	1dfb      	adds	r3, r7, #7
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	b25b      	sxtb	r3, r3
 8003cce:	089b      	lsrs	r3, r3, #2
 8003cd0:	33c0      	adds	r3, #192	@ 0xc0
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	589b      	ldr	r3, [r3, r2]
 8003cd6:	1dfa      	adds	r2, r7, #7
 8003cd8:	7812      	ldrb	r2, [r2, #0]
 8003cda:	0011      	movs	r1, r2
 8003cdc:	2203      	movs	r2, #3
 8003cde:	400a      	ands	r2, r1
 8003ce0:	00d2      	lsls	r2, r2, #3
 8003ce2:	21ff      	movs	r1, #255	@ 0xff
 8003ce4:	4091      	lsls	r1, r2
 8003ce6:	000a      	movs	r2, r1
 8003ce8:	43d2      	mvns	r2, r2
 8003cea:	401a      	ands	r2, r3
 8003cec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	019b      	lsls	r3, r3, #6
 8003cf2:	22ff      	movs	r2, #255	@ 0xff
 8003cf4:	401a      	ands	r2, r3
 8003cf6:	1dfb      	adds	r3, r7, #7
 8003cf8:	781b      	ldrb	r3, [r3, #0]
 8003cfa:	0018      	movs	r0, r3
 8003cfc:	2303      	movs	r3, #3
 8003cfe:	4003      	ands	r3, r0
 8003d00:	00db      	lsls	r3, r3, #3
 8003d02:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003d04:	481f      	ldr	r0, [pc, #124]	@ (8003d84 <__NVIC_SetPriority+0xd4>)
 8003d06:	1dfb      	adds	r3, r7, #7
 8003d08:	781b      	ldrb	r3, [r3, #0]
 8003d0a:	b25b      	sxtb	r3, r3
 8003d0c:	089b      	lsrs	r3, r3, #2
 8003d0e:	430a      	orrs	r2, r1
 8003d10:	33c0      	adds	r3, #192	@ 0xc0
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	501a      	str	r2, [r3, r0]
}
 8003d16:	e031      	b.n	8003d7c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003d18:	4a1b      	ldr	r2, [pc, #108]	@ (8003d88 <__NVIC_SetPriority+0xd8>)
 8003d1a:	1dfb      	adds	r3, r7, #7
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	0019      	movs	r1, r3
 8003d20:	230f      	movs	r3, #15
 8003d22:	400b      	ands	r3, r1
 8003d24:	3b08      	subs	r3, #8
 8003d26:	089b      	lsrs	r3, r3, #2
 8003d28:	3306      	adds	r3, #6
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	18d3      	adds	r3, r2, r3
 8003d2e:	3304      	adds	r3, #4
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	1dfa      	adds	r2, r7, #7
 8003d34:	7812      	ldrb	r2, [r2, #0]
 8003d36:	0011      	movs	r1, r2
 8003d38:	2203      	movs	r2, #3
 8003d3a:	400a      	ands	r2, r1
 8003d3c:	00d2      	lsls	r2, r2, #3
 8003d3e:	21ff      	movs	r1, #255	@ 0xff
 8003d40:	4091      	lsls	r1, r2
 8003d42:	000a      	movs	r2, r1
 8003d44:	43d2      	mvns	r2, r2
 8003d46:	401a      	ands	r2, r3
 8003d48:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	019b      	lsls	r3, r3, #6
 8003d4e:	22ff      	movs	r2, #255	@ 0xff
 8003d50:	401a      	ands	r2, r3
 8003d52:	1dfb      	adds	r3, r7, #7
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	0018      	movs	r0, r3
 8003d58:	2303      	movs	r3, #3
 8003d5a:	4003      	ands	r3, r0
 8003d5c:	00db      	lsls	r3, r3, #3
 8003d5e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003d60:	4809      	ldr	r0, [pc, #36]	@ (8003d88 <__NVIC_SetPriority+0xd8>)
 8003d62:	1dfb      	adds	r3, r7, #7
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	001c      	movs	r4, r3
 8003d68:	230f      	movs	r3, #15
 8003d6a:	4023      	ands	r3, r4
 8003d6c:	3b08      	subs	r3, #8
 8003d6e:	089b      	lsrs	r3, r3, #2
 8003d70:	430a      	orrs	r2, r1
 8003d72:	3306      	adds	r3, #6
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	18c3      	adds	r3, r0, r3
 8003d78:	3304      	adds	r3, #4
 8003d7a:	601a      	str	r2, [r3, #0]
}
 8003d7c:	46c0      	nop			@ (mov r8, r8)
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	b003      	add	sp, #12
 8003d82:	bd90      	pop	{r4, r7, pc}
 8003d84:	e000e100 	.word	0xe000e100
 8003d88:	e000ed00 	.word	0xe000ed00

08003d8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b082      	sub	sp, #8
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	1e5a      	subs	r2, r3, #1
 8003d98:	2380      	movs	r3, #128	@ 0x80
 8003d9a:	045b      	lsls	r3, r3, #17
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d301      	bcc.n	8003da4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003da0:	2301      	movs	r3, #1
 8003da2:	e010      	b.n	8003dc6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003da4:	4b0a      	ldr	r3, [pc, #40]	@ (8003dd0 <SysTick_Config+0x44>)
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	3a01      	subs	r2, #1
 8003daa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003dac:	2301      	movs	r3, #1
 8003dae:	425b      	negs	r3, r3
 8003db0:	2103      	movs	r1, #3
 8003db2:	0018      	movs	r0, r3
 8003db4:	f7ff ff7c 	bl	8003cb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003db8:	4b05      	ldr	r3, [pc, #20]	@ (8003dd0 <SysTick_Config+0x44>)
 8003dba:	2200      	movs	r2, #0
 8003dbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003dbe:	4b04      	ldr	r3, [pc, #16]	@ (8003dd0 <SysTick_Config+0x44>)
 8003dc0:	2207      	movs	r2, #7
 8003dc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003dc4:	2300      	movs	r3, #0
}
 8003dc6:	0018      	movs	r0, r3
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	b002      	add	sp, #8
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	46c0      	nop			@ (mov r8, r8)
 8003dd0:	e000e010 	.word	0xe000e010

08003dd4 <LL_RCC_HSE_Enable>:
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003dd8:	4b04      	ldr	r3, [pc, #16]	@ (8003dec <LL_RCC_HSE_Enable+0x18>)
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	4b03      	ldr	r3, [pc, #12]	@ (8003dec <LL_RCC_HSE_Enable+0x18>)
 8003dde:	2180      	movs	r1, #128	@ 0x80
 8003de0:	0249      	lsls	r1, r1, #9
 8003de2:	430a      	orrs	r2, r1
 8003de4:	601a      	str	r2, [r3, #0]
}
 8003de6:	46c0      	nop			@ (mov r8, r8)
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	40021000 	.word	0x40021000

08003df0 <LL_RCC_HSE_IsReady>:
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003df4:	4b07      	ldr	r3, [pc, #28]	@ (8003e14 <LL_RCC_HSE_IsReady+0x24>)
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	2380      	movs	r3, #128	@ 0x80
 8003dfa:	029b      	lsls	r3, r3, #10
 8003dfc:	401a      	ands	r2, r3
 8003dfe:	2380      	movs	r3, #128	@ 0x80
 8003e00:	029b      	lsls	r3, r3, #10
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d101      	bne.n	8003e0a <LL_RCC_HSE_IsReady+0x1a>
 8003e06:	2301      	movs	r3, #1
 8003e08:	e000      	b.n	8003e0c <LL_RCC_HSE_IsReady+0x1c>
 8003e0a:	2300      	movs	r3, #0
}
 8003e0c:	0018      	movs	r0, r3
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	46c0      	nop			@ (mov r8, r8)
 8003e14:	40021000 	.word	0x40021000

08003e18 <LL_RCC_SetSysClkSource>:
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b082      	sub	sp, #8
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003e20:	4b06      	ldr	r3, [pc, #24]	@ (8003e3c <LL_RCC_SetSysClkSource+0x24>)
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	2207      	movs	r2, #7
 8003e26:	4393      	bics	r3, r2
 8003e28:	0019      	movs	r1, r3
 8003e2a:	4b04      	ldr	r3, [pc, #16]	@ (8003e3c <LL_RCC_SetSysClkSource+0x24>)
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	430a      	orrs	r2, r1
 8003e30:	609a      	str	r2, [r3, #8]
}
 8003e32:	46c0      	nop			@ (mov r8, r8)
 8003e34:	46bd      	mov	sp, r7
 8003e36:	b002      	add	sp, #8
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	46c0      	nop			@ (mov r8, r8)
 8003e3c:	40021000 	.word	0x40021000

08003e40 <LL_RCC_GetSysClkSource>:
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003e44:	4b03      	ldr	r3, [pc, #12]	@ (8003e54 <LL_RCC_GetSysClkSource+0x14>)
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	2238      	movs	r2, #56	@ 0x38
 8003e4a:	4013      	ands	r3, r2
}
 8003e4c:	0018      	movs	r0, r3
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	46c0      	nop			@ (mov r8, r8)
 8003e54:	40021000 	.word	0x40021000

08003e58 <LL_RCC_SetAHBPrescaler>:
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b082      	sub	sp, #8
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003e60:	4b06      	ldr	r3, [pc, #24]	@ (8003e7c <LL_RCC_SetAHBPrescaler+0x24>)
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	4a06      	ldr	r2, [pc, #24]	@ (8003e80 <LL_RCC_SetAHBPrescaler+0x28>)
 8003e66:	4013      	ands	r3, r2
 8003e68:	0019      	movs	r1, r3
 8003e6a:	4b04      	ldr	r3, [pc, #16]	@ (8003e7c <LL_RCC_SetAHBPrescaler+0x24>)
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	430a      	orrs	r2, r1
 8003e70:	609a      	str	r2, [r3, #8]
}
 8003e72:	46c0      	nop			@ (mov r8, r8)
 8003e74:	46bd      	mov	sp, r7
 8003e76:	b002      	add	sp, #8
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	46c0      	nop			@ (mov r8, r8)
 8003e7c:	40021000 	.word	0x40021000
 8003e80:	fffff0ff 	.word	0xfffff0ff

08003e84 <LL_RCC_SetAPB1Prescaler>:
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b082      	sub	sp, #8
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 8003e8c:	4b06      	ldr	r3, [pc, #24]	@ (8003ea8 <LL_RCC_SetAPB1Prescaler+0x24>)
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	4a06      	ldr	r2, [pc, #24]	@ (8003eac <LL_RCC_SetAPB1Prescaler+0x28>)
 8003e92:	4013      	ands	r3, r2
 8003e94:	0019      	movs	r1, r3
 8003e96:	4b04      	ldr	r3, [pc, #16]	@ (8003ea8 <LL_RCC_SetAPB1Prescaler+0x24>)
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	430a      	orrs	r2, r1
 8003e9c:	609a      	str	r2, [r3, #8]
}
 8003e9e:	46c0      	nop			@ (mov r8, r8)
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	b002      	add	sp, #8
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	46c0      	nop			@ (mov r8, r8)
 8003ea8:	40021000 	.word	0x40021000
 8003eac:	ffff8fff 	.word	0xffff8fff

08003eb0 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003eb4:	4b04      	ldr	r3, [pc, #16]	@ (8003ec8 <LL_RCC_PLL_Enable+0x18>)
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	4b03      	ldr	r3, [pc, #12]	@ (8003ec8 <LL_RCC_PLL_Enable+0x18>)
 8003eba:	2180      	movs	r1, #128	@ 0x80
 8003ebc:	0449      	lsls	r1, r1, #17
 8003ebe:	430a      	orrs	r2, r1
 8003ec0:	601a      	str	r2, [r3, #0]
}
 8003ec2:	46c0      	nop			@ (mov r8, r8)
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	40021000 	.word	0x40021000

08003ecc <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003ed0:	4b07      	ldr	r3, [pc, #28]	@ (8003ef0 <LL_RCC_PLL_IsReady+0x24>)
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	2380      	movs	r3, #128	@ 0x80
 8003ed6:	049b      	lsls	r3, r3, #18
 8003ed8:	401a      	ands	r2, r3
 8003eda:	2380      	movs	r3, #128	@ 0x80
 8003edc:	049b      	lsls	r3, r3, #18
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d101      	bne.n	8003ee6 <LL_RCC_PLL_IsReady+0x1a>
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e000      	b.n	8003ee8 <LL_RCC_PLL_IsReady+0x1c>
 8003ee6:	2300      	movs	r3, #0
}
 8003ee8:	0018      	movs	r0, r3
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	46c0      	nop			@ (mov r8, r8)
 8003ef0:	40021000 	.word	0x40021000

08003ef4 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	60b9      	str	r1, [r7, #8]
 8003efe:	607a      	str	r2, [r7, #4]
 8003f00:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 8003f02:	4b0a      	ldr	r3, [pc, #40]	@ (8003f2c <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	4a0a      	ldr	r2, [pc, #40]	@ (8003f30 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8003f08:	4013      	ands	r3, r2
 8003f0a:	0019      	movs	r1, r3
 8003f0c:	68fa      	ldr	r2, [r7, #12]
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	431a      	orrs	r2, r3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	021b      	lsls	r3, r3, #8
 8003f16:	431a      	orrs	r2, r3
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	431a      	orrs	r2, r3
 8003f1c:	4b03      	ldr	r3, [pc, #12]	@ (8003f2c <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8003f1e:	430a      	orrs	r2, r1
 8003f20:	60da      	str	r2, [r3, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 8003f22:	46c0      	nop			@ (mov r8, r8)
 8003f24:	46bd      	mov	sp, r7
 8003f26:	b004      	add	sp, #16
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	46c0      	nop			@ (mov r8, r8)
 8003f2c:	40021000 	.word	0x40021000
 8003f30:	1fff808c 	.word	0x1fff808c

08003f34 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8003f38:	4b04      	ldr	r3, [pc, #16]	@ (8003f4c <LL_RCC_PLL_EnableDomain_SYS+0x18>)
 8003f3a:	68da      	ldr	r2, [r3, #12]
 8003f3c:	4b03      	ldr	r3, [pc, #12]	@ (8003f4c <LL_RCC_PLL_EnableDomain_SYS+0x18>)
 8003f3e:	2180      	movs	r1, #128	@ 0x80
 8003f40:	0549      	lsls	r1, r1, #21
 8003f42:	430a      	orrs	r2, r1
 8003f44:	60da      	str	r2, [r3, #12]
}
 8003f46:	46c0      	nop			@ (mov r8, r8)
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	40021000 	.word	0x40021000

08003f50 <LL_APB1_GRP1_EnableClock>:
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR1, Periphs);
 8003f58:	4b07      	ldr	r3, [pc, #28]	@ (8003f78 <LL_APB1_GRP1_EnableClock+0x28>)
 8003f5a:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8003f5c:	4b06      	ldr	r3, [pc, #24]	@ (8003f78 <LL_APB1_GRP1_EnableClock+0x28>)
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	430a      	orrs	r2, r1
 8003f62:	63da      	str	r2, [r3, #60]	@ 0x3c
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 8003f64:	4b04      	ldr	r3, [pc, #16]	@ (8003f78 <LL_APB1_GRP1_EnableClock+0x28>)
 8003f66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
}
 8003f70:	46c0      	nop			@ (mov r8, r8)
 8003f72:	46bd      	mov	sp, r7
 8003f74:	b004      	add	sp, #16
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	40021000 	.word	0x40021000

08003f7c <LL_APB2_GRP1_EnableClock>:
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR2, Periphs);
 8003f84:	4b07      	ldr	r3, [pc, #28]	@ (8003fa4 <LL_APB2_GRP1_EnableClock+0x28>)
 8003f86:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8003f88:	4b06      	ldr	r3, [pc, #24]	@ (8003fa4 <LL_APB2_GRP1_EnableClock+0x28>)
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	430a      	orrs	r2, r1
 8003f8e:	641a      	str	r2, [r3, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 8003f90:	4b04      	ldr	r3, [pc, #16]	@ (8003fa4 <LL_APB2_GRP1_EnableClock+0x28>)
 8003f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	4013      	ands	r3, r2
 8003f98:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
}
 8003f9c:	46c0      	nop			@ (mov r8, r8)
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	b004      	add	sp, #16
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	40021000 	.word	0x40021000

08003fa8 <LL_SYSCFG_DisableDBATT>:
  *         @arg @ref LL_SYSCFG_UCPD2_STROBE
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_DisableDBATT(uint32_t ConfigDeadBattery)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b082      	sub	sp, #8
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->CFGR1, ConfigDeadBattery);
 8003fb0:	4b04      	ldr	r3, [pc, #16]	@ (8003fc4 <LL_SYSCFG_DisableDBATT+0x1c>)
 8003fb2:	6819      	ldr	r1, [r3, #0]
 8003fb4:	4b03      	ldr	r3, [pc, #12]	@ (8003fc4 <LL_SYSCFG_DisableDBATT+0x1c>)
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	430a      	orrs	r2, r1
 8003fba:	601a      	str	r2, [r3, #0]
}
 8003fbc:	46c0      	nop			@ (mov r8, r8)
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	b002      	add	sp, #8
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	40010000 	.word	0x40010000

08003fc8 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8003fd0:	4b06      	ldr	r3, [pc, #24]	@ (8003fec <LL_FLASH_SetLatency+0x24>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2207      	movs	r2, #7
 8003fd6:	4393      	bics	r3, r2
 8003fd8:	0019      	movs	r1, r3
 8003fda:	4b04      	ldr	r3, [pc, #16]	@ (8003fec <LL_FLASH_SetLatency+0x24>)
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	430a      	orrs	r2, r1
 8003fe0:	601a      	str	r2, [r3, #0]
}
 8003fe2:	46c0      	nop			@ (mov r8, r8)
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	b002      	add	sp, #8
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	46c0      	nop			@ (mov r8, r8)
 8003fec:	40022000 	.word	0x40022000

08003ff0 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8003ff4:	4b03      	ldr	r3, [pc, #12]	@ (8004004 <LL_FLASH_GetLatency+0x14>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2207      	movs	r2, #7
 8003ffa:	4013      	ands	r3, r2
}
 8003ffc:	0018      	movs	r0, r3
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	46c0      	nop			@ (mov r8, r8)
 8004004:	40022000 	.word	0x40022000

08004008 <main>:
static void setup();


uint8_t tmpval = 0;
char *hello ="hello thangnq\r\n";
int main(void) {
 8004008:	b580      	push	{r7, lr}
 800400a:	af00      	add	r7, sp, #0
	setup();
 800400c:	f000 f814 	bl	8004038 <setup>
	while (1) {
		handler_comdata();
 8004010:	f7ff fd60 	bl	8003ad4 <handler_comdata>
		//handler_IO();
		if((uint32_t)(u32MiliCount - u32lastprint) >= 1000){
 8004014:	4b06      	ldr	r3, [pc, #24]	@ (8004030 <main+0x28>)
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	4b06      	ldr	r3, [pc, #24]	@ (8004034 <main+0x2c>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	1ad2      	subs	r2, r2, r3
 800401e:	23fa      	movs	r3, #250	@ 0xfa
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	429a      	cmp	r2, r3
 8004024:	d3f4      	bcc.n	8004010 <main+0x8>
			u32lastprint = u32MiliCount;
 8004026:	4b02      	ldr	r3, [pc, #8]	@ (8004030 <main+0x28>)
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	4b02      	ldr	r3, [pc, #8]	@ (8004034 <main+0x2c>)
 800402c:	601a      	str	r2, [r3, #0]
		handler_comdata();
 800402e:	e7ef      	b.n	8004010 <main+0x8>
 8004030:	20000cd4 	.word	0x20000cd4
 8004034:	20000cdc 	.word	0x20000cdc

08004038 <setup>:
		}
	}
}

static void setup() {
 8004038:	b580      	push	{r7, lr}
 800403a:	af00      	add	r7, sp, #0
	SystemClock_Config();
 800403c:	f000 f8be 	bl	80041bc <SystemClock_Config>
	COM_DEBUG_init(115200);
 8004040:	23e1      	movs	r3, #225	@ 0xe1
 8004042:	025b      	lsls	r3, r3, #9
 8004044:	0018      	movs	r0, r3
 8004046:	f7fe fe9d 	bl	8002d84 <USART3_setup>
	COM_RS485_init(9600);
 800404a:	2396      	movs	r3, #150	@ 0x96
 800404c:	019b      	lsls	r3, r3, #6
 800404e:	0018      	movs	r0, r3
 8004050:	f7fe fe5e 	bl	8002d10 <USART1_setup>
	PRINT_AUTHOR_INFO();
 8004054:	4a4a      	ldr	r2, [pc, #296]	@ (8004180 <setup+0x148>)
 8004056:	4b4b      	ldr	r3, [pc, #300]	@ (8004184 <setup+0x14c>)
 8004058:	0011      	movs	r1, r2
 800405a:	0018      	movs	r0, r3
 800405c:	f000 fadc 	bl	8004618 <siprintf>
 8004060:	4b48      	ldr	r3, [pc, #288]	@ (8004184 <setup+0x14c>)
 8004062:	0018      	movs	r0, r3
 8004064:	f7fc f84c 	bl	8000100 <strlen>
 8004068:	0003      	movs	r3, r0
 800406a:	b299      	uxth	r1, r3
 800406c:	23fa      	movs	r3, #250	@ 0xfa
 800406e:	009a      	lsls	r2, r3, #2
 8004070:	4b44      	ldr	r3, [pc, #272]	@ (8004184 <setup+0x14c>)
 8004072:	0018      	movs	r0, r3
 8004074:	f7fe ff6a 	bl	8002f4c <USART3_TX_transmit>
 8004078:	4a43      	ldr	r2, [pc, #268]	@ (8004188 <setup+0x150>)
 800407a:	4944      	ldr	r1, [pc, #272]	@ (800418c <setup+0x154>)
 800407c:	4b41      	ldr	r3, [pc, #260]	@ (8004184 <setup+0x14c>)
 800407e:	0018      	movs	r0, r3
 8004080:	f000 faca 	bl	8004618 <siprintf>
 8004084:	4b3f      	ldr	r3, [pc, #252]	@ (8004184 <setup+0x14c>)
 8004086:	0018      	movs	r0, r3
 8004088:	f7fc f83a 	bl	8000100 <strlen>
 800408c:	0003      	movs	r3, r0
 800408e:	b299      	uxth	r1, r3
 8004090:	23fa      	movs	r3, #250	@ 0xfa
 8004092:	009a      	lsls	r2, r3, #2
 8004094:	4b3b      	ldr	r3, [pc, #236]	@ (8004184 <setup+0x14c>)
 8004096:	0018      	movs	r0, r3
 8004098:	f7fe ff58 	bl	8002f4c <USART3_TX_transmit>
 800409c:	4a3c      	ldr	r2, [pc, #240]	@ (8004190 <setup+0x158>)
 800409e:	493d      	ldr	r1, [pc, #244]	@ (8004194 <setup+0x15c>)
 80040a0:	4b38      	ldr	r3, [pc, #224]	@ (8004184 <setup+0x14c>)
 80040a2:	0018      	movs	r0, r3
 80040a4:	f000 fab8 	bl	8004618 <siprintf>
 80040a8:	4b36      	ldr	r3, [pc, #216]	@ (8004184 <setup+0x14c>)
 80040aa:	0018      	movs	r0, r3
 80040ac:	f7fc f828 	bl	8000100 <strlen>
 80040b0:	0003      	movs	r3, r0
 80040b2:	b299      	uxth	r1, r3
 80040b4:	23fa      	movs	r3, #250	@ 0xfa
 80040b6:	009a      	lsls	r2, r3, #2
 80040b8:	4b32      	ldr	r3, [pc, #200]	@ (8004184 <setup+0x14c>)
 80040ba:	0018      	movs	r0, r3
 80040bc:	f7fe ff46 	bl	8002f4c <USART3_TX_transmit>
 80040c0:	4a35      	ldr	r2, [pc, #212]	@ (8004198 <setup+0x160>)
 80040c2:	4936      	ldr	r1, [pc, #216]	@ (800419c <setup+0x164>)
 80040c4:	4b2f      	ldr	r3, [pc, #188]	@ (8004184 <setup+0x14c>)
 80040c6:	0018      	movs	r0, r3
 80040c8:	f000 faa6 	bl	8004618 <siprintf>
 80040cc:	4b2d      	ldr	r3, [pc, #180]	@ (8004184 <setup+0x14c>)
 80040ce:	0018      	movs	r0, r3
 80040d0:	f7fc f816 	bl	8000100 <strlen>
 80040d4:	0003      	movs	r3, r0
 80040d6:	b299      	uxth	r1, r3
 80040d8:	23fa      	movs	r3, #250	@ 0xfa
 80040da:	009a      	lsls	r2, r3, #2
 80040dc:	4b29      	ldr	r3, [pc, #164]	@ (8004184 <setup+0x14c>)
 80040de:	0018      	movs	r0, r3
 80040e0:	f7fe ff34 	bl	8002f4c <USART3_TX_transmit>
 80040e4:	4b2e      	ldr	r3, [pc, #184]	@ (80041a0 <setup+0x168>)
 80040e6:	4a2f      	ldr	r2, [pc, #188]	@ (80041a4 <setup+0x16c>)
 80040e8:	492f      	ldr	r1, [pc, #188]	@ (80041a8 <setup+0x170>)
 80040ea:	4826      	ldr	r0, [pc, #152]	@ (8004184 <setup+0x14c>)
 80040ec:	f000 fa94 	bl	8004618 <siprintf>
 80040f0:	4b24      	ldr	r3, [pc, #144]	@ (8004184 <setup+0x14c>)
 80040f2:	0018      	movs	r0, r3
 80040f4:	f7fc f804 	bl	8000100 <strlen>
 80040f8:	0003      	movs	r3, r0
 80040fa:	b299      	uxth	r1, r3
 80040fc:	23fa      	movs	r3, #250	@ 0xfa
 80040fe:	009a      	lsls	r2, r3, #2
 8004100:	4b20      	ldr	r3, [pc, #128]	@ (8004184 <setup+0x14c>)
 8004102:	0018      	movs	r0, r3
 8004104:	f7fe ff22 	bl	8002f4c <USART3_TX_transmit>
 8004108:	4a28      	ldr	r2, [pc, #160]	@ (80041ac <setup+0x174>)
 800410a:	4b1e      	ldr	r3, [pc, #120]	@ (8004184 <setup+0x14c>)
 800410c:	0011      	movs	r1, r2
 800410e:	0018      	movs	r0, r3
 8004110:	f000 fa82 	bl	8004618 <siprintf>
 8004114:	4b1b      	ldr	r3, [pc, #108]	@ (8004184 <setup+0x14c>)
 8004116:	0018      	movs	r0, r3
 8004118:	f7fb fff2 	bl	8000100 <strlen>
 800411c:	0003      	movs	r3, r0
 800411e:	b299      	uxth	r1, r3
 8004120:	23fa      	movs	r3, #250	@ 0xfa
 8004122:	009a      	lsls	r2, r3, #2
 8004124:	4b17      	ldr	r3, [pc, #92]	@ (8004184 <setup+0x14c>)
 8004126:	0018      	movs	r0, r3
 8004128:	f7fe ff10 	bl	8002f4c <USART3_TX_transmit>
	DP_RxQueue = queue_init(DP_RX_QUEUE_MAX_SIZE);
 800412c:	2014      	movs	r0, #20
 800412e:	f000 f8fc 	bl	800432a <queue_init>
 8004132:	0002      	movs	r2, r0
 8004134:	4b1e      	ldr	r3, [pc, #120]	@ (80041b0 <setup+0x178>)
 8004136:	601a      	str	r2, [r3, #0]
	DP_TxQueue = queue_init(DP_TX_QUEUE_MAX_SIZE);
 8004138:	2014      	movs	r0, #20
 800413a:	f000 f8f6 	bl	800432a <queue_init>
 800413e:	0002      	movs	r2, r0
 8004140:	4b1c      	ldr	r3, [pc, #112]	@ (80041b4 <setup+0x17c>)
 8004142:	601a      	str	r2, [r3, #0]

	pin_init();
 8004144:	f7fd fb76 	bl	8001834 <pin_init>
	ethernetInit();
 8004148:	f7ff fac4 	bl	80036d4 <ethernetInit>
	RJ45_IO_setup();
 800414c:	f7ff fd0e 	bl	8003b6c <RJ45_IO_setup>
	RJ45_set_output(0xff);
 8004150:	20ff      	movs	r0, #255	@ 0xff
 8004152:	f7ff fd2b 	bl	8003bac <RJ45_set_output>
	//handler_IO();
	LOG("Setup done\r\n");
 8004156:	4a18      	ldr	r2, [pc, #96]	@ (80041b8 <setup+0x180>)
 8004158:	4b0a      	ldr	r3, [pc, #40]	@ (8004184 <setup+0x14c>)
 800415a:	0011      	movs	r1, r2
 800415c:	0018      	movs	r0, r3
 800415e:	f000 fa5b 	bl	8004618 <siprintf>
 8004162:	4b08      	ldr	r3, [pc, #32]	@ (8004184 <setup+0x14c>)
 8004164:	0018      	movs	r0, r3
 8004166:	f7fb ffcb 	bl	8000100 <strlen>
 800416a:	0003      	movs	r3, r0
 800416c:	b299      	uxth	r1, r3
 800416e:	23fa      	movs	r3, #250	@ 0xfa
 8004170:	009a      	lsls	r2, r3, #2
 8004172:	4b04      	ldr	r3, [pc, #16]	@ (8004184 <setup+0x14c>)
 8004174:	0018      	movs	r0, r3
 8004176:	f7fe fee9 	bl	8002f4c <USART3_TX_transmit>
}
 800417a:	46c0      	nop			@ (mov r8, r8)
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}
 8004180:	08004ef8 	.word	0x08004ef8
 8004184:	200000b4 	.word	0x200000b4
 8004188:	08004f14 	.word	0x08004f14
 800418c:	08004f20 	.word	0x08004f20
 8004190:	08004f30 	.word	0x08004f30
 8004194:	08004f48 	.word	0x08004f48
 8004198:	08004f58 	.word	0x08004f58
 800419c:	08004f60 	.word	0x08004f60
 80041a0:	08004f70 	.word	0x08004f70
 80041a4:	08004f7c 	.word	0x08004f7c
 80041a8:	08004f88 	.word	0x08004f88
 80041ac:	08004f9c 	.word	0x08004f9c
 80041b0:	20000ce0 	.word	0x20000ce0
 80041b4:	20000ce4 	.word	0x20000ce4
 80041b8:	08004fb8 	.word	0x08004fb8

080041bc <SystemClock_Config>:



static void SystemClock_Config() {
 80041bc:	b580      	push	{r7, lr}
 80041be:	af00      	add	r7, sp, #0

	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80041c0:	2001      	movs	r0, #1
 80041c2:	f7ff fedb 	bl	8003f7c <LL_APB2_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80041c6:	2380      	movs	r3, #128	@ 0x80
 80041c8:	055b      	lsls	r3, r3, #21
 80041ca:	0018      	movs	r0, r3
 80041cc:	f7ff fec0 	bl	8003f50 <LL_APB1_GRP1_EnableClock>

	/** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
	 */
	LL_SYSCFG_DisableDBATT(LL_SYSCFG_UCPD1_STROBE | LL_SYSCFG_UCPD2_STROBE);
 80041d0:	23c0      	movs	r3, #192	@ 0xc0
 80041d2:	00db      	lsls	r3, r3, #3
 80041d4:	0018      	movs	r0, r3
 80041d6:	f7ff fee7 	bl	8003fa8 <LL_SYSCFG_DisableDBATT>

	LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 80041da:	2002      	movs	r0, #2
 80041dc:	f7ff fef4 	bl	8003fc8 <LL_FLASH_SetLatency>
	while (LL_FLASH_GetLatency() != LL_FLASH_LATENCY_2)
 80041e0:	46c0      	nop			@ (mov r8, r8)
 80041e2:	f7ff ff05 	bl	8003ff0 <LL_FLASH_GetLatency>
 80041e6:	0003      	movs	r3, r0
 80041e8:	2b02      	cmp	r3, #2
 80041ea:	d1fa      	bne.n	80041e2 <SystemClock_Config+0x26>
		;
	LL_RCC_HSE_Enable();
 80041ec:	f7ff fdf2 	bl	8003dd4 <LL_RCC_HSE_Enable>
	while (LL_RCC_HSE_IsReady() != 1) {
 80041f0:	46c0      	nop			@ (mov r8, r8)
 80041f2:	f7ff fdfd 	bl	8003df0 <LL_RCC_HSE_IsReady>
 80041f6:	0003      	movs	r3, r0
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d1fa      	bne.n	80041f2 <SystemClock_Config+0x36>
	}
	/* Main PLL configuration and activation */
	LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_1, 16,
 80041fc:	2380      	movs	r3, #128	@ 0x80
 80041fe:	059b      	lsls	r3, r3, #22
 8004200:	2210      	movs	r2, #16
 8004202:	2100      	movs	r1, #0
 8004204:	2003      	movs	r0, #3
 8004206:	f7ff fe75 	bl	8003ef4 <LL_RCC_PLL_ConfigDomain_SYS>
			LL_RCC_PLLR_DIV_2);
	LL_RCC_PLL_Enable();
 800420a:	f7ff fe51 	bl	8003eb0 <LL_RCC_PLL_Enable>
	LL_RCC_PLL_EnableDomain_SYS();
 800420e:	f7ff fe91 	bl	8003f34 <LL_RCC_PLL_EnableDomain_SYS>
	while (LL_RCC_PLL_IsReady() != 1) {
 8004212:	46c0      	nop			@ (mov r8, r8)
 8004214:	f7ff fe5a 	bl	8003ecc <LL_RCC_PLL_IsReady>
 8004218:	0003      	movs	r3, r0
 800421a:	2b01      	cmp	r3, #1
 800421c:	d1fa      	bne.n	8004214 <SystemClock_Config+0x58>
	}
	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 800421e:	2002      	movs	r0, #2
 8004220:	f7ff fdfa 	bl	8003e18 <LL_RCC_SetSysClkSource>
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL) {
 8004224:	46c0      	nop			@ (mov r8, r8)
 8004226:	f7ff fe0b 	bl	8003e40 <LL_RCC_GetSysClkSource>
 800422a:	0003      	movs	r3, r0
 800422c:	2b10      	cmp	r3, #16
 800422e:	d1fa      	bne.n	8004226 <SystemClock_Config+0x6a>
	}
	/* Set AHB prescaler*/
	LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8004230:	2000      	movs	r0, #0
 8004232:	f7ff fe11 	bl	8003e58 <LL_RCC_SetAHBPrescaler>
	/* Set APB1 prescaler*/
	LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8004236:	2000      	movs	r0, #0
 8004238:	f7ff fe24 	bl	8003e84 <LL_RCC_SetAPB1Prescaler>
	SystemCoreClockUpdate();
 800423c:	f7ff f9c6 	bl	80035cc <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock / 1000);
 8004240:	4b06      	ldr	r3, [pc, #24]	@ (800425c <SystemClock_Config+0xa0>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	22fa      	movs	r2, #250	@ 0xfa
 8004246:	0091      	lsls	r1, r2, #2
 8004248:	0018      	movs	r0, r3
 800424a:	f7fb ff6b 	bl	8000124 <__udivsi3>
 800424e:	0003      	movs	r3, r0
 8004250:	0018      	movs	r0, r3
 8004252:	f7ff fd9b 	bl	8003d8c <SysTick_Config>
}
 8004256:	46c0      	nop			@ (mov r8, r8)
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}
 800425c:	2000002c 	.word	0x2000002c

08004260 <PCA9555_Write>:

#define PAC9555_CONFIG_PORT0_REGISTER			0x06
#define PAC9555_CONFIG_PORT1_REGISTER			0x07

void PCA9555_Write(uint8_t addr,uint8_t reg, uint8_t data)
{
 8004260:	b590      	push	{r4, r7, lr}
 8004262:	b085      	sub	sp, #20
 8004264:	af00      	add	r7, sp, #0
 8004266:	0004      	movs	r4, r0
 8004268:	0008      	movs	r0, r1
 800426a:	0011      	movs	r1, r2
 800426c:	1dfb      	adds	r3, r7, #7
 800426e:	1c22      	adds	r2, r4, #0
 8004270:	701a      	strb	r2, [r3, #0]
 8004272:	1dbb      	adds	r3, r7, #6
 8004274:	1c02      	adds	r2, r0, #0
 8004276:	701a      	strb	r2, [r3, #0]
 8004278:	1d7b      	adds	r3, r7, #5
 800427a:	1c0a      	adds	r2, r1, #0
 800427c:	701a      	strb	r2, [r3, #0]
    uint8_t buf[2] = {reg, data};
 800427e:	210c      	movs	r1, #12
 8004280:	187b      	adds	r3, r7, r1
 8004282:	1dba      	adds	r2, r7, #6
 8004284:	7812      	ldrb	r2, [r2, #0]
 8004286:	701a      	strb	r2, [r3, #0]
 8004288:	187b      	adds	r3, r7, r1
 800428a:	1d7a      	adds	r2, r7, #5
 800428c:	7812      	ldrb	r2, [r2, #0]
 800428e:	705a      	strb	r2, [r3, #1]
    I2C1_WriteBuf(addr, buf, 2);
 8004290:	1879      	adds	r1, r7, r1
 8004292:	1dfb      	adds	r3, r7, #7
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	2202      	movs	r2, #2
 8004298:	0018      	movs	r0, r3
 800429a:	f7fd fe7b 	bl	8001f94 <I2C1_WriteBuf>
}
 800429e:	46c0      	nop			@ (mov r8, r8)
 80042a0:	46bd      	mov	sp, r7
 80042a2:	b005      	add	sp, #20
 80042a4:	bd90      	pop	{r4, r7, pc}

080042a6 <PCA9555_Init16>:
    //LOG("PAC9555_CONFIG_PORT0_REGISTER :%x\r\n",PCA9555_Read(addr,PAC9555_CONFIG_PORT0_REGISTER));
    //LOG("PAC9555_CONFIG_PORT1_REGISTER :%x\r\n",PCA9555_Read(addr,PAC9555_CONFIG_PORT1_REGISTER));
}

void PCA9555_Init16(uint8_t addr,uint16_t port_dir)
{
 80042a6:	b580      	push	{r7, lr}
 80042a8:	b082      	sub	sp, #8
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	0002      	movs	r2, r0
 80042ae:	1dfb      	adds	r3, r7, #7
 80042b0:	701a      	strb	r2, [r3, #0]
 80042b2:	1d3b      	adds	r3, r7, #4
 80042b4:	1c0a      	adds	r2, r1, #0
 80042b6:	801a      	strh	r2, [r3, #0]
    PCA9555_Write(addr,PAC9555_CONFIG_PORT0_REGISTER, (uint8_t)port_dir);
 80042b8:	1d3b      	adds	r3, r7, #4
 80042ba:	881b      	ldrh	r3, [r3, #0]
 80042bc:	b2da      	uxtb	r2, r3
 80042be:	1dfb      	adds	r3, r7, #7
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	2106      	movs	r1, #6
 80042c4:	0018      	movs	r0, r3
 80042c6:	f7ff ffcb 	bl	8004260 <PCA9555_Write>
    PCA9555_Write(addr,PAC9555_CONFIG_PORT1_REGISTER, (uint8_t)(port_dir>>8));
 80042ca:	1d3b      	adds	r3, r7, #4
 80042cc:	881b      	ldrh	r3, [r3, #0]
 80042ce:	0a1b      	lsrs	r3, r3, #8
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	b2da      	uxtb	r2, r3
 80042d4:	1dfb      	adds	r3, r7, #7
 80042d6:	781b      	ldrb	r3, [r3, #0]
 80042d8:	2107      	movs	r1, #7
 80042da:	0018      	movs	r0, r3
 80042dc:	f7ff ffc0 	bl	8004260 <PCA9555_Write>
   // LOG("PCA9555 addr %x\r\n",addr);
   // LOG("PAC9555_CONFIG_PORT0_REGISTER :%x\r\n",PCA9555_Read(addr,PAC9555_CONFIG_PORT0_REGISTER));
   // LOG("PAC9555_CONFIG_PORT1_REGISTER :%x\r\n",PCA9555_Read(addr,PAC9555_CONFIG_PORT1_REGISTER));
}
 80042e0:	46c0      	nop			@ (mov r8, r8)
 80042e2:	46bd      	mov	sp, r7
 80042e4:	b002      	add	sp, #8
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <PCA9555_Write16>:
{
    PCA9555_Write(addr,PAC9555_OUT_PORT1_REGISTER, value);
}

void PCA9555_Write16(uint8_t addr ,uint16_t value)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	0002      	movs	r2, r0
 80042f0:	1dfb      	adds	r3, r7, #7
 80042f2:	701a      	strb	r2, [r3, #0]
 80042f4:	1d3b      	adds	r3, r7, #4
 80042f6:	1c0a      	adds	r2, r1, #0
 80042f8:	801a      	strh	r2, [r3, #0]
    PCA9555_Write(addr,PAC9555_OUT_PORT0_REGISTER, (uint8_t)value);
 80042fa:	1d3b      	adds	r3, r7, #4
 80042fc:	881b      	ldrh	r3, [r3, #0]
 80042fe:	b2da      	uxtb	r2, r3
 8004300:	1dfb      	adds	r3, r7, #7
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	2102      	movs	r1, #2
 8004306:	0018      	movs	r0, r3
 8004308:	f7ff ffaa 	bl	8004260 <PCA9555_Write>
    PCA9555_Write(addr,PAC9555_OUT_PORT1_REGISTER, (uint8_t)(value>>8));
 800430c:	1d3b      	adds	r3, r7, #4
 800430e:	881b      	ldrh	r3, [r3, #0]
 8004310:	0a1b      	lsrs	r3, r3, #8
 8004312:	b29b      	uxth	r3, r3
 8004314:	b2da      	uxtb	r2, r3
 8004316:	1dfb      	adds	r3, r7, #7
 8004318:	781b      	ldrb	r3, [r3, #0]
 800431a:	2103      	movs	r1, #3
 800431c:	0018      	movs	r0, r3
 800431e:	f7ff ff9f 	bl	8004260 <PCA9555_Write>
}
 8004322:	46c0      	nop			@ (mov r8, r8)
 8004324:	46bd      	mov	sp, r7
 8004326:	b002      	add	sp, #8
 8004328:	bd80      	pop	{r7, pc}

0800432a <queue_init>:
#include <stdlib.h>
#include "queue.h"

queue_t * queue_init(int size) {
 800432a:	b580      	push	{r7, lr}
 800432c:	b084      	sub	sp, #16
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
	queue_t * queue;
	int newSize = size + 1;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	3301      	adds	r3, #1
 8004336:	60fb      	str	r3, [r7, #12]
	queue = (queue_t *) malloc(sizeof(queue_t));
 8004338:	2014      	movs	r0, #20
 800433a:	f000 f8a7 	bl	800448c <malloc>
 800433e:	0003      	movs	r3, r0
 8004340:	60bb      	str	r3, [r7, #8]
	queue->elements = (DataType_T *) malloc(newSize * sizeof(DataType_T));
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	0018      	movs	r0, r3
 8004348:	f000 f8a0 	bl	800448c <malloc>
 800434c:	0003      	movs	r3, r0
 800434e:	001a      	movs	r2, r3
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	609a      	str	r2, [r3, #8]
	queue->tail = queue->head = &queue->elements[0];
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	689a      	ldr	r2, [r3, #8]
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	611a      	str	r2, [r3, #16]
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	691a      	ldr	r2, [r3, #16]
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	60da      	str	r2, [r3, #12]
	queue->size = newSize;
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	68fa      	ldr	r2, [r7, #12]
 8004368:	601a      	str	r2, [r3, #0]
	return queue;
 800436a:	68bb      	ldr	r3, [r7, #8]
}
 800436c:	0018      	movs	r0, r3
 800436e:	46bd      	mov	sp, r7
 8004370:	b004      	add	sp, #16
 8004372:	bd80      	pop	{r7, pc}

08004374 <queue_put>:

int queue_put(queue_t *queue, void * data) {
 8004374:	b580      	push	{r7, lr}
 8004376:	b084      	sub	sp, #16
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	6039      	str	r1, [r7, #0]
	DataType_T * nextTail;
	nextTail = queue->tail + 1;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	3304      	adds	r3, #4
 8004384:	60fb      	str	r3, [r7, #12]
	if (nextTail == &queue->elements[queue->size]) {
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	689a      	ldr	r2, [r3, #8]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	18d3      	adds	r3, r2, r3
 8004392:	68fa      	ldr	r2, [r7, #12]
 8004394:	429a      	cmp	r2, r3
 8004396:	d102      	bne.n	800439e <queue_put+0x2a>
		/* Wrap around. */
		nextTail = &queue->elements[0];
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	60fb      	str	r3, [r7, #12]
	}

	if (nextTail == queue->head) {
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	691b      	ldr	r3, [r3, #16]
 80043a2:	68fa      	ldr	r2, [r7, #12]
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d101      	bne.n	80043ac <queue_put+0x38>
		return 0;
 80043a8:	2300      	movs	r3, #0
 80043aa:	e00c      	b.n	80043c6 <queue_put+0x52>
	} else {
		*queue->tail = (DataType_T) data;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	683a      	ldr	r2, [r7, #0]
 80043b2:	601a      	str	r2, [r3, #0]
		queue->tail = nextTail;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	68fa      	ldr	r2, [r7, #12]
 80043b8:	60da      	str	r2, [r3, #12]

		queue->count++;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	1c5a      	adds	r2, r3, #1
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	605a      	str	r2, [r3, #4]
		return 1;
 80043c4:	2301      	movs	r3, #1
	}
}
 80043c6:	0018      	movs	r0, r3
 80043c8:	46bd      	mov	sp, r7
 80043ca:	b004      	add	sp, #16
 80043cc:	bd80      	pop	{r7, pc}

080043ce <queue_get>:

int queue_get(queue_t *queue, DataType_T *dataptr) {
 80043ce:	b580      	push	{r7, lr}
 80043d0:	b084      	sub	sp, #16
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	6078      	str	r0, [r7, #4]
 80043d6:	6039      	str	r1, [r7, #0]
	if (queue->tail == queue->head) {
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	68da      	ldr	r2, [r3, #12]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	691b      	ldr	r3, [r3, #16]
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d104      	bne.n	80043ee <queue_get+0x20>
		/* Queue is empty. */
		queue->count = 0;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	605a      	str	r2, [r3, #4]
		return 0;
 80043ea:	2300      	movs	r3, #0
 80043ec:	e01f      	b.n	800442e <queue_get+0x60>
	}
	DataType_T * tmp = (queue->head++); //lay data cua head, trong head co dia chi pointer tiep theo
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	1d19      	adds	r1, r3, #4
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	6111      	str	r1, [r2, #16]
 80043f8:	60fb      	str	r3, [r7, #12]
	memcpy(dataptr, tmp, sizeof(DataType_T));
 80043fa:	68f9      	ldr	r1, [r7, #12]
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	2204      	movs	r2, #4
 8004400:	0018      	movs	r0, r3
 8004402:	f000 f96f 	bl	80046e4 <memcpy>

	if (queue->head == &queue->elements[queue->size]) {
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	691a      	ldr	r2, [r3, #16]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6899      	ldr	r1, [r3, #8]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	18cb      	adds	r3, r1, r3
 8004416:	429a      	cmp	r2, r3
 8004418:	d103      	bne.n	8004422 <queue_get+0x54>
		/* Wrap around. */
		queue->head = &queue->elements[0];
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	689a      	ldr	r2, [r3, #8]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	611a      	str	r2, [r3, #16]
	}
	queue->count--;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	1e5a      	subs	r2, r3, #1
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	605a      	str	r2, [r3, #4]

	return 1;
 800442c:	2301      	movs	r3, #1
}
 800442e:	0018      	movs	r0, r3
 8004430:	46bd      	mov	sp, r7
 8004432:	b004      	add	sp, #16
 8004434:	bd80      	pop	{r7, pc}
	...

08004438 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004438:	480d      	ldr	r0, [pc, #52]	@ (8004470 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800443a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800443c:	f7ff f8c0 	bl	80035c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004440:	480c      	ldr	r0, [pc, #48]	@ (8004474 <LoopForever+0x6>)
  ldr r1, =_edata
 8004442:	490d      	ldr	r1, [pc, #52]	@ (8004478 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004444:	4a0d      	ldr	r2, [pc, #52]	@ (800447c <LoopForever+0xe>)
  movs r3, #0
 8004446:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004448:	e002      	b.n	8004450 <LoopCopyDataInit>

0800444a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800444a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800444c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800444e:	3304      	adds	r3, #4

08004450 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004450:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004452:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004454:	d3f9      	bcc.n	800444a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004456:	4a0a      	ldr	r2, [pc, #40]	@ (8004480 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004458:	4c0a      	ldr	r4, [pc, #40]	@ (8004484 <LoopForever+0x16>)
  movs r3, #0
 800445a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800445c:	e001      	b.n	8004462 <LoopFillZerobss>

0800445e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800445e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004460:	3204      	adds	r2, #4

08004462 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004462:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004464:	d3fb      	bcc.n	800445e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004466:	f000 f917 	bl	8004698 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800446a:	f7ff fdcd 	bl	8004008 <main>

0800446e <LoopForever>:

LoopForever:
  b LoopForever
 800446e:	e7fe      	b.n	800446e <LoopForever>
  ldr   r0, =_estack
 8004470:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8004474:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004478:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 800447c:	08005100 	.word	0x08005100
  ldr r2, =_sbss
 8004480:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8004484:	20000e30 	.word	0x20000e30

08004488 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004488:	e7fe      	b.n	8004488 <ADC_IRQHandler>
	...

0800448c <malloc>:
 800448c:	b510      	push	{r4, lr}
 800448e:	4b03      	ldr	r3, [pc, #12]	@ (800449c <malloc+0x10>)
 8004490:	0001      	movs	r1, r0
 8004492:	6818      	ldr	r0, [r3, #0]
 8004494:	f000 f830 	bl	80044f8 <_malloc_r>
 8004498:	bd10      	pop	{r4, pc}
 800449a:	46c0      	nop			@ (mov r8, r8)
 800449c:	20000040 	.word	0x20000040

080044a0 <free>:
 80044a0:	b510      	push	{r4, lr}
 80044a2:	4b03      	ldr	r3, [pc, #12]	@ (80044b0 <free+0x10>)
 80044a4:	0001      	movs	r1, r0
 80044a6:	6818      	ldr	r0, [r3, #0]
 80044a8:	f000 f926 	bl	80046f8 <_free_r>
 80044ac:	bd10      	pop	{r4, pc}
 80044ae:	46c0      	nop			@ (mov r8, r8)
 80044b0:	20000040 	.word	0x20000040

080044b4 <sbrk_aligned>:
 80044b4:	b570      	push	{r4, r5, r6, lr}
 80044b6:	4e0f      	ldr	r6, [pc, #60]	@ (80044f4 <sbrk_aligned+0x40>)
 80044b8:	000d      	movs	r5, r1
 80044ba:	6831      	ldr	r1, [r6, #0]
 80044bc:	0004      	movs	r4, r0
 80044be:	2900      	cmp	r1, #0
 80044c0:	d102      	bne.n	80044c8 <sbrk_aligned+0x14>
 80044c2:	f000 f8d1 	bl	8004668 <_sbrk_r>
 80044c6:	6030      	str	r0, [r6, #0]
 80044c8:	0029      	movs	r1, r5
 80044ca:	0020      	movs	r0, r4
 80044cc:	f000 f8cc 	bl	8004668 <_sbrk_r>
 80044d0:	1c43      	adds	r3, r0, #1
 80044d2:	d103      	bne.n	80044dc <sbrk_aligned+0x28>
 80044d4:	2501      	movs	r5, #1
 80044d6:	426d      	negs	r5, r5
 80044d8:	0028      	movs	r0, r5
 80044da:	bd70      	pop	{r4, r5, r6, pc}
 80044dc:	2303      	movs	r3, #3
 80044de:	1cc5      	adds	r5, r0, #3
 80044e0:	439d      	bics	r5, r3
 80044e2:	42a8      	cmp	r0, r5
 80044e4:	d0f8      	beq.n	80044d8 <sbrk_aligned+0x24>
 80044e6:	1a29      	subs	r1, r5, r0
 80044e8:	0020      	movs	r0, r4
 80044ea:	f000 f8bd 	bl	8004668 <_sbrk_r>
 80044ee:	3001      	adds	r0, #1
 80044f0:	d1f2      	bne.n	80044d8 <sbrk_aligned+0x24>
 80044f2:	e7ef      	b.n	80044d4 <sbrk_aligned+0x20>
 80044f4:	20000ce8 	.word	0x20000ce8

080044f8 <_malloc_r>:
 80044f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80044fa:	2203      	movs	r2, #3
 80044fc:	1ccb      	adds	r3, r1, #3
 80044fe:	4393      	bics	r3, r2
 8004500:	3308      	adds	r3, #8
 8004502:	0005      	movs	r5, r0
 8004504:	001f      	movs	r7, r3
 8004506:	2b0c      	cmp	r3, #12
 8004508:	d234      	bcs.n	8004574 <_malloc_r+0x7c>
 800450a:	270c      	movs	r7, #12
 800450c:	42b9      	cmp	r1, r7
 800450e:	d833      	bhi.n	8004578 <_malloc_r+0x80>
 8004510:	0028      	movs	r0, r5
 8004512:	f000 f871 	bl	80045f8 <__malloc_lock>
 8004516:	4e37      	ldr	r6, [pc, #220]	@ (80045f4 <_malloc_r+0xfc>)
 8004518:	6833      	ldr	r3, [r6, #0]
 800451a:	001c      	movs	r4, r3
 800451c:	2c00      	cmp	r4, #0
 800451e:	d12f      	bne.n	8004580 <_malloc_r+0x88>
 8004520:	0039      	movs	r1, r7
 8004522:	0028      	movs	r0, r5
 8004524:	f7ff ffc6 	bl	80044b4 <sbrk_aligned>
 8004528:	0004      	movs	r4, r0
 800452a:	1c43      	adds	r3, r0, #1
 800452c:	d15f      	bne.n	80045ee <_malloc_r+0xf6>
 800452e:	6834      	ldr	r4, [r6, #0]
 8004530:	9400      	str	r4, [sp, #0]
 8004532:	9b00      	ldr	r3, [sp, #0]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d14a      	bne.n	80045ce <_malloc_r+0xd6>
 8004538:	2c00      	cmp	r4, #0
 800453a:	d052      	beq.n	80045e2 <_malloc_r+0xea>
 800453c:	6823      	ldr	r3, [r4, #0]
 800453e:	0028      	movs	r0, r5
 8004540:	18e3      	adds	r3, r4, r3
 8004542:	9900      	ldr	r1, [sp, #0]
 8004544:	9301      	str	r3, [sp, #4]
 8004546:	f000 f88f 	bl	8004668 <_sbrk_r>
 800454a:	9b01      	ldr	r3, [sp, #4]
 800454c:	4283      	cmp	r3, r0
 800454e:	d148      	bne.n	80045e2 <_malloc_r+0xea>
 8004550:	6823      	ldr	r3, [r4, #0]
 8004552:	0028      	movs	r0, r5
 8004554:	1aff      	subs	r7, r7, r3
 8004556:	0039      	movs	r1, r7
 8004558:	f7ff ffac 	bl	80044b4 <sbrk_aligned>
 800455c:	3001      	adds	r0, #1
 800455e:	d040      	beq.n	80045e2 <_malloc_r+0xea>
 8004560:	6823      	ldr	r3, [r4, #0]
 8004562:	19db      	adds	r3, r3, r7
 8004564:	6023      	str	r3, [r4, #0]
 8004566:	6833      	ldr	r3, [r6, #0]
 8004568:	685a      	ldr	r2, [r3, #4]
 800456a:	2a00      	cmp	r2, #0
 800456c:	d133      	bne.n	80045d6 <_malloc_r+0xde>
 800456e:	9b00      	ldr	r3, [sp, #0]
 8004570:	6033      	str	r3, [r6, #0]
 8004572:	e019      	b.n	80045a8 <_malloc_r+0xb0>
 8004574:	2b00      	cmp	r3, #0
 8004576:	dac9      	bge.n	800450c <_malloc_r+0x14>
 8004578:	230c      	movs	r3, #12
 800457a:	602b      	str	r3, [r5, #0]
 800457c:	2000      	movs	r0, #0
 800457e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004580:	6821      	ldr	r1, [r4, #0]
 8004582:	1bc9      	subs	r1, r1, r7
 8004584:	d420      	bmi.n	80045c8 <_malloc_r+0xd0>
 8004586:	290b      	cmp	r1, #11
 8004588:	d90a      	bls.n	80045a0 <_malloc_r+0xa8>
 800458a:	19e2      	adds	r2, r4, r7
 800458c:	6027      	str	r7, [r4, #0]
 800458e:	42a3      	cmp	r3, r4
 8004590:	d104      	bne.n	800459c <_malloc_r+0xa4>
 8004592:	6032      	str	r2, [r6, #0]
 8004594:	6863      	ldr	r3, [r4, #4]
 8004596:	6011      	str	r1, [r2, #0]
 8004598:	6053      	str	r3, [r2, #4]
 800459a:	e005      	b.n	80045a8 <_malloc_r+0xb0>
 800459c:	605a      	str	r2, [r3, #4]
 800459e:	e7f9      	b.n	8004594 <_malloc_r+0x9c>
 80045a0:	6862      	ldr	r2, [r4, #4]
 80045a2:	42a3      	cmp	r3, r4
 80045a4:	d10e      	bne.n	80045c4 <_malloc_r+0xcc>
 80045a6:	6032      	str	r2, [r6, #0]
 80045a8:	0028      	movs	r0, r5
 80045aa:	f000 f82d 	bl	8004608 <__malloc_unlock>
 80045ae:	0020      	movs	r0, r4
 80045b0:	2207      	movs	r2, #7
 80045b2:	300b      	adds	r0, #11
 80045b4:	1d23      	adds	r3, r4, #4
 80045b6:	4390      	bics	r0, r2
 80045b8:	1ac2      	subs	r2, r0, r3
 80045ba:	4298      	cmp	r0, r3
 80045bc:	d0df      	beq.n	800457e <_malloc_r+0x86>
 80045be:	1a1b      	subs	r3, r3, r0
 80045c0:	50a3      	str	r3, [r4, r2]
 80045c2:	e7dc      	b.n	800457e <_malloc_r+0x86>
 80045c4:	605a      	str	r2, [r3, #4]
 80045c6:	e7ef      	b.n	80045a8 <_malloc_r+0xb0>
 80045c8:	0023      	movs	r3, r4
 80045ca:	6864      	ldr	r4, [r4, #4]
 80045cc:	e7a6      	b.n	800451c <_malloc_r+0x24>
 80045ce:	9c00      	ldr	r4, [sp, #0]
 80045d0:	6863      	ldr	r3, [r4, #4]
 80045d2:	9300      	str	r3, [sp, #0]
 80045d4:	e7ad      	b.n	8004532 <_malloc_r+0x3a>
 80045d6:	001a      	movs	r2, r3
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	42a3      	cmp	r3, r4
 80045dc:	d1fb      	bne.n	80045d6 <_malloc_r+0xde>
 80045de:	2300      	movs	r3, #0
 80045e0:	e7da      	b.n	8004598 <_malloc_r+0xa0>
 80045e2:	230c      	movs	r3, #12
 80045e4:	0028      	movs	r0, r5
 80045e6:	602b      	str	r3, [r5, #0]
 80045e8:	f000 f80e 	bl	8004608 <__malloc_unlock>
 80045ec:	e7c6      	b.n	800457c <_malloc_r+0x84>
 80045ee:	6007      	str	r7, [r0, #0]
 80045f0:	e7da      	b.n	80045a8 <_malloc_r+0xb0>
 80045f2:	46c0      	nop			@ (mov r8, r8)
 80045f4:	20000cec 	.word	0x20000cec

080045f8 <__malloc_lock>:
 80045f8:	b510      	push	{r4, lr}
 80045fa:	4802      	ldr	r0, [pc, #8]	@ (8004604 <__malloc_lock+0xc>)
 80045fc:	f000 f870 	bl	80046e0 <__retarget_lock_acquire_recursive>
 8004600:	bd10      	pop	{r4, pc}
 8004602:	46c0      	nop			@ (mov r8, r8)
 8004604:	20000e2c 	.word	0x20000e2c

08004608 <__malloc_unlock>:
 8004608:	b510      	push	{r4, lr}
 800460a:	4802      	ldr	r0, [pc, #8]	@ (8004614 <__malloc_unlock+0xc>)
 800460c:	f000 f869 	bl	80046e2 <__retarget_lock_release_recursive>
 8004610:	bd10      	pop	{r4, pc}
 8004612:	46c0      	nop			@ (mov r8, r8)
 8004614:	20000e2c 	.word	0x20000e2c

08004618 <siprintf>:
 8004618:	b40e      	push	{r1, r2, r3}
 800461a:	b500      	push	{lr}
 800461c:	490b      	ldr	r1, [pc, #44]	@ (800464c <siprintf+0x34>)
 800461e:	b09c      	sub	sp, #112	@ 0x70
 8004620:	ab1d      	add	r3, sp, #116	@ 0x74
 8004622:	9002      	str	r0, [sp, #8]
 8004624:	9006      	str	r0, [sp, #24]
 8004626:	9107      	str	r1, [sp, #28]
 8004628:	9104      	str	r1, [sp, #16]
 800462a:	4809      	ldr	r0, [pc, #36]	@ (8004650 <siprintf+0x38>)
 800462c:	4909      	ldr	r1, [pc, #36]	@ (8004654 <siprintf+0x3c>)
 800462e:	cb04      	ldmia	r3!, {r2}
 8004630:	9105      	str	r1, [sp, #20]
 8004632:	6800      	ldr	r0, [r0, #0]
 8004634:	a902      	add	r1, sp, #8
 8004636:	9301      	str	r3, [sp, #4]
 8004638:	f000 f908 	bl	800484c <_svfiprintf_r>
 800463c:	2200      	movs	r2, #0
 800463e:	9b02      	ldr	r3, [sp, #8]
 8004640:	701a      	strb	r2, [r3, #0]
 8004642:	b01c      	add	sp, #112	@ 0x70
 8004644:	bc08      	pop	{r3}
 8004646:	b003      	add	sp, #12
 8004648:	4718      	bx	r3
 800464a:	46c0      	nop			@ (mov r8, r8)
 800464c:	7fffffff 	.word	0x7fffffff
 8004650:	20000040 	.word	0x20000040
 8004654:	ffff0208 	.word	0xffff0208

08004658 <memset>:
 8004658:	0003      	movs	r3, r0
 800465a:	1882      	adds	r2, r0, r2
 800465c:	4293      	cmp	r3, r2
 800465e:	d100      	bne.n	8004662 <memset+0xa>
 8004660:	4770      	bx	lr
 8004662:	7019      	strb	r1, [r3, #0]
 8004664:	3301      	adds	r3, #1
 8004666:	e7f9      	b.n	800465c <memset+0x4>

08004668 <_sbrk_r>:
 8004668:	2300      	movs	r3, #0
 800466a:	b570      	push	{r4, r5, r6, lr}
 800466c:	4d06      	ldr	r5, [pc, #24]	@ (8004688 <_sbrk_r+0x20>)
 800466e:	0004      	movs	r4, r0
 8004670:	0008      	movs	r0, r1
 8004672:	602b      	str	r3, [r5, #0]
 8004674:	f7fe ff6e 	bl	8003554 <_sbrk>
 8004678:	1c43      	adds	r3, r0, #1
 800467a:	d103      	bne.n	8004684 <_sbrk_r+0x1c>
 800467c:	682b      	ldr	r3, [r5, #0]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d000      	beq.n	8004684 <_sbrk_r+0x1c>
 8004682:	6023      	str	r3, [r4, #0]
 8004684:	bd70      	pop	{r4, r5, r6, pc}
 8004686:	46c0      	nop			@ (mov r8, r8)
 8004688:	20000e28 	.word	0x20000e28

0800468c <__errno>:
 800468c:	4b01      	ldr	r3, [pc, #4]	@ (8004694 <__errno+0x8>)
 800468e:	6818      	ldr	r0, [r3, #0]
 8004690:	4770      	bx	lr
 8004692:	46c0      	nop			@ (mov r8, r8)
 8004694:	20000040 	.word	0x20000040

08004698 <__libc_init_array>:
 8004698:	b570      	push	{r4, r5, r6, lr}
 800469a:	2600      	movs	r6, #0
 800469c:	4c0c      	ldr	r4, [pc, #48]	@ (80046d0 <__libc_init_array+0x38>)
 800469e:	4d0d      	ldr	r5, [pc, #52]	@ (80046d4 <__libc_init_array+0x3c>)
 80046a0:	1b64      	subs	r4, r4, r5
 80046a2:	10a4      	asrs	r4, r4, #2
 80046a4:	42a6      	cmp	r6, r4
 80046a6:	d109      	bne.n	80046bc <__libc_init_array+0x24>
 80046a8:	2600      	movs	r6, #0
 80046aa:	f000 fba1 	bl	8004df0 <_init>
 80046ae:	4c0a      	ldr	r4, [pc, #40]	@ (80046d8 <__libc_init_array+0x40>)
 80046b0:	4d0a      	ldr	r5, [pc, #40]	@ (80046dc <__libc_init_array+0x44>)
 80046b2:	1b64      	subs	r4, r4, r5
 80046b4:	10a4      	asrs	r4, r4, #2
 80046b6:	42a6      	cmp	r6, r4
 80046b8:	d105      	bne.n	80046c6 <__libc_init_array+0x2e>
 80046ba:	bd70      	pop	{r4, r5, r6, pc}
 80046bc:	00b3      	lsls	r3, r6, #2
 80046be:	58eb      	ldr	r3, [r5, r3]
 80046c0:	4798      	blx	r3
 80046c2:	3601      	adds	r6, #1
 80046c4:	e7ee      	b.n	80046a4 <__libc_init_array+0xc>
 80046c6:	00b3      	lsls	r3, r6, #2
 80046c8:	58eb      	ldr	r3, [r5, r3]
 80046ca:	4798      	blx	r3
 80046cc:	3601      	adds	r6, #1
 80046ce:	e7f2      	b.n	80046b6 <__libc_init_array+0x1e>
 80046d0:	080050f8 	.word	0x080050f8
 80046d4:	080050f8 	.word	0x080050f8
 80046d8:	080050fc 	.word	0x080050fc
 80046dc:	080050f8 	.word	0x080050f8

080046e0 <__retarget_lock_acquire_recursive>:
 80046e0:	4770      	bx	lr

080046e2 <__retarget_lock_release_recursive>:
 80046e2:	4770      	bx	lr

080046e4 <memcpy>:
 80046e4:	2300      	movs	r3, #0
 80046e6:	b510      	push	{r4, lr}
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d100      	bne.n	80046ee <memcpy+0xa>
 80046ec:	bd10      	pop	{r4, pc}
 80046ee:	5ccc      	ldrb	r4, [r1, r3]
 80046f0:	54c4      	strb	r4, [r0, r3]
 80046f2:	3301      	adds	r3, #1
 80046f4:	e7f8      	b.n	80046e8 <memcpy+0x4>
	...

080046f8 <_free_r>:
 80046f8:	b570      	push	{r4, r5, r6, lr}
 80046fa:	0005      	movs	r5, r0
 80046fc:	1e0c      	subs	r4, r1, #0
 80046fe:	d010      	beq.n	8004722 <_free_r+0x2a>
 8004700:	3c04      	subs	r4, #4
 8004702:	6823      	ldr	r3, [r4, #0]
 8004704:	2b00      	cmp	r3, #0
 8004706:	da00      	bge.n	800470a <_free_r+0x12>
 8004708:	18e4      	adds	r4, r4, r3
 800470a:	0028      	movs	r0, r5
 800470c:	f7ff ff74 	bl	80045f8 <__malloc_lock>
 8004710:	4a1d      	ldr	r2, [pc, #116]	@ (8004788 <_free_r+0x90>)
 8004712:	6813      	ldr	r3, [r2, #0]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d105      	bne.n	8004724 <_free_r+0x2c>
 8004718:	6063      	str	r3, [r4, #4]
 800471a:	6014      	str	r4, [r2, #0]
 800471c:	0028      	movs	r0, r5
 800471e:	f7ff ff73 	bl	8004608 <__malloc_unlock>
 8004722:	bd70      	pop	{r4, r5, r6, pc}
 8004724:	42a3      	cmp	r3, r4
 8004726:	d908      	bls.n	800473a <_free_r+0x42>
 8004728:	6820      	ldr	r0, [r4, #0]
 800472a:	1821      	adds	r1, r4, r0
 800472c:	428b      	cmp	r3, r1
 800472e:	d1f3      	bne.n	8004718 <_free_r+0x20>
 8004730:	6819      	ldr	r1, [r3, #0]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	1809      	adds	r1, r1, r0
 8004736:	6021      	str	r1, [r4, #0]
 8004738:	e7ee      	b.n	8004718 <_free_r+0x20>
 800473a:	001a      	movs	r2, r3
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d001      	beq.n	8004746 <_free_r+0x4e>
 8004742:	42a3      	cmp	r3, r4
 8004744:	d9f9      	bls.n	800473a <_free_r+0x42>
 8004746:	6811      	ldr	r1, [r2, #0]
 8004748:	1850      	adds	r0, r2, r1
 800474a:	42a0      	cmp	r0, r4
 800474c:	d10b      	bne.n	8004766 <_free_r+0x6e>
 800474e:	6820      	ldr	r0, [r4, #0]
 8004750:	1809      	adds	r1, r1, r0
 8004752:	1850      	adds	r0, r2, r1
 8004754:	6011      	str	r1, [r2, #0]
 8004756:	4283      	cmp	r3, r0
 8004758:	d1e0      	bne.n	800471c <_free_r+0x24>
 800475a:	6818      	ldr	r0, [r3, #0]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	1841      	adds	r1, r0, r1
 8004760:	6011      	str	r1, [r2, #0]
 8004762:	6053      	str	r3, [r2, #4]
 8004764:	e7da      	b.n	800471c <_free_r+0x24>
 8004766:	42a0      	cmp	r0, r4
 8004768:	d902      	bls.n	8004770 <_free_r+0x78>
 800476a:	230c      	movs	r3, #12
 800476c:	602b      	str	r3, [r5, #0]
 800476e:	e7d5      	b.n	800471c <_free_r+0x24>
 8004770:	6820      	ldr	r0, [r4, #0]
 8004772:	1821      	adds	r1, r4, r0
 8004774:	428b      	cmp	r3, r1
 8004776:	d103      	bne.n	8004780 <_free_r+0x88>
 8004778:	6819      	ldr	r1, [r3, #0]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	1809      	adds	r1, r1, r0
 800477e:	6021      	str	r1, [r4, #0]
 8004780:	6063      	str	r3, [r4, #4]
 8004782:	6054      	str	r4, [r2, #4]
 8004784:	e7ca      	b.n	800471c <_free_r+0x24>
 8004786:	46c0      	nop			@ (mov r8, r8)
 8004788:	20000cec 	.word	0x20000cec

0800478c <__ssputs_r>:
 800478c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800478e:	688e      	ldr	r6, [r1, #8]
 8004790:	b085      	sub	sp, #20
 8004792:	001f      	movs	r7, r3
 8004794:	000c      	movs	r4, r1
 8004796:	680b      	ldr	r3, [r1, #0]
 8004798:	9002      	str	r0, [sp, #8]
 800479a:	9203      	str	r2, [sp, #12]
 800479c:	42be      	cmp	r6, r7
 800479e:	d830      	bhi.n	8004802 <__ssputs_r+0x76>
 80047a0:	210c      	movs	r1, #12
 80047a2:	5e62      	ldrsh	r2, [r4, r1]
 80047a4:	2190      	movs	r1, #144	@ 0x90
 80047a6:	00c9      	lsls	r1, r1, #3
 80047a8:	420a      	tst	r2, r1
 80047aa:	d028      	beq.n	80047fe <__ssputs_r+0x72>
 80047ac:	2003      	movs	r0, #3
 80047ae:	6921      	ldr	r1, [r4, #16]
 80047b0:	1a5b      	subs	r3, r3, r1
 80047b2:	9301      	str	r3, [sp, #4]
 80047b4:	6963      	ldr	r3, [r4, #20]
 80047b6:	4343      	muls	r3, r0
 80047b8:	9801      	ldr	r0, [sp, #4]
 80047ba:	0fdd      	lsrs	r5, r3, #31
 80047bc:	18ed      	adds	r5, r5, r3
 80047be:	1c7b      	adds	r3, r7, #1
 80047c0:	181b      	adds	r3, r3, r0
 80047c2:	106d      	asrs	r5, r5, #1
 80047c4:	42ab      	cmp	r3, r5
 80047c6:	d900      	bls.n	80047ca <__ssputs_r+0x3e>
 80047c8:	001d      	movs	r5, r3
 80047ca:	0552      	lsls	r2, r2, #21
 80047cc:	d528      	bpl.n	8004820 <__ssputs_r+0x94>
 80047ce:	0029      	movs	r1, r5
 80047d0:	9802      	ldr	r0, [sp, #8]
 80047d2:	f7ff fe91 	bl	80044f8 <_malloc_r>
 80047d6:	1e06      	subs	r6, r0, #0
 80047d8:	d02c      	beq.n	8004834 <__ssputs_r+0xa8>
 80047da:	9a01      	ldr	r2, [sp, #4]
 80047dc:	6921      	ldr	r1, [r4, #16]
 80047de:	f7ff ff81 	bl	80046e4 <memcpy>
 80047e2:	89a2      	ldrh	r2, [r4, #12]
 80047e4:	4b18      	ldr	r3, [pc, #96]	@ (8004848 <__ssputs_r+0xbc>)
 80047e6:	401a      	ands	r2, r3
 80047e8:	2380      	movs	r3, #128	@ 0x80
 80047ea:	4313      	orrs	r3, r2
 80047ec:	81a3      	strh	r3, [r4, #12]
 80047ee:	9b01      	ldr	r3, [sp, #4]
 80047f0:	6126      	str	r6, [r4, #16]
 80047f2:	18f6      	adds	r6, r6, r3
 80047f4:	6026      	str	r6, [r4, #0]
 80047f6:	003e      	movs	r6, r7
 80047f8:	6165      	str	r5, [r4, #20]
 80047fa:	1aed      	subs	r5, r5, r3
 80047fc:	60a5      	str	r5, [r4, #8]
 80047fe:	42be      	cmp	r6, r7
 8004800:	d900      	bls.n	8004804 <__ssputs_r+0x78>
 8004802:	003e      	movs	r6, r7
 8004804:	0032      	movs	r2, r6
 8004806:	9903      	ldr	r1, [sp, #12]
 8004808:	6820      	ldr	r0, [r4, #0]
 800480a:	f000 fa9b 	bl	8004d44 <memmove>
 800480e:	2000      	movs	r0, #0
 8004810:	68a3      	ldr	r3, [r4, #8]
 8004812:	1b9b      	subs	r3, r3, r6
 8004814:	60a3      	str	r3, [r4, #8]
 8004816:	6823      	ldr	r3, [r4, #0]
 8004818:	199b      	adds	r3, r3, r6
 800481a:	6023      	str	r3, [r4, #0]
 800481c:	b005      	add	sp, #20
 800481e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004820:	002a      	movs	r2, r5
 8004822:	9802      	ldr	r0, [sp, #8]
 8004824:	f000 faac 	bl	8004d80 <_realloc_r>
 8004828:	1e06      	subs	r6, r0, #0
 800482a:	d1e0      	bne.n	80047ee <__ssputs_r+0x62>
 800482c:	6921      	ldr	r1, [r4, #16]
 800482e:	9802      	ldr	r0, [sp, #8]
 8004830:	f7ff ff62 	bl	80046f8 <_free_r>
 8004834:	230c      	movs	r3, #12
 8004836:	2001      	movs	r0, #1
 8004838:	9a02      	ldr	r2, [sp, #8]
 800483a:	4240      	negs	r0, r0
 800483c:	6013      	str	r3, [r2, #0]
 800483e:	89a2      	ldrh	r2, [r4, #12]
 8004840:	3334      	adds	r3, #52	@ 0x34
 8004842:	4313      	orrs	r3, r2
 8004844:	81a3      	strh	r3, [r4, #12]
 8004846:	e7e9      	b.n	800481c <__ssputs_r+0x90>
 8004848:	fffffb7f 	.word	0xfffffb7f

0800484c <_svfiprintf_r>:
 800484c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800484e:	b0a1      	sub	sp, #132	@ 0x84
 8004850:	9003      	str	r0, [sp, #12]
 8004852:	001d      	movs	r5, r3
 8004854:	898b      	ldrh	r3, [r1, #12]
 8004856:	000f      	movs	r7, r1
 8004858:	0016      	movs	r6, r2
 800485a:	061b      	lsls	r3, r3, #24
 800485c:	d511      	bpl.n	8004882 <_svfiprintf_r+0x36>
 800485e:	690b      	ldr	r3, [r1, #16]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d10e      	bne.n	8004882 <_svfiprintf_r+0x36>
 8004864:	2140      	movs	r1, #64	@ 0x40
 8004866:	f7ff fe47 	bl	80044f8 <_malloc_r>
 800486a:	6038      	str	r0, [r7, #0]
 800486c:	6138      	str	r0, [r7, #16]
 800486e:	2800      	cmp	r0, #0
 8004870:	d105      	bne.n	800487e <_svfiprintf_r+0x32>
 8004872:	230c      	movs	r3, #12
 8004874:	9a03      	ldr	r2, [sp, #12]
 8004876:	6013      	str	r3, [r2, #0]
 8004878:	2001      	movs	r0, #1
 800487a:	4240      	negs	r0, r0
 800487c:	e0cf      	b.n	8004a1e <_svfiprintf_r+0x1d2>
 800487e:	2340      	movs	r3, #64	@ 0x40
 8004880:	617b      	str	r3, [r7, #20]
 8004882:	2300      	movs	r3, #0
 8004884:	ac08      	add	r4, sp, #32
 8004886:	6163      	str	r3, [r4, #20]
 8004888:	3320      	adds	r3, #32
 800488a:	7663      	strb	r3, [r4, #25]
 800488c:	3310      	adds	r3, #16
 800488e:	76a3      	strb	r3, [r4, #26]
 8004890:	9507      	str	r5, [sp, #28]
 8004892:	0035      	movs	r5, r6
 8004894:	782b      	ldrb	r3, [r5, #0]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d001      	beq.n	800489e <_svfiprintf_r+0x52>
 800489a:	2b25      	cmp	r3, #37	@ 0x25
 800489c:	d148      	bne.n	8004930 <_svfiprintf_r+0xe4>
 800489e:	1bab      	subs	r3, r5, r6
 80048a0:	9305      	str	r3, [sp, #20]
 80048a2:	42b5      	cmp	r5, r6
 80048a4:	d00b      	beq.n	80048be <_svfiprintf_r+0x72>
 80048a6:	0032      	movs	r2, r6
 80048a8:	0039      	movs	r1, r7
 80048aa:	9803      	ldr	r0, [sp, #12]
 80048ac:	f7ff ff6e 	bl	800478c <__ssputs_r>
 80048b0:	3001      	adds	r0, #1
 80048b2:	d100      	bne.n	80048b6 <_svfiprintf_r+0x6a>
 80048b4:	e0ae      	b.n	8004a14 <_svfiprintf_r+0x1c8>
 80048b6:	6963      	ldr	r3, [r4, #20]
 80048b8:	9a05      	ldr	r2, [sp, #20]
 80048ba:	189b      	adds	r3, r3, r2
 80048bc:	6163      	str	r3, [r4, #20]
 80048be:	782b      	ldrb	r3, [r5, #0]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d100      	bne.n	80048c6 <_svfiprintf_r+0x7a>
 80048c4:	e0a6      	b.n	8004a14 <_svfiprintf_r+0x1c8>
 80048c6:	2201      	movs	r2, #1
 80048c8:	2300      	movs	r3, #0
 80048ca:	4252      	negs	r2, r2
 80048cc:	6062      	str	r2, [r4, #4]
 80048ce:	a904      	add	r1, sp, #16
 80048d0:	3254      	adds	r2, #84	@ 0x54
 80048d2:	1852      	adds	r2, r2, r1
 80048d4:	1c6e      	adds	r6, r5, #1
 80048d6:	6023      	str	r3, [r4, #0]
 80048d8:	60e3      	str	r3, [r4, #12]
 80048da:	60a3      	str	r3, [r4, #8]
 80048dc:	7013      	strb	r3, [r2, #0]
 80048de:	65a3      	str	r3, [r4, #88]	@ 0x58
 80048e0:	4b54      	ldr	r3, [pc, #336]	@ (8004a34 <_svfiprintf_r+0x1e8>)
 80048e2:	2205      	movs	r2, #5
 80048e4:	0018      	movs	r0, r3
 80048e6:	7831      	ldrb	r1, [r6, #0]
 80048e8:	9305      	str	r3, [sp, #20]
 80048ea:	f000 fa3e 	bl	8004d6a <memchr>
 80048ee:	1c75      	adds	r5, r6, #1
 80048f0:	2800      	cmp	r0, #0
 80048f2:	d11f      	bne.n	8004934 <_svfiprintf_r+0xe8>
 80048f4:	6822      	ldr	r2, [r4, #0]
 80048f6:	06d3      	lsls	r3, r2, #27
 80048f8:	d504      	bpl.n	8004904 <_svfiprintf_r+0xb8>
 80048fa:	2353      	movs	r3, #83	@ 0x53
 80048fc:	a904      	add	r1, sp, #16
 80048fe:	185b      	adds	r3, r3, r1
 8004900:	2120      	movs	r1, #32
 8004902:	7019      	strb	r1, [r3, #0]
 8004904:	0713      	lsls	r3, r2, #28
 8004906:	d504      	bpl.n	8004912 <_svfiprintf_r+0xc6>
 8004908:	2353      	movs	r3, #83	@ 0x53
 800490a:	a904      	add	r1, sp, #16
 800490c:	185b      	adds	r3, r3, r1
 800490e:	212b      	movs	r1, #43	@ 0x2b
 8004910:	7019      	strb	r1, [r3, #0]
 8004912:	7833      	ldrb	r3, [r6, #0]
 8004914:	2b2a      	cmp	r3, #42	@ 0x2a
 8004916:	d016      	beq.n	8004946 <_svfiprintf_r+0xfa>
 8004918:	0035      	movs	r5, r6
 800491a:	2100      	movs	r1, #0
 800491c:	200a      	movs	r0, #10
 800491e:	68e3      	ldr	r3, [r4, #12]
 8004920:	782a      	ldrb	r2, [r5, #0]
 8004922:	1c6e      	adds	r6, r5, #1
 8004924:	3a30      	subs	r2, #48	@ 0x30
 8004926:	2a09      	cmp	r2, #9
 8004928:	d950      	bls.n	80049cc <_svfiprintf_r+0x180>
 800492a:	2900      	cmp	r1, #0
 800492c:	d111      	bne.n	8004952 <_svfiprintf_r+0x106>
 800492e:	e017      	b.n	8004960 <_svfiprintf_r+0x114>
 8004930:	3501      	adds	r5, #1
 8004932:	e7af      	b.n	8004894 <_svfiprintf_r+0x48>
 8004934:	9b05      	ldr	r3, [sp, #20]
 8004936:	6822      	ldr	r2, [r4, #0]
 8004938:	1ac0      	subs	r0, r0, r3
 800493a:	2301      	movs	r3, #1
 800493c:	4083      	lsls	r3, r0
 800493e:	4313      	orrs	r3, r2
 8004940:	002e      	movs	r6, r5
 8004942:	6023      	str	r3, [r4, #0]
 8004944:	e7cc      	b.n	80048e0 <_svfiprintf_r+0x94>
 8004946:	9b07      	ldr	r3, [sp, #28]
 8004948:	1d19      	adds	r1, r3, #4
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	9107      	str	r1, [sp, #28]
 800494e:	2b00      	cmp	r3, #0
 8004950:	db01      	blt.n	8004956 <_svfiprintf_r+0x10a>
 8004952:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004954:	e004      	b.n	8004960 <_svfiprintf_r+0x114>
 8004956:	425b      	negs	r3, r3
 8004958:	60e3      	str	r3, [r4, #12]
 800495a:	2302      	movs	r3, #2
 800495c:	4313      	orrs	r3, r2
 800495e:	6023      	str	r3, [r4, #0]
 8004960:	782b      	ldrb	r3, [r5, #0]
 8004962:	2b2e      	cmp	r3, #46	@ 0x2e
 8004964:	d10c      	bne.n	8004980 <_svfiprintf_r+0x134>
 8004966:	786b      	ldrb	r3, [r5, #1]
 8004968:	2b2a      	cmp	r3, #42	@ 0x2a
 800496a:	d134      	bne.n	80049d6 <_svfiprintf_r+0x18a>
 800496c:	9b07      	ldr	r3, [sp, #28]
 800496e:	3502      	adds	r5, #2
 8004970:	1d1a      	adds	r2, r3, #4
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	9207      	str	r2, [sp, #28]
 8004976:	2b00      	cmp	r3, #0
 8004978:	da01      	bge.n	800497e <_svfiprintf_r+0x132>
 800497a:	2301      	movs	r3, #1
 800497c:	425b      	negs	r3, r3
 800497e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004980:	4e2d      	ldr	r6, [pc, #180]	@ (8004a38 <_svfiprintf_r+0x1ec>)
 8004982:	2203      	movs	r2, #3
 8004984:	0030      	movs	r0, r6
 8004986:	7829      	ldrb	r1, [r5, #0]
 8004988:	f000 f9ef 	bl	8004d6a <memchr>
 800498c:	2800      	cmp	r0, #0
 800498e:	d006      	beq.n	800499e <_svfiprintf_r+0x152>
 8004990:	2340      	movs	r3, #64	@ 0x40
 8004992:	1b80      	subs	r0, r0, r6
 8004994:	4083      	lsls	r3, r0
 8004996:	6822      	ldr	r2, [r4, #0]
 8004998:	3501      	adds	r5, #1
 800499a:	4313      	orrs	r3, r2
 800499c:	6023      	str	r3, [r4, #0]
 800499e:	7829      	ldrb	r1, [r5, #0]
 80049a0:	2206      	movs	r2, #6
 80049a2:	4826      	ldr	r0, [pc, #152]	@ (8004a3c <_svfiprintf_r+0x1f0>)
 80049a4:	1c6e      	adds	r6, r5, #1
 80049a6:	7621      	strb	r1, [r4, #24]
 80049a8:	f000 f9df 	bl	8004d6a <memchr>
 80049ac:	2800      	cmp	r0, #0
 80049ae:	d038      	beq.n	8004a22 <_svfiprintf_r+0x1d6>
 80049b0:	4b23      	ldr	r3, [pc, #140]	@ (8004a40 <_svfiprintf_r+0x1f4>)
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d122      	bne.n	80049fc <_svfiprintf_r+0x1b0>
 80049b6:	2207      	movs	r2, #7
 80049b8:	9b07      	ldr	r3, [sp, #28]
 80049ba:	3307      	adds	r3, #7
 80049bc:	4393      	bics	r3, r2
 80049be:	3308      	adds	r3, #8
 80049c0:	9307      	str	r3, [sp, #28]
 80049c2:	6963      	ldr	r3, [r4, #20]
 80049c4:	9a04      	ldr	r2, [sp, #16]
 80049c6:	189b      	adds	r3, r3, r2
 80049c8:	6163      	str	r3, [r4, #20]
 80049ca:	e762      	b.n	8004892 <_svfiprintf_r+0x46>
 80049cc:	4343      	muls	r3, r0
 80049ce:	0035      	movs	r5, r6
 80049d0:	2101      	movs	r1, #1
 80049d2:	189b      	adds	r3, r3, r2
 80049d4:	e7a4      	b.n	8004920 <_svfiprintf_r+0xd4>
 80049d6:	2300      	movs	r3, #0
 80049d8:	200a      	movs	r0, #10
 80049da:	0019      	movs	r1, r3
 80049dc:	3501      	adds	r5, #1
 80049de:	6063      	str	r3, [r4, #4]
 80049e0:	782a      	ldrb	r2, [r5, #0]
 80049e2:	1c6e      	adds	r6, r5, #1
 80049e4:	3a30      	subs	r2, #48	@ 0x30
 80049e6:	2a09      	cmp	r2, #9
 80049e8:	d903      	bls.n	80049f2 <_svfiprintf_r+0x1a6>
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d0c8      	beq.n	8004980 <_svfiprintf_r+0x134>
 80049ee:	9109      	str	r1, [sp, #36]	@ 0x24
 80049f0:	e7c6      	b.n	8004980 <_svfiprintf_r+0x134>
 80049f2:	4341      	muls	r1, r0
 80049f4:	0035      	movs	r5, r6
 80049f6:	2301      	movs	r3, #1
 80049f8:	1889      	adds	r1, r1, r2
 80049fa:	e7f1      	b.n	80049e0 <_svfiprintf_r+0x194>
 80049fc:	aa07      	add	r2, sp, #28
 80049fe:	9200      	str	r2, [sp, #0]
 8004a00:	0021      	movs	r1, r4
 8004a02:	003a      	movs	r2, r7
 8004a04:	4b0f      	ldr	r3, [pc, #60]	@ (8004a44 <_svfiprintf_r+0x1f8>)
 8004a06:	9803      	ldr	r0, [sp, #12]
 8004a08:	e000      	b.n	8004a0c <_svfiprintf_r+0x1c0>
 8004a0a:	bf00      	nop
 8004a0c:	9004      	str	r0, [sp, #16]
 8004a0e:	9b04      	ldr	r3, [sp, #16]
 8004a10:	3301      	adds	r3, #1
 8004a12:	d1d6      	bne.n	80049c2 <_svfiprintf_r+0x176>
 8004a14:	89bb      	ldrh	r3, [r7, #12]
 8004a16:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8004a18:	065b      	lsls	r3, r3, #25
 8004a1a:	d500      	bpl.n	8004a1e <_svfiprintf_r+0x1d2>
 8004a1c:	e72c      	b.n	8004878 <_svfiprintf_r+0x2c>
 8004a1e:	b021      	add	sp, #132	@ 0x84
 8004a20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a22:	aa07      	add	r2, sp, #28
 8004a24:	9200      	str	r2, [sp, #0]
 8004a26:	0021      	movs	r1, r4
 8004a28:	003a      	movs	r2, r7
 8004a2a:	4b06      	ldr	r3, [pc, #24]	@ (8004a44 <_svfiprintf_r+0x1f8>)
 8004a2c:	9803      	ldr	r0, [sp, #12]
 8004a2e:	f000 f87b 	bl	8004b28 <_printf_i>
 8004a32:	e7eb      	b.n	8004a0c <_svfiprintf_r+0x1c0>
 8004a34:	080050c4 	.word	0x080050c4
 8004a38:	080050ca 	.word	0x080050ca
 8004a3c:	080050ce 	.word	0x080050ce
 8004a40:	00000000 	.word	0x00000000
 8004a44:	0800478d 	.word	0x0800478d

08004a48 <_printf_common>:
 8004a48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a4a:	0016      	movs	r6, r2
 8004a4c:	9301      	str	r3, [sp, #4]
 8004a4e:	688a      	ldr	r2, [r1, #8]
 8004a50:	690b      	ldr	r3, [r1, #16]
 8004a52:	000c      	movs	r4, r1
 8004a54:	9000      	str	r0, [sp, #0]
 8004a56:	4293      	cmp	r3, r2
 8004a58:	da00      	bge.n	8004a5c <_printf_common+0x14>
 8004a5a:	0013      	movs	r3, r2
 8004a5c:	0022      	movs	r2, r4
 8004a5e:	6033      	str	r3, [r6, #0]
 8004a60:	3243      	adds	r2, #67	@ 0x43
 8004a62:	7812      	ldrb	r2, [r2, #0]
 8004a64:	2a00      	cmp	r2, #0
 8004a66:	d001      	beq.n	8004a6c <_printf_common+0x24>
 8004a68:	3301      	adds	r3, #1
 8004a6a:	6033      	str	r3, [r6, #0]
 8004a6c:	6823      	ldr	r3, [r4, #0]
 8004a6e:	069b      	lsls	r3, r3, #26
 8004a70:	d502      	bpl.n	8004a78 <_printf_common+0x30>
 8004a72:	6833      	ldr	r3, [r6, #0]
 8004a74:	3302      	adds	r3, #2
 8004a76:	6033      	str	r3, [r6, #0]
 8004a78:	6822      	ldr	r2, [r4, #0]
 8004a7a:	2306      	movs	r3, #6
 8004a7c:	0015      	movs	r5, r2
 8004a7e:	401d      	ands	r5, r3
 8004a80:	421a      	tst	r2, r3
 8004a82:	d027      	beq.n	8004ad4 <_printf_common+0x8c>
 8004a84:	0023      	movs	r3, r4
 8004a86:	3343      	adds	r3, #67	@ 0x43
 8004a88:	781b      	ldrb	r3, [r3, #0]
 8004a8a:	1e5a      	subs	r2, r3, #1
 8004a8c:	4193      	sbcs	r3, r2
 8004a8e:	6822      	ldr	r2, [r4, #0]
 8004a90:	0692      	lsls	r2, r2, #26
 8004a92:	d430      	bmi.n	8004af6 <_printf_common+0xae>
 8004a94:	0022      	movs	r2, r4
 8004a96:	9901      	ldr	r1, [sp, #4]
 8004a98:	9800      	ldr	r0, [sp, #0]
 8004a9a:	9d08      	ldr	r5, [sp, #32]
 8004a9c:	3243      	adds	r2, #67	@ 0x43
 8004a9e:	47a8      	blx	r5
 8004aa0:	3001      	adds	r0, #1
 8004aa2:	d025      	beq.n	8004af0 <_printf_common+0xa8>
 8004aa4:	2206      	movs	r2, #6
 8004aa6:	6823      	ldr	r3, [r4, #0]
 8004aa8:	2500      	movs	r5, #0
 8004aaa:	4013      	ands	r3, r2
 8004aac:	2b04      	cmp	r3, #4
 8004aae:	d105      	bne.n	8004abc <_printf_common+0x74>
 8004ab0:	6833      	ldr	r3, [r6, #0]
 8004ab2:	68e5      	ldr	r5, [r4, #12]
 8004ab4:	1aed      	subs	r5, r5, r3
 8004ab6:	43eb      	mvns	r3, r5
 8004ab8:	17db      	asrs	r3, r3, #31
 8004aba:	401d      	ands	r5, r3
 8004abc:	68a3      	ldr	r3, [r4, #8]
 8004abe:	6922      	ldr	r2, [r4, #16]
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	dd01      	ble.n	8004ac8 <_printf_common+0x80>
 8004ac4:	1a9b      	subs	r3, r3, r2
 8004ac6:	18ed      	adds	r5, r5, r3
 8004ac8:	2600      	movs	r6, #0
 8004aca:	42b5      	cmp	r5, r6
 8004acc:	d120      	bne.n	8004b10 <_printf_common+0xc8>
 8004ace:	2000      	movs	r0, #0
 8004ad0:	e010      	b.n	8004af4 <_printf_common+0xac>
 8004ad2:	3501      	adds	r5, #1
 8004ad4:	68e3      	ldr	r3, [r4, #12]
 8004ad6:	6832      	ldr	r2, [r6, #0]
 8004ad8:	1a9b      	subs	r3, r3, r2
 8004ada:	42ab      	cmp	r3, r5
 8004adc:	ddd2      	ble.n	8004a84 <_printf_common+0x3c>
 8004ade:	0022      	movs	r2, r4
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	9901      	ldr	r1, [sp, #4]
 8004ae4:	9800      	ldr	r0, [sp, #0]
 8004ae6:	9f08      	ldr	r7, [sp, #32]
 8004ae8:	3219      	adds	r2, #25
 8004aea:	47b8      	blx	r7
 8004aec:	3001      	adds	r0, #1
 8004aee:	d1f0      	bne.n	8004ad2 <_printf_common+0x8a>
 8004af0:	2001      	movs	r0, #1
 8004af2:	4240      	negs	r0, r0
 8004af4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004af6:	2030      	movs	r0, #48	@ 0x30
 8004af8:	18e1      	adds	r1, r4, r3
 8004afa:	3143      	adds	r1, #67	@ 0x43
 8004afc:	7008      	strb	r0, [r1, #0]
 8004afe:	0021      	movs	r1, r4
 8004b00:	1c5a      	adds	r2, r3, #1
 8004b02:	3145      	adds	r1, #69	@ 0x45
 8004b04:	7809      	ldrb	r1, [r1, #0]
 8004b06:	18a2      	adds	r2, r4, r2
 8004b08:	3243      	adds	r2, #67	@ 0x43
 8004b0a:	3302      	adds	r3, #2
 8004b0c:	7011      	strb	r1, [r2, #0]
 8004b0e:	e7c1      	b.n	8004a94 <_printf_common+0x4c>
 8004b10:	0022      	movs	r2, r4
 8004b12:	2301      	movs	r3, #1
 8004b14:	9901      	ldr	r1, [sp, #4]
 8004b16:	9800      	ldr	r0, [sp, #0]
 8004b18:	9f08      	ldr	r7, [sp, #32]
 8004b1a:	321a      	adds	r2, #26
 8004b1c:	47b8      	blx	r7
 8004b1e:	3001      	adds	r0, #1
 8004b20:	d0e6      	beq.n	8004af0 <_printf_common+0xa8>
 8004b22:	3601      	adds	r6, #1
 8004b24:	e7d1      	b.n	8004aca <_printf_common+0x82>
	...

08004b28 <_printf_i>:
 8004b28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b2a:	b08b      	sub	sp, #44	@ 0x2c
 8004b2c:	9206      	str	r2, [sp, #24]
 8004b2e:	000a      	movs	r2, r1
 8004b30:	3243      	adds	r2, #67	@ 0x43
 8004b32:	9307      	str	r3, [sp, #28]
 8004b34:	9005      	str	r0, [sp, #20]
 8004b36:	9203      	str	r2, [sp, #12]
 8004b38:	7e0a      	ldrb	r2, [r1, #24]
 8004b3a:	000c      	movs	r4, r1
 8004b3c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004b3e:	2a78      	cmp	r2, #120	@ 0x78
 8004b40:	d809      	bhi.n	8004b56 <_printf_i+0x2e>
 8004b42:	2a62      	cmp	r2, #98	@ 0x62
 8004b44:	d80b      	bhi.n	8004b5e <_printf_i+0x36>
 8004b46:	2a00      	cmp	r2, #0
 8004b48:	d100      	bne.n	8004b4c <_printf_i+0x24>
 8004b4a:	e0bc      	b.n	8004cc6 <_printf_i+0x19e>
 8004b4c:	497b      	ldr	r1, [pc, #492]	@ (8004d3c <_printf_i+0x214>)
 8004b4e:	9104      	str	r1, [sp, #16]
 8004b50:	2a58      	cmp	r2, #88	@ 0x58
 8004b52:	d100      	bne.n	8004b56 <_printf_i+0x2e>
 8004b54:	e090      	b.n	8004c78 <_printf_i+0x150>
 8004b56:	0025      	movs	r5, r4
 8004b58:	3542      	adds	r5, #66	@ 0x42
 8004b5a:	702a      	strb	r2, [r5, #0]
 8004b5c:	e022      	b.n	8004ba4 <_printf_i+0x7c>
 8004b5e:	0010      	movs	r0, r2
 8004b60:	3863      	subs	r0, #99	@ 0x63
 8004b62:	2815      	cmp	r0, #21
 8004b64:	d8f7      	bhi.n	8004b56 <_printf_i+0x2e>
 8004b66:	f7fb fad3 	bl	8000110 <__gnu_thumb1_case_shi>
 8004b6a:	0016      	.short	0x0016
 8004b6c:	fff6001f 	.word	0xfff6001f
 8004b70:	fff6fff6 	.word	0xfff6fff6
 8004b74:	001ffff6 	.word	0x001ffff6
 8004b78:	fff6fff6 	.word	0xfff6fff6
 8004b7c:	fff6fff6 	.word	0xfff6fff6
 8004b80:	003600a1 	.word	0x003600a1
 8004b84:	fff60080 	.word	0xfff60080
 8004b88:	00b2fff6 	.word	0x00b2fff6
 8004b8c:	0036fff6 	.word	0x0036fff6
 8004b90:	fff6fff6 	.word	0xfff6fff6
 8004b94:	0084      	.short	0x0084
 8004b96:	0025      	movs	r5, r4
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	3542      	adds	r5, #66	@ 0x42
 8004b9c:	1d11      	adds	r1, r2, #4
 8004b9e:	6019      	str	r1, [r3, #0]
 8004ba0:	6813      	ldr	r3, [r2, #0]
 8004ba2:	702b      	strb	r3, [r5, #0]
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e0a0      	b.n	8004cea <_printf_i+0x1c2>
 8004ba8:	6818      	ldr	r0, [r3, #0]
 8004baa:	6809      	ldr	r1, [r1, #0]
 8004bac:	1d02      	adds	r2, r0, #4
 8004bae:	060d      	lsls	r5, r1, #24
 8004bb0:	d50b      	bpl.n	8004bca <_printf_i+0xa2>
 8004bb2:	6806      	ldr	r6, [r0, #0]
 8004bb4:	601a      	str	r2, [r3, #0]
 8004bb6:	2e00      	cmp	r6, #0
 8004bb8:	da03      	bge.n	8004bc2 <_printf_i+0x9a>
 8004bba:	232d      	movs	r3, #45	@ 0x2d
 8004bbc:	9a03      	ldr	r2, [sp, #12]
 8004bbe:	4276      	negs	r6, r6
 8004bc0:	7013      	strb	r3, [r2, #0]
 8004bc2:	4b5e      	ldr	r3, [pc, #376]	@ (8004d3c <_printf_i+0x214>)
 8004bc4:	270a      	movs	r7, #10
 8004bc6:	9304      	str	r3, [sp, #16]
 8004bc8:	e018      	b.n	8004bfc <_printf_i+0xd4>
 8004bca:	6806      	ldr	r6, [r0, #0]
 8004bcc:	601a      	str	r2, [r3, #0]
 8004bce:	0649      	lsls	r1, r1, #25
 8004bd0:	d5f1      	bpl.n	8004bb6 <_printf_i+0x8e>
 8004bd2:	b236      	sxth	r6, r6
 8004bd4:	e7ef      	b.n	8004bb6 <_printf_i+0x8e>
 8004bd6:	6808      	ldr	r0, [r1, #0]
 8004bd8:	6819      	ldr	r1, [r3, #0]
 8004bda:	c940      	ldmia	r1!, {r6}
 8004bdc:	0605      	lsls	r5, r0, #24
 8004bde:	d402      	bmi.n	8004be6 <_printf_i+0xbe>
 8004be0:	0640      	lsls	r0, r0, #25
 8004be2:	d500      	bpl.n	8004be6 <_printf_i+0xbe>
 8004be4:	b2b6      	uxth	r6, r6
 8004be6:	6019      	str	r1, [r3, #0]
 8004be8:	4b54      	ldr	r3, [pc, #336]	@ (8004d3c <_printf_i+0x214>)
 8004bea:	270a      	movs	r7, #10
 8004bec:	9304      	str	r3, [sp, #16]
 8004bee:	2a6f      	cmp	r2, #111	@ 0x6f
 8004bf0:	d100      	bne.n	8004bf4 <_printf_i+0xcc>
 8004bf2:	3f02      	subs	r7, #2
 8004bf4:	0023      	movs	r3, r4
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	3343      	adds	r3, #67	@ 0x43
 8004bfa:	701a      	strb	r2, [r3, #0]
 8004bfc:	6863      	ldr	r3, [r4, #4]
 8004bfe:	60a3      	str	r3, [r4, #8]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	db03      	blt.n	8004c0c <_printf_i+0xe4>
 8004c04:	2104      	movs	r1, #4
 8004c06:	6822      	ldr	r2, [r4, #0]
 8004c08:	438a      	bics	r2, r1
 8004c0a:	6022      	str	r2, [r4, #0]
 8004c0c:	2e00      	cmp	r6, #0
 8004c0e:	d102      	bne.n	8004c16 <_printf_i+0xee>
 8004c10:	9d03      	ldr	r5, [sp, #12]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d00c      	beq.n	8004c30 <_printf_i+0x108>
 8004c16:	9d03      	ldr	r5, [sp, #12]
 8004c18:	0030      	movs	r0, r6
 8004c1a:	0039      	movs	r1, r7
 8004c1c:	f7fb fb08 	bl	8000230 <__aeabi_uidivmod>
 8004c20:	9b04      	ldr	r3, [sp, #16]
 8004c22:	3d01      	subs	r5, #1
 8004c24:	5c5b      	ldrb	r3, [r3, r1]
 8004c26:	702b      	strb	r3, [r5, #0]
 8004c28:	0033      	movs	r3, r6
 8004c2a:	0006      	movs	r6, r0
 8004c2c:	429f      	cmp	r7, r3
 8004c2e:	d9f3      	bls.n	8004c18 <_printf_i+0xf0>
 8004c30:	2f08      	cmp	r7, #8
 8004c32:	d109      	bne.n	8004c48 <_printf_i+0x120>
 8004c34:	6823      	ldr	r3, [r4, #0]
 8004c36:	07db      	lsls	r3, r3, #31
 8004c38:	d506      	bpl.n	8004c48 <_printf_i+0x120>
 8004c3a:	6862      	ldr	r2, [r4, #4]
 8004c3c:	6923      	ldr	r3, [r4, #16]
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	dc02      	bgt.n	8004c48 <_printf_i+0x120>
 8004c42:	2330      	movs	r3, #48	@ 0x30
 8004c44:	3d01      	subs	r5, #1
 8004c46:	702b      	strb	r3, [r5, #0]
 8004c48:	9b03      	ldr	r3, [sp, #12]
 8004c4a:	1b5b      	subs	r3, r3, r5
 8004c4c:	6123      	str	r3, [r4, #16]
 8004c4e:	9b07      	ldr	r3, [sp, #28]
 8004c50:	0021      	movs	r1, r4
 8004c52:	9300      	str	r3, [sp, #0]
 8004c54:	9805      	ldr	r0, [sp, #20]
 8004c56:	9b06      	ldr	r3, [sp, #24]
 8004c58:	aa09      	add	r2, sp, #36	@ 0x24
 8004c5a:	f7ff fef5 	bl	8004a48 <_printf_common>
 8004c5e:	3001      	adds	r0, #1
 8004c60:	d148      	bne.n	8004cf4 <_printf_i+0x1cc>
 8004c62:	2001      	movs	r0, #1
 8004c64:	4240      	negs	r0, r0
 8004c66:	b00b      	add	sp, #44	@ 0x2c
 8004c68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c6a:	2220      	movs	r2, #32
 8004c6c:	6809      	ldr	r1, [r1, #0]
 8004c6e:	430a      	orrs	r2, r1
 8004c70:	6022      	str	r2, [r4, #0]
 8004c72:	2278      	movs	r2, #120	@ 0x78
 8004c74:	4932      	ldr	r1, [pc, #200]	@ (8004d40 <_printf_i+0x218>)
 8004c76:	9104      	str	r1, [sp, #16]
 8004c78:	0021      	movs	r1, r4
 8004c7a:	3145      	adds	r1, #69	@ 0x45
 8004c7c:	700a      	strb	r2, [r1, #0]
 8004c7e:	6819      	ldr	r1, [r3, #0]
 8004c80:	6822      	ldr	r2, [r4, #0]
 8004c82:	c940      	ldmia	r1!, {r6}
 8004c84:	0610      	lsls	r0, r2, #24
 8004c86:	d402      	bmi.n	8004c8e <_printf_i+0x166>
 8004c88:	0650      	lsls	r0, r2, #25
 8004c8a:	d500      	bpl.n	8004c8e <_printf_i+0x166>
 8004c8c:	b2b6      	uxth	r6, r6
 8004c8e:	6019      	str	r1, [r3, #0]
 8004c90:	07d3      	lsls	r3, r2, #31
 8004c92:	d502      	bpl.n	8004c9a <_printf_i+0x172>
 8004c94:	2320      	movs	r3, #32
 8004c96:	4313      	orrs	r3, r2
 8004c98:	6023      	str	r3, [r4, #0]
 8004c9a:	2e00      	cmp	r6, #0
 8004c9c:	d001      	beq.n	8004ca2 <_printf_i+0x17a>
 8004c9e:	2710      	movs	r7, #16
 8004ca0:	e7a8      	b.n	8004bf4 <_printf_i+0xcc>
 8004ca2:	2220      	movs	r2, #32
 8004ca4:	6823      	ldr	r3, [r4, #0]
 8004ca6:	4393      	bics	r3, r2
 8004ca8:	6023      	str	r3, [r4, #0]
 8004caa:	e7f8      	b.n	8004c9e <_printf_i+0x176>
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	680d      	ldr	r5, [r1, #0]
 8004cb0:	1d10      	adds	r0, r2, #4
 8004cb2:	6949      	ldr	r1, [r1, #20]
 8004cb4:	6018      	str	r0, [r3, #0]
 8004cb6:	6813      	ldr	r3, [r2, #0]
 8004cb8:	062e      	lsls	r6, r5, #24
 8004cba:	d501      	bpl.n	8004cc0 <_printf_i+0x198>
 8004cbc:	6019      	str	r1, [r3, #0]
 8004cbe:	e002      	b.n	8004cc6 <_printf_i+0x19e>
 8004cc0:	066d      	lsls	r5, r5, #25
 8004cc2:	d5fb      	bpl.n	8004cbc <_printf_i+0x194>
 8004cc4:	8019      	strh	r1, [r3, #0]
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	9d03      	ldr	r5, [sp, #12]
 8004cca:	6123      	str	r3, [r4, #16]
 8004ccc:	e7bf      	b.n	8004c4e <_printf_i+0x126>
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	1d11      	adds	r1, r2, #4
 8004cd2:	6019      	str	r1, [r3, #0]
 8004cd4:	6815      	ldr	r5, [r2, #0]
 8004cd6:	2100      	movs	r1, #0
 8004cd8:	0028      	movs	r0, r5
 8004cda:	6862      	ldr	r2, [r4, #4]
 8004cdc:	f000 f845 	bl	8004d6a <memchr>
 8004ce0:	2800      	cmp	r0, #0
 8004ce2:	d001      	beq.n	8004ce8 <_printf_i+0x1c0>
 8004ce4:	1b40      	subs	r0, r0, r5
 8004ce6:	6060      	str	r0, [r4, #4]
 8004ce8:	6863      	ldr	r3, [r4, #4]
 8004cea:	6123      	str	r3, [r4, #16]
 8004cec:	2300      	movs	r3, #0
 8004cee:	9a03      	ldr	r2, [sp, #12]
 8004cf0:	7013      	strb	r3, [r2, #0]
 8004cf2:	e7ac      	b.n	8004c4e <_printf_i+0x126>
 8004cf4:	002a      	movs	r2, r5
 8004cf6:	6923      	ldr	r3, [r4, #16]
 8004cf8:	9906      	ldr	r1, [sp, #24]
 8004cfa:	9805      	ldr	r0, [sp, #20]
 8004cfc:	9d07      	ldr	r5, [sp, #28]
 8004cfe:	47a8      	blx	r5
 8004d00:	3001      	adds	r0, #1
 8004d02:	d0ae      	beq.n	8004c62 <_printf_i+0x13a>
 8004d04:	6823      	ldr	r3, [r4, #0]
 8004d06:	079b      	lsls	r3, r3, #30
 8004d08:	d415      	bmi.n	8004d36 <_printf_i+0x20e>
 8004d0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d0c:	68e0      	ldr	r0, [r4, #12]
 8004d0e:	4298      	cmp	r0, r3
 8004d10:	daa9      	bge.n	8004c66 <_printf_i+0x13e>
 8004d12:	0018      	movs	r0, r3
 8004d14:	e7a7      	b.n	8004c66 <_printf_i+0x13e>
 8004d16:	0022      	movs	r2, r4
 8004d18:	2301      	movs	r3, #1
 8004d1a:	9906      	ldr	r1, [sp, #24]
 8004d1c:	9805      	ldr	r0, [sp, #20]
 8004d1e:	9e07      	ldr	r6, [sp, #28]
 8004d20:	3219      	adds	r2, #25
 8004d22:	47b0      	blx	r6
 8004d24:	3001      	adds	r0, #1
 8004d26:	d09c      	beq.n	8004c62 <_printf_i+0x13a>
 8004d28:	3501      	adds	r5, #1
 8004d2a:	68e3      	ldr	r3, [r4, #12]
 8004d2c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004d2e:	1a9b      	subs	r3, r3, r2
 8004d30:	42ab      	cmp	r3, r5
 8004d32:	dcf0      	bgt.n	8004d16 <_printf_i+0x1ee>
 8004d34:	e7e9      	b.n	8004d0a <_printf_i+0x1e2>
 8004d36:	2500      	movs	r5, #0
 8004d38:	e7f7      	b.n	8004d2a <_printf_i+0x202>
 8004d3a:	46c0      	nop			@ (mov r8, r8)
 8004d3c:	080050d5 	.word	0x080050d5
 8004d40:	080050e6 	.word	0x080050e6

08004d44 <memmove>:
 8004d44:	b510      	push	{r4, lr}
 8004d46:	4288      	cmp	r0, r1
 8004d48:	d806      	bhi.n	8004d58 <memmove+0x14>
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d008      	beq.n	8004d62 <memmove+0x1e>
 8004d50:	5ccc      	ldrb	r4, [r1, r3]
 8004d52:	54c4      	strb	r4, [r0, r3]
 8004d54:	3301      	adds	r3, #1
 8004d56:	e7f9      	b.n	8004d4c <memmove+0x8>
 8004d58:	188b      	adds	r3, r1, r2
 8004d5a:	4298      	cmp	r0, r3
 8004d5c:	d2f5      	bcs.n	8004d4a <memmove+0x6>
 8004d5e:	3a01      	subs	r2, #1
 8004d60:	d200      	bcs.n	8004d64 <memmove+0x20>
 8004d62:	bd10      	pop	{r4, pc}
 8004d64:	5c8b      	ldrb	r3, [r1, r2]
 8004d66:	5483      	strb	r3, [r0, r2]
 8004d68:	e7f9      	b.n	8004d5e <memmove+0x1a>

08004d6a <memchr>:
 8004d6a:	b2c9      	uxtb	r1, r1
 8004d6c:	1882      	adds	r2, r0, r2
 8004d6e:	4290      	cmp	r0, r2
 8004d70:	d101      	bne.n	8004d76 <memchr+0xc>
 8004d72:	2000      	movs	r0, #0
 8004d74:	4770      	bx	lr
 8004d76:	7803      	ldrb	r3, [r0, #0]
 8004d78:	428b      	cmp	r3, r1
 8004d7a:	d0fb      	beq.n	8004d74 <memchr+0xa>
 8004d7c:	3001      	adds	r0, #1
 8004d7e:	e7f6      	b.n	8004d6e <memchr+0x4>

08004d80 <_realloc_r>:
 8004d80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d82:	0006      	movs	r6, r0
 8004d84:	000c      	movs	r4, r1
 8004d86:	0015      	movs	r5, r2
 8004d88:	2900      	cmp	r1, #0
 8004d8a:	d105      	bne.n	8004d98 <_realloc_r+0x18>
 8004d8c:	0011      	movs	r1, r2
 8004d8e:	f7ff fbb3 	bl	80044f8 <_malloc_r>
 8004d92:	0004      	movs	r4, r0
 8004d94:	0020      	movs	r0, r4
 8004d96:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004d98:	2a00      	cmp	r2, #0
 8004d9a:	d103      	bne.n	8004da4 <_realloc_r+0x24>
 8004d9c:	f7ff fcac 	bl	80046f8 <_free_r>
 8004da0:	2400      	movs	r4, #0
 8004da2:	e7f7      	b.n	8004d94 <_realloc_r+0x14>
 8004da4:	f000 f81b 	bl	8004dde <_malloc_usable_size_r>
 8004da8:	0007      	movs	r7, r0
 8004daa:	4285      	cmp	r5, r0
 8004dac:	d802      	bhi.n	8004db4 <_realloc_r+0x34>
 8004dae:	0843      	lsrs	r3, r0, #1
 8004db0:	42ab      	cmp	r3, r5
 8004db2:	d3ef      	bcc.n	8004d94 <_realloc_r+0x14>
 8004db4:	0029      	movs	r1, r5
 8004db6:	0030      	movs	r0, r6
 8004db8:	f7ff fb9e 	bl	80044f8 <_malloc_r>
 8004dbc:	9001      	str	r0, [sp, #4]
 8004dbe:	2800      	cmp	r0, #0
 8004dc0:	d0ee      	beq.n	8004da0 <_realloc_r+0x20>
 8004dc2:	002a      	movs	r2, r5
 8004dc4:	42bd      	cmp	r5, r7
 8004dc6:	d900      	bls.n	8004dca <_realloc_r+0x4a>
 8004dc8:	003a      	movs	r2, r7
 8004dca:	0021      	movs	r1, r4
 8004dcc:	9801      	ldr	r0, [sp, #4]
 8004dce:	f7ff fc89 	bl	80046e4 <memcpy>
 8004dd2:	0021      	movs	r1, r4
 8004dd4:	0030      	movs	r0, r6
 8004dd6:	f7ff fc8f 	bl	80046f8 <_free_r>
 8004dda:	9c01      	ldr	r4, [sp, #4]
 8004ddc:	e7da      	b.n	8004d94 <_realloc_r+0x14>

08004dde <_malloc_usable_size_r>:
 8004dde:	1f0b      	subs	r3, r1, #4
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	1f18      	subs	r0, r3, #4
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	da01      	bge.n	8004dec <_malloc_usable_size_r+0xe>
 8004de8:	580b      	ldr	r3, [r1, r0]
 8004dea:	18c0      	adds	r0, r0, r3
 8004dec:	4770      	bx	lr
	...

08004df0 <_init>:
 8004df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004df2:	46c0      	nop			@ (mov r8, r8)
 8004df4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004df6:	bc08      	pop	{r3}
 8004df8:	469e      	mov	lr, r3
 8004dfa:	4770      	bx	lr

08004dfc <_fini>:
 8004dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dfe:	46c0      	nop			@ (mov r8, r8)
 8004e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e02:	bc08      	pop	{r3}
 8004e04:	469e      	mov	lr, r3
 8004e06:	4770      	bx	lr
