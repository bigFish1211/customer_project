
PCB3_analog.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e34  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08002ef0  08002ef0  00003ef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f70  08002f70  00004054  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002f70  08002f70  00004054  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002f70  08002f70  00004054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f70  08002f70  00003f70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002f74  08002f74  00003f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  08002f78  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d84  20000054  08002fcc  00004054  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000dd8  08002fcc  00004dd8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00004054  2**0
                  CONTENTS, READONLY
 12 .debug_info   000057da  00000000  00000000  0000407c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001819  00000000  00000000  00009856  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000768  00000000  00000000  0000b070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000565  00000000  00000000  0000b7d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000040a4  00000000  00000000  0000bd3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007002  00000000  00000000  0000fde1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00057c08  00000000  00000000  00016de3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0006e9eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001dfc  00000000  00000000  0006ea30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  0007082c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000054 	.word	0x20000054
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08002ed8 	.word	0x08002ed8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000058 	.word	0x20000058
 8000100:	08002ed8 	.word	0x08002ed8

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	@ 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f806 	bl	800023c <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__aeabi_idiv0>:
 800023c:	4770      	bx	lr
 800023e:	46c0      	nop			@ (mov r8, r8)

08000240 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b084      	sub	sp, #16
 8000244:	af00      	add	r7, sp, #0
 8000246:	60f8      	str	r0, [r7, #12]
 8000248:	60b9      	str	r1, [r7, #8]
 800024a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800024c:	68fb      	ldr	r3, [r7, #12]
 800024e:	6819      	ldr	r1, [r3, #0]
 8000250:	68bb      	ldr	r3, [r7, #8]
 8000252:	435b      	muls	r3, r3
 8000254:	001a      	movs	r2, r3
 8000256:	0013      	movs	r3, r2
 8000258:	005b      	lsls	r3, r3, #1
 800025a:	189b      	adds	r3, r3, r2
 800025c:	43db      	mvns	r3, r3
 800025e:	400b      	ands	r3, r1
 8000260:	001a      	movs	r2, r3
 8000262:	68bb      	ldr	r3, [r7, #8]
 8000264:	435b      	muls	r3, r3
 8000266:	6879      	ldr	r1, [r7, #4]
 8000268:	434b      	muls	r3, r1
 800026a:	431a      	orrs	r2, r3
 800026c:	68fb      	ldr	r3, [r7, #12]
 800026e:	601a      	str	r2, [r3, #0]
}
 8000270:	46c0      	nop			@ (mov r8, r8)
 8000272:	46bd      	mov	sp, r7
 8000274:	b004      	add	sp, #16
 8000276:	bd80      	pop	{r7, pc}

08000278 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b084      	sub	sp, #16
 800027c:	af00      	add	r7, sp, #0
 800027e:	60f8      	str	r0, [r7, #12]
 8000280:	60b9      	str	r1, [r7, #8]
 8000282:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000284:	68fb      	ldr	r3, [r7, #12]
 8000286:	685b      	ldr	r3, [r3, #4]
 8000288:	68ba      	ldr	r2, [r7, #8]
 800028a:	43d2      	mvns	r2, r2
 800028c:	401a      	ands	r2, r3
 800028e:	68bb      	ldr	r3, [r7, #8]
 8000290:	6879      	ldr	r1, [r7, #4]
 8000292:	434b      	muls	r3, r1
 8000294:	431a      	orrs	r2, r3
 8000296:	68fb      	ldr	r3, [r7, #12]
 8000298:	605a      	str	r2, [r3, #4]
}
 800029a:	46c0      	nop			@ (mov r8, r8)
 800029c:	46bd      	mov	sp, r7
 800029e:	b004      	add	sp, #16
 80002a0:	bd80      	pop	{r7, pc}

080002a2 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80002a2:	b580      	push	{r7, lr}
 80002a4:	b084      	sub	sp, #16
 80002a6:	af00      	add	r7, sp, #0
 80002a8:	60f8      	str	r0, [r7, #12]
 80002aa:	60b9      	str	r1, [r7, #8]
 80002ac:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 80002ae:	68fb      	ldr	r3, [r7, #12]
 80002b0:	6899      	ldr	r1, [r3, #8]
 80002b2:	68bb      	ldr	r3, [r7, #8]
 80002b4:	435b      	muls	r3, r3
 80002b6:	001a      	movs	r2, r3
 80002b8:	0013      	movs	r3, r2
 80002ba:	005b      	lsls	r3, r3, #1
 80002bc:	189b      	adds	r3, r3, r2
 80002be:	43db      	mvns	r3, r3
 80002c0:	400b      	ands	r3, r1
 80002c2:	001a      	movs	r2, r3
 80002c4:	68bb      	ldr	r3, [r7, #8]
 80002c6:	435b      	muls	r3, r3
 80002c8:	6879      	ldr	r1, [r7, #4]
 80002ca:	434b      	muls	r3, r1
 80002cc:	431a      	orrs	r2, r3
 80002ce:	68fb      	ldr	r3, [r7, #12]
 80002d0:	609a      	str	r2, [r3, #8]
}
 80002d2:	46c0      	nop			@ (mov r8, r8)
 80002d4:	46bd      	mov	sp, r7
 80002d6:	b004      	add	sp, #16
 80002d8:	bd80      	pop	{r7, pc}

080002da <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80002da:	b580      	push	{r7, lr}
 80002dc:	b084      	sub	sp, #16
 80002de:	af00      	add	r7, sp, #0
 80002e0:	60f8      	str	r0, [r7, #12]
 80002e2:	60b9      	str	r1, [r7, #8]
 80002e4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80002e6:	68fb      	ldr	r3, [r7, #12]
 80002e8:	68d9      	ldr	r1, [r3, #12]
 80002ea:	68bb      	ldr	r3, [r7, #8]
 80002ec:	435b      	muls	r3, r3
 80002ee:	001a      	movs	r2, r3
 80002f0:	0013      	movs	r3, r2
 80002f2:	005b      	lsls	r3, r3, #1
 80002f4:	189b      	adds	r3, r3, r2
 80002f6:	43db      	mvns	r3, r3
 80002f8:	400b      	ands	r3, r1
 80002fa:	001a      	movs	r2, r3
 80002fc:	68bb      	ldr	r3, [r7, #8]
 80002fe:	435b      	muls	r3, r3
 8000300:	6879      	ldr	r1, [r7, #4]
 8000302:	434b      	muls	r3, r1
 8000304:	431a      	orrs	r2, r3
 8000306:	68fb      	ldr	r3, [r7, #12]
 8000308:	60da      	str	r2, [r3, #12]
}
 800030a:	46c0      	nop			@ (mov r8, r8)
 800030c:	46bd      	mov	sp, r7
 800030e:	b004      	add	sp, #16
 8000310:	bd80      	pop	{r7, pc}

08000312 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_6
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000312:	b580      	push	{r7, lr}
 8000314:	b084      	sub	sp, #16
 8000316:	af00      	add	r7, sp, #0
 8000318:	60f8      	str	r0, [r7, #12]
 800031a:	60b9      	str	r1, [r7, #8]
 800031c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	6a19      	ldr	r1, [r3, #32]
 8000322:	68bb      	ldr	r3, [r7, #8]
 8000324:	435b      	muls	r3, r3
 8000326:	68ba      	ldr	r2, [r7, #8]
 8000328:	4353      	muls	r3, r2
 800032a:	68ba      	ldr	r2, [r7, #8]
 800032c:	435a      	muls	r2, r3
 800032e:	0013      	movs	r3, r2
 8000330:	011b      	lsls	r3, r3, #4
 8000332:	1a9b      	subs	r3, r3, r2
 8000334:	43db      	mvns	r3, r3
 8000336:	400b      	ands	r3, r1
 8000338:	001a      	movs	r2, r3
 800033a:	68bb      	ldr	r3, [r7, #8]
 800033c:	435b      	muls	r3, r3
 800033e:	68b9      	ldr	r1, [r7, #8]
 8000340:	434b      	muls	r3, r1
 8000342:	68b9      	ldr	r1, [r7, #8]
 8000344:	434b      	muls	r3, r1
 8000346:	6879      	ldr	r1, [r7, #4]
 8000348:	434b      	muls	r3, r1
 800034a:	431a      	orrs	r2, r3
 800034c:	68fb      	ldr	r3, [r7, #12]
 800034e:	621a      	str	r2, [r3, #32]
             ((((Pin * Pin) * Pin) * Pin) * Alternate));
}
 8000350:	46c0      	nop			@ (mov r8, r8)
 8000352:	46bd      	mov	sp, r7
 8000354:	b004      	add	sp, #16
 8000356:	bd80      	pop	{r7, pc}

08000358 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_6
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b084      	sub	sp, #16
 800035c:	af00      	add	r7, sp, #0
 800035e:	60f8      	str	r0, [r7, #12]
 8000360:	60b9      	str	r1, [r7, #8]
 8000362:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8000364:	68fb      	ldr	r3, [r7, #12]
 8000366:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8000368:	68bb      	ldr	r3, [r7, #8]
 800036a:	0a1b      	lsrs	r3, r3, #8
 800036c:	68ba      	ldr	r2, [r7, #8]
 800036e:	0a12      	lsrs	r2, r2, #8
 8000370:	4353      	muls	r3, r2
 8000372:	68ba      	ldr	r2, [r7, #8]
 8000374:	0a12      	lsrs	r2, r2, #8
 8000376:	4353      	muls	r3, r2
 8000378:	68ba      	ldr	r2, [r7, #8]
 800037a:	0a12      	lsrs	r2, r2, #8
 800037c:	435a      	muls	r2, r3
 800037e:	0013      	movs	r3, r2
 8000380:	011b      	lsls	r3, r3, #4
 8000382:	1a9b      	subs	r3, r3, r2
 8000384:	43db      	mvns	r3, r3
 8000386:	400b      	ands	r3, r1
 8000388:	001a      	movs	r2, r3
 800038a:	68bb      	ldr	r3, [r7, #8]
 800038c:	0a1b      	lsrs	r3, r3, #8
 800038e:	68b9      	ldr	r1, [r7, #8]
 8000390:	0a09      	lsrs	r1, r1, #8
 8000392:	434b      	muls	r3, r1
 8000394:	68b9      	ldr	r1, [r7, #8]
 8000396:	0a09      	lsrs	r1, r1, #8
 8000398:	434b      	muls	r3, r1
 800039a:	68b9      	ldr	r1, [r7, #8]
 800039c:	0a09      	lsrs	r1, r1, #8
 800039e:	434b      	muls	r3, r1
 80003a0:	6879      	ldr	r1, [r7, #4]
 80003a2:	434b      	muls	r3, r1
 80003a4:	431a      	orrs	r2, r3
 80003a6:	68fb      	ldr	r3, [r7, #12]
 80003a8:	625a      	str	r2, [r3, #36]	@ 0x24
             (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * Alternate));
}
 80003aa:	46c0      	nop			@ (mov r8, r8)
 80003ac:	46bd      	mov	sp, r7
 80003ae:	b004      	add	sp, #16
 80003b0:	bd80      	pop	{r7, pc}

080003b2 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80003b2:	b580      	push	{r7, lr}
 80003b4:	b084      	sub	sp, #16
 80003b6:	af00      	add	r7, sp, #0
 80003b8:	6078      	str	r0, [r7, #4]
 80003ba:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 80003bc:	2300      	movs	r3, #0
 80003be:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80003c0:	e047      	b.n	8000452 <LL_GPIO_Init+0xa0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80003c2:	683b      	ldr	r3, [r7, #0]
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	2101      	movs	r1, #1
 80003c8:	68fa      	ldr	r2, [r7, #12]
 80003ca:	4091      	lsls	r1, r2
 80003cc:	000a      	movs	r2, r1
 80003ce:	4013      	ands	r3, r2
 80003d0:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 80003d2:	68bb      	ldr	r3, [r7, #8]
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d039      	beq.n	800044c <LL_GPIO_Init+0x9a>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80003d8:	683b      	ldr	r3, [r7, #0]
 80003da:	685b      	ldr	r3, [r3, #4]
 80003dc:	2b01      	cmp	r3, #1
 80003de:	d003      	beq.n	80003e8 <LL_GPIO_Init+0x36>
 80003e0:	683b      	ldr	r3, [r7, #0]
 80003e2:	685b      	ldr	r3, [r3, #4]
 80003e4:	2b02      	cmp	r3, #2
 80003e6:	d10d      	bne.n	8000404 <LL_GPIO_Init+0x52>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80003e8:	683b      	ldr	r3, [r7, #0]
 80003ea:	689a      	ldr	r2, [r3, #8]
 80003ec:	68b9      	ldr	r1, [r7, #8]
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	0018      	movs	r0, r3
 80003f2:	f7ff ff56 	bl	80002a2 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80003f6:	683b      	ldr	r3, [r7, #0]
 80003f8:	68da      	ldr	r2, [r3, #12]
 80003fa:	68b9      	ldr	r1, [r7, #8]
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	0018      	movs	r0, r3
 8000400:	f7ff ff3a 	bl	8000278 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8000404:	683b      	ldr	r3, [r7, #0]
 8000406:	691a      	ldr	r2, [r3, #16]
 8000408:	68b9      	ldr	r1, [r7, #8]
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	0018      	movs	r0, r3
 800040e:	f7ff ff64 	bl	80002da <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8000412:	683b      	ldr	r3, [r7, #0]
 8000414:	685b      	ldr	r3, [r3, #4]
 8000416:	2b02      	cmp	r3, #2
 8000418:	d111      	bne.n	800043e <LL_GPIO_Init+0x8c>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800041a:	68bb      	ldr	r3, [r7, #8]
 800041c:	2bff      	cmp	r3, #255	@ 0xff
 800041e:	d807      	bhi.n	8000430 <LL_GPIO_Init+0x7e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000420:	683b      	ldr	r3, [r7, #0]
 8000422:	695a      	ldr	r2, [r3, #20]
 8000424:	68b9      	ldr	r1, [r7, #8]
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	0018      	movs	r0, r3
 800042a:	f7ff ff72 	bl	8000312 <LL_GPIO_SetAFPin_0_7>
 800042e:	e006      	b.n	800043e <LL_GPIO_Init+0x8c>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000430:	683b      	ldr	r3, [r7, #0]
 8000432:	695a      	ldr	r2, [r3, #20]
 8000434:	68b9      	ldr	r1, [r7, #8]
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	0018      	movs	r0, r3
 800043a:	f7ff ff8d 	bl	8000358 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800043e:	683b      	ldr	r3, [r7, #0]
 8000440:	685a      	ldr	r2, [r3, #4]
 8000442:	68b9      	ldr	r1, [r7, #8]
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	0018      	movs	r0, r3
 8000448:	f7ff fefa 	bl	8000240 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800044c:	68fb      	ldr	r3, [r7, #12]
 800044e:	3301      	adds	r3, #1
 8000450:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8000452:	683b      	ldr	r3, [r7, #0]
 8000454:	681a      	ldr	r2, [r3, #0]
 8000456:	68fb      	ldr	r3, [r7, #12]
 8000458:	40da      	lsrs	r2, r3
 800045a:	1e13      	subs	r3, r2, #0
 800045c:	d1b1      	bne.n	80003c2 <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 800045e:	2300      	movs	r3, #0
}
 8000460:	0018      	movs	r0, r3
 8000462:	46bd      	mov	sp, r7
 8000464:	b004      	add	sp, #16
 8000466:	bd80      	pop	{r7, pc}

08000468 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	2201      	movs	r2, #1
 8000476:	431a      	orrs	r2, r3
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	601a      	str	r2, [r3, #0]
}
 800047c:	46c0      	nop			@ (mov r8, r8)
 800047e:	46bd      	mov	sp, r7
 8000480:	b002      	add	sp, #8
 8000482:	bd80      	pop	{r7, pc}

08000484 <LL_I2C_Disable>:
  * @rmtoll CR1          PE            LL_I2C_Disable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Disable(I2C_TypeDef *I2Cx)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	2201      	movs	r2, #1
 8000492:	4393      	bics	r3, r2
 8000494:	001a      	movs	r2, r3
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	601a      	str	r2, [r3, #0]
}
 800049a:	46c0      	nop			@ (mov r8, r8)
 800049c:	46bd      	mov	sp, r7
 800049e:	b002      	add	sp, #8
 80004a0:	bd80      	pop	{r7, pc}
	...

080004a4 <LL_I2C_ConfigFilters>:
  *         This parameter is used to configure the digital noise filter on SDA and SCL input.
  *         The digital filter will filter spikes with a length of up to DNF[3:0]*ti2cclk.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigFilters(I2C_TypeDef *I2Cx, uint32_t AnalogFilter, uint32_t DigitalFilter)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b084      	sub	sp, #16
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	60f8      	str	r0, [r7, #12]
 80004ac:	60b9      	str	r1, [r7, #8]
 80004ae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 80004b0:	68fb      	ldr	r3, [r7, #12]
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	4a06      	ldr	r2, [pc, #24]	@ (80004d0 <LL_I2C_ConfigFilters+0x2c>)
 80004b6:	401a      	ands	r2, r3
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	0219      	lsls	r1, r3, #8
 80004bc:	68bb      	ldr	r3, [r7, #8]
 80004be:	430b      	orrs	r3, r1
 80004c0:	431a      	orrs	r2, r3
 80004c2:	68fb      	ldr	r3, [r7, #12]
 80004c4:	601a      	str	r2, [r3, #0]
}
 80004c6:	46c0      	nop			@ (mov r8, r8)
 80004c8:	46bd      	mov	sp, r7
 80004ca:	b004      	add	sp, #16
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	46c0      	nop			@ (mov r8, r8)
 80004d0:	ffffe0ff 	.word	0xffffe0ff

080004d4 <LL_I2C_SetOwnAddress1>:
  *         @arg @ref LL_I2C_OWNADDRESS1_7BIT
  *         @arg @ref LL_I2C_OWNADDRESS1_10BIT
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress1(I2C_TypeDef *I2Cx, uint32_t OwnAddress1, uint32_t OwnAddrSize)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b084      	sub	sp, #16
 80004d8:	af00      	add	r7, sp, #0
 80004da:	60f8      	str	r0, [r7, #12]
 80004dc:	60b9      	str	r1, [r7, #8]
 80004de:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	689b      	ldr	r3, [r3, #8]
 80004e4:	0adb      	lsrs	r3, r3, #11
 80004e6:	02da      	lsls	r2, r3, #11
 80004e8:	68b9      	ldr	r1, [r7, #8]
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	430b      	orrs	r3, r1
 80004ee:	431a      	orrs	r2, r3
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	609a      	str	r2, [r3, #8]
}
 80004f4:	46c0      	nop			@ (mov r8, r8)
 80004f6:	46bd      	mov	sp, r7
 80004f8:	b004      	add	sp, #16
 80004fa:	bd80      	pop	{r7, pc}

080004fc <LL_I2C_EnableOwnAddress1>:
  * @rmtoll OAR1         OA1EN         LL_I2C_EnableOwnAddress1
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableOwnAddress1(I2C_TypeDef *I2Cx)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	689b      	ldr	r3, [r3, #8]
 8000508:	2280      	movs	r2, #128	@ 0x80
 800050a:	0212      	lsls	r2, r2, #8
 800050c:	431a      	orrs	r2, r3
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	609a      	str	r2, [r3, #8]
}
 8000512:	46c0      	nop			@ (mov r8, r8)
 8000514:	46bd      	mov	sp, r7
 8000516:	b002      	add	sp, #8
 8000518:	bd80      	pop	{r7, pc}
	...

0800051c <LL_I2C_DisableOwnAddress1>:
  * @rmtoll OAR1         OA1EN         LL_I2C_DisableOwnAddress1
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress1(I2C_TypeDef *I2Cx)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	689b      	ldr	r3, [r3, #8]
 8000528:	4a03      	ldr	r2, [pc, #12]	@ (8000538 <LL_I2C_DisableOwnAddress1+0x1c>)
 800052a:	401a      	ands	r2, r3
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	609a      	str	r2, [r3, #8]
}
 8000530:	46c0      	nop			@ (mov r8, r8)
 8000532:	46bd      	mov	sp, r7
 8000534:	b002      	add	sp, #8
 8000536:	bd80      	pop	{r7, pc}
 8000538:	ffff7fff 	.word	0xffff7fff

0800053c <LL_I2C_SetTiming>:
  * @param  Timing This parameter must be a value between Min_Data=0 and Max_Data=0xFFFFFFFF.
  * @note   This parameter is computed with the STM32CubeMX Tool.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetTiming(I2C_TypeDef *I2Cx, uint32_t Timing)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
 8000544:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	683a      	ldr	r2, [r7, #0]
 800054a:	611a      	str	r2, [r3, #16]
}
 800054c:	46c0      	nop			@ (mov r8, r8)
 800054e:	46bd      	mov	sp, r7
 8000550:	b002      	add	sp, #8
 8000552:	bd80      	pop	{r7, pc}

08000554 <LL_I2C_SetMode>:
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
 800055c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	4a05      	ldr	r2, [pc, #20]	@ (8000578 <LL_I2C_SetMode+0x24>)
 8000564:	401a      	ands	r2, r3
 8000566:	683b      	ldr	r3, [r7, #0]
 8000568:	431a      	orrs	r2, r3
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	601a      	str	r2, [r3, #0]
}
 800056e:	46c0      	nop			@ (mov r8, r8)
 8000570:	46bd      	mov	sp, r7
 8000572:	b002      	add	sp, #8
 8000574:	bd80      	pop	{r7, pc}
 8000576:	46c0      	nop			@ (mov r8, r8)
 8000578:	ffcfffff 	.word	0xffcfffff

0800057c <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
 8000584:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	685b      	ldr	r3, [r3, #4]
 800058a:	4a05      	ldr	r2, [pc, #20]	@ (80005a0 <LL_I2C_AcknowledgeNextData+0x24>)
 800058c:	401a      	ands	r2, r3
 800058e:	683b      	ldr	r3, [r7, #0]
 8000590:	431a      	orrs	r2, r3
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	605a      	str	r2, [r3, #4]
}
 8000596:	46c0      	nop			@ (mov r8, r8)
 8000598:	46bd      	mov	sp, r7
 800059a:	b002      	add	sp, #8
 800059c:	bd80      	pop	{r7, pc}
 800059e:	46c0      	nop			@ (mov r8, r8)
 80005a0:	ffff7fff 	.word	0xffff7fff

080005a4 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
 80005ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	0018      	movs	r0, r3
 80005b2:	f7ff ff67 	bl	8000484 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 80005b6:	683b      	ldr	r3, [r7, #0]
 80005b8:	6899      	ldr	r1, [r3, #8]
 80005ba:	683b      	ldr	r3, [r7, #0]
 80005bc:	68da      	ldr	r2, [r3, #12]
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	0018      	movs	r0, r3
 80005c2:	f7ff ff6f 	bl	80004a4 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 80005c6:	683b      	ldr	r3, [r7, #0]
 80005c8:	685a      	ldr	r2, [r3, #4]
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	0011      	movs	r1, r2
 80005ce:	0018      	movs	r0, r3
 80005d0:	f7ff ffb4 	bl	800053c <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	0018      	movs	r0, r3
 80005d8:	f7ff ff46 	bl	8000468 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	0018      	movs	r0, r3
 80005e0:	f7ff ff9c 	bl	800051c <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	6919      	ldr	r1, [r3, #16]
 80005e8:	683b      	ldr	r3, [r7, #0]
 80005ea:	699a      	ldr	r2, [r3, #24]
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	0018      	movs	r0, r3
 80005f0:	f7ff ff70 	bl	80004d4 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	691b      	ldr	r3, [r3, #16]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d003      	beq.n	8000604 <LL_I2C_Init+0x60>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	0018      	movs	r0, r3
 8000600:	f7ff ff7c 	bl	80004fc <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	681a      	ldr	r2, [r3, #0]
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	0011      	movs	r1, r2
 800060c:	0018      	movs	r0, r3
 800060e:	f7ff ffa1 	bl	8000554 <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	695a      	ldr	r2, [r3, #20]
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	0011      	movs	r1, r2
 800061a:	0018      	movs	r0, r3
 800061c:	f7ff ffae 	bl	800057c <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8000620:	2300      	movs	r3, #0
}
 8000622:	0018      	movs	r0, r3
 8000624:	46bd      	mov	sp, r7
 8000626:	b002      	add	sp, #8
 8000628:	bd80      	pop	{r7, pc}
	...

0800062c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
 8000634:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8000636:	6839      	ldr	r1, [r7, #0]
 8000638:	6878      	ldr	r0, [r7, #4]
 800063a:	f7ff fd75 	bl	8000128 <__udivsi3>
 800063e:	0003      	movs	r3, r0
 8000640:	001a      	movs	r2, r3
 8000642:	4b06      	ldr	r3, [pc, #24]	@ (800065c <LL_InitTick+0x30>)
 8000644:	3a01      	subs	r2, #1
 8000646:	605a      	str	r2, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8000648:	4b04      	ldr	r3, [pc, #16]	@ (800065c <LL_InitTick+0x30>)
 800064a:	2200      	movs	r2, #0
 800064c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800064e:	4b03      	ldr	r3, [pc, #12]	@ (800065c <LL_InitTick+0x30>)
 8000650:	2205      	movs	r2, #5
 8000652:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8000654:	46c0      	nop			@ (mov r8, r8)
 8000656:	46bd      	mov	sp, r7
 8000658:	b002      	add	sp, #8
 800065a:	bd80      	pop	{r7, pc}
 800065c:	e000e010 	.word	0xe000e010

08000660 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8000668:	23fa      	movs	r3, #250	@ 0xfa
 800066a:	009a      	lsls	r2, r3, #2
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	0011      	movs	r1, r2
 8000670:	0018      	movs	r0, r3
 8000672:	f7ff ffdb 	bl	800062c <LL_InitTick>
}
 8000676:	46c0      	nop			@ (mov r8, r8)
 8000678:	46bd      	mov	sp, r7
 800067a:	b002      	add	sp, #8
 800067c:	bd80      	pop	{r7, pc}
	...

08000680 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8000688:	4b03      	ldr	r3, [pc, #12]	@ (8000698 <LL_SetSystemCoreClock+0x18>)
 800068a:	687a      	ldr	r2, [r7, #4]
 800068c:	601a      	str	r2, [r3, #0]
}
 800068e:	46c0      	nop			@ (mov r8, r8)
 8000690:	46bd      	mov	sp, r7
 8000692:	b002      	add	sp, #8
 8000694:	bd80      	pop	{r7, pc}
 8000696:	46c0      	nop			@ (mov r8, r8)
 8000698:	20000000 	.word	0x20000000

0800069c <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOE
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 80006a4:	4b07      	ldr	r3, [pc, #28]	@ (80006c4 <LL_IOP_GRP1_EnableClock+0x28>)
 80006a6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80006a8:	4b06      	ldr	r3, [pc, #24]	@ (80006c4 <LL_IOP_GRP1_EnableClock+0x28>)
 80006aa:	687a      	ldr	r2, [r7, #4]
 80006ac:	430a      	orrs	r2, r1
 80006ae:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 80006b0:	4b04      	ldr	r3, [pc, #16]	@ (80006c4 <LL_IOP_GRP1_EnableClock+0x28>)
 80006b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006b4:	687a      	ldr	r2, [r7, #4]
 80006b6:	4013      	ands	r3, r2
 80006b8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006ba:	68fb      	ldr	r3, [r7, #12]
}
 80006bc:	46c0      	nop			@ (mov r8, r8)
 80006be:	46bd      	mov	sp, r7
 80006c0:	b004      	add	sp, #16
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	40021000 	.word	0x40021000

080006c8 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
 80006d0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	683a      	ldr	r2, [r7, #0]
 80006d6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80006d8:	46c0      	nop			@ (mov r8, r8)
 80006da:	46bd      	mov	sp, r7
 80006dc:	b002      	add	sp, #8
 80006de:	bd80      	pop	{r7, pc}

080006e0 <pin_init>:
    GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;   \
    LL_GPIO_Init(RELAY##n##_GPIO_port, &GPIO_InitStruct); \
} while(0)


void pin_init() {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b086      	sub	sp, #24
 80006e4:	af00      	add	r7, sp, #0

	LL_GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80006e6:	003b      	movs	r3, r7
 80006e8:	0018      	movs	r0, r3
 80006ea:	2318      	movs	r3, #24
 80006ec:	001a      	movs	r2, r3
 80006ee:	2100      	movs	r1, #0
 80006f0:	f002 f828 	bl	8002744 <memset>

	LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 80006f4:	2001      	movs	r0, #1
 80006f6:	f7ff ffd1 	bl	800069c <LL_IOP_GRP1_EnableClock>
	LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 80006fa:	2002      	movs	r0, #2
 80006fc:	f7ff ffce 	bl	800069c <LL_IOP_GRP1_EnableClock>
	LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 8000700:	2004      	movs	r0, #4
 8000702:	f7ff ffcb 	bl	800069c <LL_IOP_GRP1_EnableClock>
	LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOD);
 8000706:	2008      	movs	r0, #8
 8000708:	f7ff ffc8 	bl	800069c <LL_IOP_GRP1_EnableClock>
	LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOF);
 800070c:	2020      	movs	r0, #32
 800070e:	f7ff ffc5 	bl	800069c <LL_IOP_GRP1_EnableClock>

#ifdef LED_MCU_pin
	GPIO_InitStruct.Pin = LED_MCU_pin;
 8000712:	003b      	movs	r3, r7
 8000714:	2280      	movs	r2, #128	@ 0x80
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800071a:	003b      	movs	r3, r7
 800071c:	2201      	movs	r2, #1
 800071e:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000720:	003b      	movs	r3, r7
 8000722:	2200      	movs	r2, #0
 8000724:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000726:	003b      	movs	r3, r7
 8000728:	2200      	movs	r2, #0
 800072a:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800072c:	003b      	movs	r3, r7
 800072e:	2200      	movs	r2, #0
 8000730:	611a      	str	r2, [r3, #16]
	LL_GPIO_Init(LED_MCU_GPIO_port, &GPIO_InitStruct);
 8000732:	003a      	movs	r2, r7
 8000734:	23a0      	movs	r3, #160	@ 0xa0
 8000736:	05db      	lsls	r3, r3, #23
 8000738:	0011      	movs	r1, r2
 800073a:	0018      	movs	r0, r3
 800073c:	f7ff fe39 	bl	80003b2 <LL_GPIO_Init>
#endif

#ifdef RS485_DIR_pin
	GPIO_InitStruct.Pin = RS485_DIR_pin;
 8000740:	003b      	movs	r3, r7
 8000742:	2240      	movs	r2, #64	@ 0x40
 8000744:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000746:	003b      	movs	r3, r7
 8000748:	2201      	movs	r2, #1
 800074a:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800074c:	003b      	movs	r3, r7
 800074e:	2200      	movs	r2, #0
 8000750:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000752:	003b      	movs	r3, r7
 8000754:	2200      	movs	r2, #0
 8000756:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000758:	003b      	movs	r3, r7
 800075a:	2200      	movs	r2, #0
 800075c:	611a      	str	r2, [r3, #16]
	LL_GPIO_Init(RS485_DIR_GPIO_port, &GPIO_InitStruct);
 800075e:	003b      	movs	r3, r7
 8000760:	4a0e      	ldr	r2, [pc, #56]	@ (800079c <pin_init+0xbc>)
 8000762:	0019      	movs	r1, r3
 8000764:	0010      	movs	r0, r2
 8000766:	f7ff fe24 	bl	80003b2 <LL_GPIO_Init>
#endif

#ifdef SW01_pin
	  GPIO_InitStruct.Pin = SW01_pin;
 800076a:	003b      	movs	r3, r7
 800076c:	2280      	movs	r2, #128	@ 0x80
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000772:	003b      	movs	r3, r7
 8000774:	2200      	movs	r2, #0
 8000776:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000778:	003b      	movs	r3, r7
 800077a:	2200      	movs	r2, #0
 800077c:	611a      	str	r2, [r3, #16]
	  LL_GPIO_Init(SW01_pin_GPIO_port, &GPIO_InitStruct);
 800077e:	003b      	movs	r3, r7
 8000780:	4a07      	ldr	r2, [pc, #28]	@ (80007a0 <pin_init+0xc0>)
 8000782:	0019      	movs	r1, r3
 8000784:	0010      	movs	r0, r2
 8000786:	f7ff fe14 	bl	80003b2 <LL_GPIO_Init>
#endif
	RS485_RE();
 800078a:	4b04      	ldr	r3, [pc, #16]	@ (800079c <pin_init+0xbc>)
 800078c:	2140      	movs	r1, #64	@ 0x40
 800078e:	0018      	movs	r0, r3
 8000790:	f7ff ff9a 	bl	80006c8 <LL_GPIO_ResetOutputPin>
}
 8000794:	46c0      	nop			@ (mov r8, r8)
 8000796:	46bd      	mov	sp, r7
 8000798:	b006      	add	sp, #24
 800079a:	bd80      	pop	{r7, pc}
 800079c:	50000800 	.word	0x50000800
 80007a0:	50000400 	.word	0x50000400

080007a4 <LL_APB1_GRP1_EnableClock>:
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b084      	sub	sp, #16
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR1, Periphs);
 80007ac:	4b07      	ldr	r3, [pc, #28]	@ (80007cc <LL_APB1_GRP1_EnableClock+0x28>)
 80007ae:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80007b0:	4b06      	ldr	r3, [pc, #24]	@ (80007cc <LL_APB1_GRP1_EnableClock+0x28>)
 80007b2:	687a      	ldr	r2, [r7, #4]
 80007b4:	430a      	orrs	r2, r1
 80007b6:	63da      	str	r2, [r3, #60]	@ 0x3c
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 80007b8:	4b04      	ldr	r3, [pc, #16]	@ (80007cc <LL_APB1_GRP1_EnableClock+0x28>)
 80007ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80007bc:	687a      	ldr	r2, [r7, #4]
 80007be:	4013      	ands	r3, r2
 80007c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007c2:	68fb      	ldr	r3, [r7, #12]
}
 80007c4:	46c0      	nop			@ (mov r8, r8)
 80007c6:	46bd      	mov	sp, r7
 80007c8:	b004      	add	sp, #16
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	40021000 	.word	0x40021000

080007d0 <LL_IOP_GRP1_EnableClock>:
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 80007d8:	4b07      	ldr	r3, [pc, #28]	@ (80007f8 <LL_IOP_GRP1_EnableClock+0x28>)
 80007da:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80007dc:	4b06      	ldr	r3, [pc, #24]	@ (80007f8 <LL_IOP_GRP1_EnableClock+0x28>)
 80007de:	687a      	ldr	r2, [r7, #4]
 80007e0:	430a      	orrs	r2, r1
 80007e2:	635a      	str	r2, [r3, #52]	@ 0x34
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 80007e4:	4b04      	ldr	r3, [pc, #16]	@ (80007f8 <LL_IOP_GRP1_EnableClock+0x28>)
 80007e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80007e8:	687a      	ldr	r2, [r7, #4]
 80007ea:	4013      	ands	r3, r2
 80007ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007ee:	68fb      	ldr	r3, [r7, #12]
}
 80007f0:	46c0      	nop			@ (mov r8, r8)
 80007f2:	46bd      	mov	sp, r7
 80007f4:	b004      	add	sp, #16
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	40021000 	.word	0x40021000

080007fc <LL_I2C_EnableClockStretching>:
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a03      	ldr	r2, [pc, #12]	@ (8000818 <LL_I2C_EnableClockStretching+0x1c>)
 800080a:	401a      	ands	r2, r3
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	601a      	str	r2, [r3, #0]
}
 8000810:	46c0      	nop			@ (mov r8, r8)
 8000812:	46bd      	mov	sp, r7
 8000814:	b002      	add	sp, #8
 8000816:	bd80      	pop	{r7, pc}
 8000818:	fffdffff 	.word	0xfffdffff

0800081c <LL_I2C_DisableGeneralCall>:
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a03      	ldr	r2, [pc, #12]	@ (8000838 <LL_I2C_DisableGeneralCall+0x1c>)
 800082a:	401a      	ands	r2, r3
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	601a      	str	r2, [r3, #0]
}
 8000830:	46c0      	nop			@ (mov r8, r8)
 8000832:	46bd      	mov	sp, r7
 8000834:	b002      	add	sp, #8
 8000836:	bd80      	pop	{r7, pc}
 8000838:	fff7ffff 	.word	0xfff7ffff

0800083c <LL_I2C_SetOwnAddress2>:
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b084      	sub	sp, #16
 8000840:	af00      	add	r7, sp, #0
 8000842:	60f8      	str	r0, [r7, #12]
 8000844:	60b9      	str	r1, [r7, #8]
 8000846:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	68db      	ldr	r3, [r3, #12]
 800084c:	4a05      	ldr	r2, [pc, #20]	@ (8000864 <LL_I2C_SetOwnAddress2+0x28>)
 800084e:	401a      	ands	r2, r3
 8000850:	68b9      	ldr	r1, [r7, #8]
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	430b      	orrs	r3, r1
 8000856:	431a      	orrs	r2, r3
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	60da      	str	r2, [r3, #12]
}
 800085c:	46c0      	nop			@ (mov r8, r8)
 800085e:	46bd      	mov	sp, r7
 8000860:	b004      	add	sp, #16
 8000862:	bd80      	pop	{r7, pc}
 8000864:	fffff801 	.word	0xfffff801

08000868 <LL_I2C_DisableOwnAddress2>:
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	68db      	ldr	r3, [r3, #12]
 8000874:	4a03      	ldr	r2, [pc, #12]	@ (8000884 <LL_I2C_DisableOwnAddress2+0x1c>)
 8000876:	401a      	ands	r2, r3
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	60da      	str	r2, [r3, #12]
}
 800087c:	46c0      	nop			@ (mov r8, r8)
 800087e:	46bd      	mov	sp, r7
 8000880:	b002      	add	sp, #8
 8000882:	bd80      	pop	{r7, pc}
 8000884:	ffff7fff 	.word	0xffff7fff

08000888 <LL_I2C_IsActiveFlag_TXIS>:
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	699b      	ldr	r3, [r3, #24]
 8000894:	2202      	movs	r2, #2
 8000896:	4013      	ands	r3, r2
 8000898:	2b02      	cmp	r3, #2
 800089a:	d101      	bne.n	80008a0 <LL_I2C_IsActiveFlag_TXIS+0x18>
 800089c:	2301      	movs	r3, #1
 800089e:	e000      	b.n	80008a2 <LL_I2C_IsActiveFlag_TXIS+0x1a>
 80008a0:	2300      	movs	r3, #0
}
 80008a2:	0018      	movs	r0, r3
 80008a4:	46bd      	mov	sp, r7
 80008a6:	b002      	add	sp, #8
 80008a8:	bd80      	pop	{r7, pc}

080008aa <LL_I2C_IsActiveFlag_STOP>:
{
 80008aa:	b580      	push	{r7, lr}
 80008ac:	b082      	sub	sp, #8
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	699b      	ldr	r3, [r3, #24]
 80008b6:	2220      	movs	r2, #32
 80008b8:	4013      	ands	r3, r2
 80008ba:	2b20      	cmp	r3, #32
 80008bc:	d101      	bne.n	80008c2 <LL_I2C_IsActiveFlag_STOP+0x18>
 80008be:	2301      	movs	r3, #1
 80008c0:	e000      	b.n	80008c4 <LL_I2C_IsActiveFlag_STOP+0x1a>
 80008c2:	2300      	movs	r3, #0
}
 80008c4:	0018      	movs	r0, r3
 80008c6:	46bd      	mov	sp, r7
 80008c8:	b002      	add	sp, #8
 80008ca:	bd80      	pop	{r7, pc}

080008cc <LL_I2C_ClearFlag_STOP>:
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	69db      	ldr	r3, [r3, #28]
 80008d8:	2220      	movs	r2, #32
 80008da:	431a      	orrs	r2, r3
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	61da      	str	r2, [r3, #28]
}
 80008e0:	46c0      	nop			@ (mov r8, r8)
 80008e2:	46bd      	mov	sp, r7
 80008e4:	b002      	add	sp, #8
 80008e6:	bd80      	pop	{r7, pc}

080008e8 <LL_I2C_EnableAutoEndMode>:
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	685b      	ldr	r3, [r3, #4]
 80008f4:	2280      	movs	r2, #128	@ 0x80
 80008f6:	0492      	lsls	r2, r2, #18
 80008f8:	431a      	orrs	r2, r3
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	605a      	str	r2, [r3, #4]
}
 80008fe:	46c0      	nop			@ (mov r8, r8)
 8000900:	46bd      	mov	sp, r7
 8000902:	b002      	add	sp, #8
 8000904:	bd80      	pop	{r7, pc}
	...

08000908 <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b084      	sub	sp, #16
 800090c:	af00      	add	r7, sp, #0
 800090e:	60f8      	str	r0, [r7, #12]
 8000910:	60b9      	str	r1, [r7, #8]
 8000912:	607a      	str	r2, [r7, #4]
 8000914:	603b      	str	r3, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	685b      	ldr	r3, [r3, #4]
 800091a:	69fa      	ldr	r2, [r7, #28]
 800091c:	0d51      	lsrs	r1, r2, #21
 800091e:	2280      	movs	r2, #128	@ 0x80
 8000920:	00d2      	lsls	r2, r2, #3
 8000922:	400a      	ands	r2, r1
 8000924:	490a      	ldr	r1, [pc, #40]	@ (8000950 <LL_I2C_HandleTransfer+0x48>)
 8000926:	430a      	orrs	r2, r1
 8000928:	43d2      	mvns	r2, r2
 800092a:	401a      	ands	r2, r3
 800092c:	68b9      	ldr	r1, [r7, #8]
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	4319      	orrs	r1, r3
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	041b      	lsls	r3, r3, #16
 8000936:	4319      	orrs	r1, r3
 8000938:	69bb      	ldr	r3, [r7, #24]
 800093a:	4319      	orrs	r1, r3
 800093c:	69fb      	ldr	r3, [r7, #28]
 800093e:	430b      	orrs	r3, r1
 8000940:	431a      	orrs	r2, r3
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	605a      	str	r2, [r3, #4]
             (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) |
             I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             SlaveAddr | SlaveAddrSize | (TransferSize << I2C_CR2_NBYTES_Pos) | EndMode | Request);
}
 8000946:	46c0      	nop			@ (mov r8, r8)
 8000948:	46bd      	mov	sp, r7
 800094a:	b004      	add	sp, #16
 800094c:	bd80      	pop	{r7, pc}
 800094e:	46c0      	nop			@ (mov r8, r8)
 8000950:	03ff7bff 	.word	0x03ff7bff

08000954 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
 800095c:	000a      	movs	r2, r1
 800095e:	1cfb      	adds	r3, r7, #3
 8000960:	701a      	strb	r2, [r3, #0]
  WRITE_REG(I2Cx->TXDR, Data);
 8000962:	1cfb      	adds	r3, r7, #3
 8000964:	781a      	ldrb	r2, [r3, #0]
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800096a:	46c0      	nop			@ (mov r8, r8)
 800096c:	46bd      	mov	sp, r7
 800096e:	b002      	add	sp, #8
 8000970:	bd80      	pop	{r7, pc}
	...

08000974 <I2C2_Init>:
#define  I2C2_SCL_GPIO_port			GPIOA
#define  I2C2_SCL_AF				LL_GPIO_AF_6
#define  I2C2_SCL_CLK_en()			LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA)

void I2C2_Init()
{
 8000974:	b590      	push	{r4, r7, lr}
 8000976:	b08f      	sub	sp, #60	@ 0x3c
 8000978:	af00      	add	r7, sp, #0
  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 800097a:	241c      	movs	r4, #28
 800097c:	193b      	adds	r3, r7, r4
 800097e:	0018      	movs	r0, r3
 8000980:	231c      	movs	r3, #28
 8000982:	001a      	movs	r2, r3
 8000984:	2100      	movs	r1, #0
 8000986:	f001 fedd 	bl	8002744 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098a:	1d3b      	adds	r3, r7, #4
 800098c:	0018      	movs	r0, r3
 800098e:	2318      	movs	r3, #24
 8000990:	001a      	movs	r2, r3
 8000992:	2100      	movs	r1, #0
 8000994:	f001 fed6 	bl	8002744 <memset>
  //LL_RCC_SetI2CClockSource(LL_RCC_I2C2_CLKSOURCE_PCLK1);
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C2);
 8000998:	2380      	movs	r3, #128	@ 0x80
 800099a:	03db      	lsls	r3, r3, #15
 800099c:	0018      	movs	r0, r3
 800099e:	f7ff ff01 	bl	80007a4 <LL_APB1_GRP1_EnableClock>
  I2C2_SDA_CLK_en();
 80009a2:	2001      	movs	r0, #1
 80009a4:	f7ff ff14 	bl	80007d0 <LL_IOP_GRP1_EnableClock>
  I2C2_SCL_CLK_en();
 80009a8:	2001      	movs	r0, #1
 80009aa:	f7ff ff11 	bl	80007d0 <LL_IOP_GRP1_EnableClock>

  GPIO_InitStruct.Pin = I2C2_SDA_pin;
 80009ae:	1d3b      	adds	r3, r7, #4
 80009b0:	2280      	movs	r2, #128	@ 0x80
 80009b2:	0152      	lsls	r2, r2, #5
 80009b4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80009b6:	1d3b      	adds	r3, r7, #4
 80009b8:	2202      	movs	r2, #2
 80009ba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80009bc:	1d3b      	adds	r3, r7, #4
 80009be:	2202      	movs	r2, #2
 80009c0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80009c2:	1d3b      	adds	r3, r7, #4
 80009c4:	2201      	movs	r2, #1
 80009c6:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80009c8:	1d3b      	adds	r3, r7, #4
 80009ca:	2201      	movs	r2, #1
 80009cc:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = I2C2_SDA_AF;
 80009ce:	1d3b      	adds	r3, r7, #4
 80009d0:	2206      	movs	r2, #6
 80009d2:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(I2C2_SDA_GPIO_port, &GPIO_InitStruct);
 80009d4:	1d3a      	adds	r2, r7, #4
 80009d6:	23a0      	movs	r3, #160	@ 0xa0
 80009d8:	05db      	lsls	r3, r3, #23
 80009da:	0011      	movs	r1, r2
 80009dc:	0018      	movs	r0, r3
 80009de:	f7ff fce8 	bl	80003b2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = I2C2_SCL_pin;
 80009e2:	1d3b      	adds	r3, r7, #4
 80009e4:	2280      	movs	r2, #128	@ 0x80
 80009e6:	0112      	lsls	r2, r2, #4
 80009e8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80009ea:	1d3b      	adds	r3, r7, #4
 80009ec:	2202      	movs	r2, #2
 80009ee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80009f0:	1d3b      	adds	r3, r7, #4
 80009f2:	2202      	movs	r2, #2
 80009f4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80009f6:	1d3b      	adds	r3, r7, #4
 80009f8:	2201      	movs	r2, #1
 80009fa:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80009fc:	1d3b      	adds	r3, r7, #4
 80009fe:	2201      	movs	r2, #1
 8000a00:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = I2C2_SCL_AF;
 8000a02:	1d3b      	adds	r3, r7, #4
 8000a04:	2206      	movs	r2, #6
 8000a06:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(I2C2_SCL_GPIO_port, &GPIO_InitStruct);
 8000a08:	1d3a      	adds	r2, r7, #4
 8000a0a:	23a0      	movs	r3, #160	@ 0xa0
 8000a0c:	05db      	lsls	r3, r3, #23
 8000a0e:	0011      	movs	r1, r2
 8000a10:	0018      	movs	r0, r3
 8000a12:	f7ff fcce 	bl	80003b2 <LL_GPIO_Init>

  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8000a16:	193b      	adds	r3, r7, r4
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
  I2C_InitStruct.Timing = 0x00F02B86;//0x00303D5B;
 8000a1c:	193b      	adds	r3, r7, r4
 8000a1e:	4a19      	ldr	r2, [pc, #100]	@ (8000a84 <I2C2_Init+0x110>)
 8000a20:	605a      	str	r2, [r3, #4]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_DISABLE;
 8000a22:	193b      	adds	r3, r7, r4
 8000a24:	2280      	movs	r2, #128	@ 0x80
 8000a26:	0152      	lsls	r2, r2, #5
 8000a28:	609a      	str	r2, [r3, #8]
  I2C_InitStruct.DigitalFilter = 0;
 8000a2a:	0021      	movs	r1, r4
 8000a2c:	187b      	adds	r3, r7, r1
 8000a2e:	2200      	movs	r2, #0
 8000a30:	60da      	str	r2, [r3, #12]
  I2C_InitStruct.OwnAddress1 = 0;
 8000a32:	187b      	adds	r3, r7, r1
 8000a34:	2200      	movs	r2, #0
 8000a36:	611a      	str	r2, [r3, #16]
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8000a38:	187b      	adds	r3, r7, r1
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	615a      	str	r2, [r3, #20]
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8000a3e:	187b      	adds	r3, r7, r1
 8000a40:	2200      	movs	r2, #0
 8000a42:	619a      	str	r2, [r3, #24]
  LL_I2C_Init(I2C2, &I2C_InitStruct);
 8000a44:	187b      	adds	r3, r7, r1
 8000a46:	4a10      	ldr	r2, [pc, #64]	@ (8000a88 <I2C2_Init+0x114>)
 8000a48:	0019      	movs	r1, r3
 8000a4a:	0010      	movs	r0, r2
 8000a4c:	f7ff fdaa 	bl	80005a4 <LL_I2C_Init>
  LL_I2C_EnableAutoEndMode(I2C2);
 8000a50:	4b0d      	ldr	r3, [pc, #52]	@ (8000a88 <I2C2_Init+0x114>)
 8000a52:	0018      	movs	r0, r3
 8000a54:	f7ff ff48 	bl	80008e8 <LL_I2C_EnableAutoEndMode>
  LL_I2C_SetOwnAddress2(I2C2, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8000a58:	4b0b      	ldr	r3, [pc, #44]	@ (8000a88 <I2C2_Init+0x114>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	0018      	movs	r0, r3
 8000a60:	f7ff feec 	bl	800083c <LL_I2C_SetOwnAddress2>
  LL_I2C_DisableOwnAddress2(I2C2);
 8000a64:	4b08      	ldr	r3, [pc, #32]	@ (8000a88 <I2C2_Init+0x114>)
 8000a66:	0018      	movs	r0, r3
 8000a68:	f7ff fefe 	bl	8000868 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C2);
 8000a6c:	4b06      	ldr	r3, [pc, #24]	@ (8000a88 <I2C2_Init+0x114>)
 8000a6e:	0018      	movs	r0, r3
 8000a70:	f7ff fed4 	bl	800081c <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C2);
 8000a74:	4b04      	ldr	r3, [pc, #16]	@ (8000a88 <I2C2_Init+0x114>)
 8000a76:	0018      	movs	r0, r3
 8000a78:	f7ff fec0 	bl	80007fc <LL_I2C_EnableClockStretching>
  LL_I2C_EnableIT_NACK(I2C2);
  LL_I2C_EnableIT_ERR(I2C2);
  LL_I2C_EnableIT_STOP(I2C2);
#endif

}
 8000a7c:	46c0      	nop			@ (mov r8, r8)
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	b00f      	add	sp, #60	@ 0x3c
 8000a82:	bd90      	pop	{r4, r7, pc}
 8000a84:	00f02b86 	.word	0x00f02b86
 8000a88:	40005800 	.word	0x40005800

08000a8c <I2C2_WriteBuf>:
    LL_I2C_ClearFlag_STOP(I2C2);
}

#endif

void I2C2_WriteBuf(uint8_t devAddr, uint8_t *buffer,uint8_t size){
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b086      	sub	sp, #24
 8000a90:	af02      	add	r7, sp, #8
 8000a92:	6039      	str	r1, [r7, #0]
 8000a94:	0011      	movs	r1, r2
 8000a96:	1dfb      	adds	r3, r7, #7
 8000a98:	1c02      	adds	r2, r0, #0
 8000a9a:	701a      	strb	r2, [r3, #0]
 8000a9c:	1dbb      	adds	r3, r7, #6
 8000a9e:	1c0a      	adds	r2, r1, #0
 8000aa0:	701a      	strb	r2, [r3, #0]
  LL_I2C_HandleTransfer(I2C2, devAddr, LL_I2C_ADDRSLAVE_7BIT, size, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8000aa2:	1dfb      	adds	r3, r7, #7
 8000aa4:	7819      	ldrb	r1, [r3, #0]
 8000aa6:	1dbb      	adds	r3, r7, #6
 8000aa8:	781a      	ldrb	r2, [r3, #0]
 8000aaa:	481c      	ldr	r0, [pc, #112]	@ (8000b1c <I2C2_WriteBuf+0x90>)
 8000aac:	4b1c      	ldr	r3, [pc, #112]	@ (8000b20 <I2C2_WriteBuf+0x94>)
 8000aae:	9301      	str	r3, [sp, #4]
 8000ab0:	2380      	movs	r3, #128	@ 0x80
 8000ab2:	049b      	lsls	r3, r3, #18
 8000ab4:	9300      	str	r3, [sp, #0]
 8000ab6:	0013      	movs	r3, r2
 8000ab8:	2200      	movs	r2, #0
 8000aba:	f7ff ff25 	bl	8000908 <LL_I2C_HandleTransfer>
  int i = size;
 8000abe:	1dbb      	adds	r3, r7, #6
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	60fb      	str	r3, [r7, #12]
	while (!LL_I2C_IsActiveFlag_STOP(I2C2)&&i) {
 8000ac4:	e011      	b.n	8000aea <I2C2_WriteBuf+0x5e>
			if (LL_I2C_IsActiveFlag_TXIS(I2C2)) {
 8000ac6:	4b15      	ldr	r3, [pc, #84]	@ (8000b1c <I2C2_WriteBuf+0x90>)
 8000ac8:	0018      	movs	r0, r3
 8000aca:	f7ff fedd 	bl	8000888 <LL_I2C_IsActiveFlag_TXIS>
 8000ace:	1e03      	subs	r3, r0, #0
 8000ad0:	d00b      	beq.n	8000aea <I2C2_WriteBuf+0x5e>
				LL_I2C_TransmitData8(I2C2, *(buffer++));
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	1c5a      	adds	r2, r3, #1
 8000ad6:	603a      	str	r2, [r7, #0]
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	4a10      	ldr	r2, [pc, #64]	@ (8000b1c <I2C2_WriteBuf+0x90>)
 8000adc:	0019      	movs	r1, r3
 8000ade:	0010      	movs	r0, r2
 8000ae0:	f7ff ff38 	bl	8000954 <LL_I2C_TransmitData8>
				i--;
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	3b01      	subs	r3, #1
 8000ae8:	60fb      	str	r3, [r7, #12]
	while (!LL_I2C_IsActiveFlag_STOP(I2C2)&&i) {
 8000aea:	4b0c      	ldr	r3, [pc, #48]	@ (8000b1c <I2C2_WriteBuf+0x90>)
 8000aec:	0018      	movs	r0, r3
 8000aee:	f7ff fedc 	bl	80008aa <LL_I2C_IsActiveFlag_STOP>
 8000af2:	1e03      	subs	r3, r0, #0
 8000af4:	d102      	bne.n	8000afc <I2C2_WriteBuf+0x70>
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d1e4      	bne.n	8000ac6 <I2C2_WriteBuf+0x3a>
		}
	}
	  while (!LL_I2C_IsActiveFlag_STOP(I2C2));
 8000afc:	46c0      	nop			@ (mov r8, r8)
 8000afe:	4b07      	ldr	r3, [pc, #28]	@ (8000b1c <I2C2_WriteBuf+0x90>)
 8000b00:	0018      	movs	r0, r3
 8000b02:	f7ff fed2 	bl	80008aa <LL_I2C_IsActiveFlag_STOP>
 8000b06:	1e03      	subs	r3, r0, #0
 8000b08:	d0f9      	beq.n	8000afe <I2C2_WriteBuf+0x72>
  LL_I2C_ClearFlag_STOP(I2C2);
 8000b0a:	4b04      	ldr	r3, [pc, #16]	@ (8000b1c <I2C2_WriteBuf+0x90>)
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	f7ff fedd 	bl	80008cc <LL_I2C_ClearFlag_STOP>
}
 8000b12:	46c0      	nop			@ (mov r8, r8)
 8000b14:	46bd      	mov	sp, r7
 8000b16:	b004      	add	sp, #16
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	46c0      	nop			@ (mov r8, r8)
 8000b1c:	40005800 	.word	0x40005800
 8000b20:	80002000 	.word	0x80002000

08000b24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	0002      	movs	r2, r0
 8000b2c:	1dfb      	adds	r3, r7, #7
 8000b2e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b30:	1dfb      	adds	r3, r7, #7
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	2b7f      	cmp	r3, #127	@ 0x7f
 8000b36:	d809      	bhi.n	8000b4c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b38:	1dfb      	adds	r3, r7, #7
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	001a      	movs	r2, r3
 8000b3e:	231f      	movs	r3, #31
 8000b40:	401a      	ands	r2, r3
 8000b42:	4b04      	ldr	r3, [pc, #16]	@ (8000b54 <__NVIC_EnableIRQ+0x30>)
 8000b44:	2101      	movs	r1, #1
 8000b46:	4091      	lsls	r1, r2
 8000b48:	000a      	movs	r2, r1
 8000b4a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000b4c:	46c0      	nop			@ (mov r8, r8)
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	b002      	add	sp, #8
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	e000e100 	.word	0xe000e100

08000b58 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	0002      	movs	r2, r0
 8000b60:	1dfb      	adds	r3, r7, #7
 8000b62:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b64:	1dfb      	adds	r3, r7, #7
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	2b7f      	cmp	r3, #127	@ 0x7f
 8000b6a:	d810      	bhi.n	8000b8e <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b6c:	1dfb      	adds	r3, r7, #7
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	001a      	movs	r2, r3
 8000b72:	231f      	movs	r3, #31
 8000b74:	4013      	ands	r3, r2
 8000b76:	4908      	ldr	r1, [pc, #32]	@ (8000b98 <__NVIC_DisableIRQ+0x40>)
 8000b78:	2201      	movs	r2, #1
 8000b7a:	409a      	lsls	r2, r3
 8000b7c:	0013      	movs	r3, r2
 8000b7e:	2280      	movs	r2, #128	@ 0x80
 8000b80:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000b82:	f3bf 8f4f 	dsb	sy
}
 8000b86:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8000b88:	f3bf 8f6f 	isb	sy
}
 8000b8c:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 8000b8e:	46c0      	nop			@ (mov r8, r8)
 8000b90:	46bd      	mov	sp, r7
 8000b92:	b002      	add	sp, #8
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	46c0      	nop			@ (mov r8, r8)
 8000b98:	e000e100 	.word	0xe000e100

08000b9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b9c:	b590      	push	{r4, r7, lr}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	0002      	movs	r2, r0
 8000ba4:	6039      	str	r1, [r7, #0]
 8000ba6:	1dfb      	adds	r3, r7, #7
 8000ba8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000baa:	1dfb      	adds	r3, r7, #7
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	2b7f      	cmp	r3, #127	@ 0x7f
 8000bb0:	d828      	bhi.n	8000c04 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bb2:	4a2f      	ldr	r2, [pc, #188]	@ (8000c70 <__NVIC_SetPriority+0xd4>)
 8000bb4:	1dfb      	adds	r3, r7, #7
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	b25b      	sxtb	r3, r3
 8000bba:	089b      	lsrs	r3, r3, #2
 8000bbc:	33c0      	adds	r3, #192	@ 0xc0
 8000bbe:	009b      	lsls	r3, r3, #2
 8000bc0:	589b      	ldr	r3, [r3, r2]
 8000bc2:	1dfa      	adds	r2, r7, #7
 8000bc4:	7812      	ldrb	r2, [r2, #0]
 8000bc6:	0011      	movs	r1, r2
 8000bc8:	2203      	movs	r2, #3
 8000bca:	400a      	ands	r2, r1
 8000bcc:	00d2      	lsls	r2, r2, #3
 8000bce:	21ff      	movs	r1, #255	@ 0xff
 8000bd0:	4091      	lsls	r1, r2
 8000bd2:	000a      	movs	r2, r1
 8000bd4:	43d2      	mvns	r2, r2
 8000bd6:	401a      	ands	r2, r3
 8000bd8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	019b      	lsls	r3, r3, #6
 8000bde:	22ff      	movs	r2, #255	@ 0xff
 8000be0:	401a      	ands	r2, r3
 8000be2:	1dfb      	adds	r3, r7, #7
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	0018      	movs	r0, r3
 8000be8:	2303      	movs	r3, #3
 8000bea:	4003      	ands	r3, r0
 8000bec:	00db      	lsls	r3, r3, #3
 8000bee:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bf0:	481f      	ldr	r0, [pc, #124]	@ (8000c70 <__NVIC_SetPriority+0xd4>)
 8000bf2:	1dfb      	adds	r3, r7, #7
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	b25b      	sxtb	r3, r3
 8000bf8:	089b      	lsrs	r3, r3, #2
 8000bfa:	430a      	orrs	r2, r1
 8000bfc:	33c0      	adds	r3, #192	@ 0xc0
 8000bfe:	009b      	lsls	r3, r3, #2
 8000c00:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000c02:	e031      	b.n	8000c68 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c04:	4a1b      	ldr	r2, [pc, #108]	@ (8000c74 <__NVIC_SetPriority+0xd8>)
 8000c06:	1dfb      	adds	r3, r7, #7
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	0019      	movs	r1, r3
 8000c0c:	230f      	movs	r3, #15
 8000c0e:	400b      	ands	r3, r1
 8000c10:	3b08      	subs	r3, #8
 8000c12:	089b      	lsrs	r3, r3, #2
 8000c14:	3306      	adds	r3, #6
 8000c16:	009b      	lsls	r3, r3, #2
 8000c18:	18d3      	adds	r3, r2, r3
 8000c1a:	3304      	adds	r3, #4
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	1dfa      	adds	r2, r7, #7
 8000c20:	7812      	ldrb	r2, [r2, #0]
 8000c22:	0011      	movs	r1, r2
 8000c24:	2203      	movs	r2, #3
 8000c26:	400a      	ands	r2, r1
 8000c28:	00d2      	lsls	r2, r2, #3
 8000c2a:	21ff      	movs	r1, #255	@ 0xff
 8000c2c:	4091      	lsls	r1, r2
 8000c2e:	000a      	movs	r2, r1
 8000c30:	43d2      	mvns	r2, r2
 8000c32:	401a      	ands	r2, r3
 8000c34:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	019b      	lsls	r3, r3, #6
 8000c3a:	22ff      	movs	r2, #255	@ 0xff
 8000c3c:	401a      	ands	r2, r3
 8000c3e:	1dfb      	adds	r3, r7, #7
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	0018      	movs	r0, r3
 8000c44:	2303      	movs	r3, #3
 8000c46:	4003      	ands	r3, r0
 8000c48:	00db      	lsls	r3, r3, #3
 8000c4a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c4c:	4809      	ldr	r0, [pc, #36]	@ (8000c74 <__NVIC_SetPriority+0xd8>)
 8000c4e:	1dfb      	adds	r3, r7, #7
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	001c      	movs	r4, r3
 8000c54:	230f      	movs	r3, #15
 8000c56:	4023      	ands	r3, r4
 8000c58:	3b08      	subs	r3, #8
 8000c5a:	089b      	lsrs	r3, r3, #2
 8000c5c:	430a      	orrs	r2, r1
 8000c5e:	3306      	adds	r3, #6
 8000c60:	009b      	lsls	r3, r3, #2
 8000c62:	18c3      	adds	r3, r0, r3
 8000c64:	3304      	adds	r3, #4
 8000c66:	601a      	str	r2, [r3, #0]
}
 8000c68:	46c0      	nop			@ (mov r8, r8)
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	b003      	add	sp, #12
 8000c6e:	bd90      	pop	{r4, r7, pc}
 8000c70:	e000e100 	.word	0xe000e100
 8000c74:	e000ed00 	.word	0xe000ed00

08000c78 <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
 8000c80:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8000c86:	4a0b      	ldr	r2, [pc, #44]	@ (8000cb4 <LL_DMA_EnableChannel+0x3c>)
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	18d3      	adds	r3, r2, r3
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	001a      	movs	r2, r3
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	18d3      	adds	r3, r2, r3
 8000c94:	681a      	ldr	r2, [r3, #0]
 8000c96:	4907      	ldr	r1, [pc, #28]	@ (8000cb4 <LL_DMA_EnableChannel+0x3c>)
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	18cb      	adds	r3, r1, r3
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	0019      	movs	r1, r3
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	18cb      	adds	r3, r1, r3
 8000ca4:	2101      	movs	r1, #1
 8000ca6:	430a      	orrs	r2, r1
 8000ca8:	601a      	str	r2, [r3, #0]
}
 8000caa:	46c0      	nop			@ (mov r8, r8)
 8000cac:	46bd      	mov	sp, r7
 8000cae:	b004      	add	sp, #16
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	46c0      	nop			@ (mov r8, r8)
 8000cb4:	08002f04 	.word	0x08002f04

08000cb8 <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
 8000cc0:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	60fb      	str	r3, [r7, #12]
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8000cc6:	4a0b      	ldr	r2, [pc, #44]	@ (8000cf4 <LL_DMA_DisableChannel+0x3c>)
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	18d3      	adds	r3, r2, r3
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	001a      	movs	r2, r3
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	18d3      	adds	r3, r2, r3
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	4907      	ldr	r1, [pc, #28]	@ (8000cf4 <LL_DMA_DisableChannel+0x3c>)
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	18cb      	adds	r3, r1, r3
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	0019      	movs	r1, r3
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	18cb      	adds	r3, r1, r3
 8000ce4:	2101      	movs	r1, #1
 8000ce6:	438a      	bics	r2, r1
 8000ce8:	601a      	str	r2, [r3, #0]
}
 8000cea:	46c0      	nop			@ (mov r8, r8)
 8000cec:	46bd      	mov	sp, r7
 8000cee:	b004      	add	sp, #16
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	46c0      	nop			@ (mov r8, r8)
 8000cf4:	08002f04 	.word	0x08002f04

08000cf8 <LL_DMA_ConfigTransfer>:
  *         @arg @ref LL_DMA_MDATAALIGN_BYTE or @ref LL_DMA_MDATAALIGN_HALFWORD or @ref LL_DMA_MDATAALIGN_WORD
  *         @arg @ref LL_DMA_PRIORITY_LOW or @ref LL_DMA_PRIORITY_MEDIUM or @ref LL_DMA_PRIORITY_HIGH or @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigTransfer(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Configuration)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b086      	sub	sp, #24
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	60f8      	str	r0, [r7, #12]
 8000d00:	60b9      	str	r1, [r7, #8]
 8000d02:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8000d08:	4a0c      	ldr	r2, [pc, #48]	@ (8000d3c <LL_DMA_ConfigTransfer+0x44>)
 8000d0a:	68bb      	ldr	r3, [r7, #8]
 8000d0c:	18d3      	adds	r3, r2, r3
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	001a      	movs	r2, r3
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	18d3      	adds	r3, r2, r3
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a09      	ldr	r2, [pc, #36]	@ (8000d40 <LL_DMA_ConfigTransfer+0x48>)
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	0019      	movs	r1, r3
 8000d1e:	4a07      	ldr	r2, [pc, #28]	@ (8000d3c <LL_DMA_ConfigTransfer+0x44>)
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	18d3      	adds	r3, r2, r3
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	001a      	movs	r2, r3
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	18d3      	adds	r3, r2, r3
 8000d2c:	687a      	ldr	r2, [r7, #4]
 8000d2e:	430a      	orrs	r2, r1
 8000d30:	601a      	str	r2, [r3, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM | DMA_CCR_CIRC | DMA_CCR_PINC | DMA_CCR_MINC | DMA_CCR_PSIZE | DMA_CCR_MSIZE | DMA_CCR_PL,
             Configuration);
}
 8000d32:	46c0      	nop			@ (mov r8, r8)
 8000d34:	46bd      	mov	sp, r7
 8000d36:	b006      	add	sp, #24
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	46c0      	nop			@ (mov r8, r8)
 8000d3c:	08002f04 	.word	0x08002f04
 8000d40:	ffff800f 	.word	0xffff800f

08000d44 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b086      	sub	sp, #24
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	60f8      	str	r0, [r7, #12]
 8000d4c:	60b9      	str	r1, [r7, #8]
 8000d4e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8000d54:	4a0b      	ldr	r2, [pc, #44]	@ (8000d84 <LL_DMA_SetDataLength+0x40>)
 8000d56:	68bb      	ldr	r3, [r7, #8]
 8000d58:	18d3      	adds	r3, r2, r3
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	001a      	movs	r2, r3
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	18d3      	adds	r3, r2, r3
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	0c1b      	lsrs	r3, r3, #16
 8000d66:	0419      	lsls	r1, r3, #16
 8000d68:	4a06      	ldr	r2, [pc, #24]	@ (8000d84 <LL_DMA_SetDataLength+0x40>)
 8000d6a:	68bb      	ldr	r3, [r7, #8]
 8000d6c:	18d3      	adds	r3, r2, r3
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	001a      	movs	r2, r3
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	18d3      	adds	r3, r2, r3
 8000d76:	687a      	ldr	r2, [r7, #4]
 8000d78:	430a      	orrs	r2, r1
 8000d7a:	605a      	str	r2, [r3, #4]
             DMA_CNDTR_NDT, NbData);
}
 8000d7c:	46c0      	nop			@ (mov r8, r8)
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	b006      	add	sp, #24
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	08002f04 	.word	0x08002f04

08000d88 <LL_DMA_GetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_DMA_GetDataLength(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	60fb      	str	r3, [r7, #12]
  return (READ_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8000d96:	4a07      	ldr	r2, [pc, #28]	@ (8000db4 <LL_DMA_GetDataLength+0x2c>)
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	18d3      	adds	r3, r2, r3
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	001a      	movs	r2, r3
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	18d3      	adds	r3, r2, r3
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	041b      	lsls	r3, r3, #16
 8000da8:	0c1b      	lsrs	r3, r3, #16
                   DMA_CNDTR_NDT));
}
 8000daa:	0018      	movs	r0, r3
 8000dac:	46bd      	mov	sp, r7
 8000dae:	b004      	add	sp, #16
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	46c0      	nop			@ (mov r8, r8)
 8000db4:	08002f04 	.word	0x08002f04

08000db8 <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  MemoryAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryAddress)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b086      	sub	sp, #24
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	60f8      	str	r0, [r7, #12]
 8000dc0:	60b9      	str	r1, [r7, #8]
 8000dc2:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 8000dc8:	4a06      	ldr	r2, [pc, #24]	@ (8000de4 <LL_DMA_SetMemoryAddress+0x2c>)
 8000dca:	68bb      	ldr	r3, [r7, #8]
 8000dcc:	18d3      	adds	r3, r2, r3
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	001a      	movs	r2, r3
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	18d3      	adds	r3, r2, r3
 8000dd6:	687a      	ldr	r2, [r7, #4]
 8000dd8:	60da      	str	r2, [r3, #12]
}
 8000dda:	46c0      	nop			@ (mov r8, r8)
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	b006      	add	sp, #24
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	46c0      	nop			@ (mov r8, r8)
 8000de4:	08002f04 	.word	0x08002f04

08000de8 <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  PeriphAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAddress)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b086      	sub	sp, #24
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	60f8      	str	r0, [r7, #12]
 8000df0:	60b9      	str	r1, [r7, #8]
 8000df2:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, PeriphAddress);
 8000df8:	4a06      	ldr	r2, [pc, #24]	@ (8000e14 <LL_DMA_SetPeriphAddress+0x2c>)
 8000dfa:	68bb      	ldr	r3, [r7, #8]
 8000dfc:	18d3      	adds	r3, r2, r3
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	001a      	movs	r2, r3
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	18d3      	adds	r3, r2, r3
 8000e06:	687a      	ldr	r2, [r7, #4]
 8000e08:	609a      	str	r2, [r3, #8]
}
 8000e0a:	46c0      	nop			@ (mov r8, r8)
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	b006      	add	sp, #24
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	46c0      	nop			@ (mov r8, r8)
 8000e14:	08002f04 	.word	0x08002f04

08000e18 <LL_DMA_SetPeriphRequest>:
  *         @arg @ref LL_DMAMUX_REQ_UCPD2_RX
  *         @arg @ref LL_DMAMUX_REQ_UCPD2_TX
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Request)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b086      	sub	sp, #24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	60f8      	str	r0, [r7, #12]
 8000e20:	60b9      	str	r1, [r7, #8]
 8000e22:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 7U);
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	0a9b      	lsrs	r3, r3, #10
 8000e28:	4a0f      	ldr	r2, [pc, #60]	@ (8000e68 <LL_DMA_SetPeriphRequest+0x50>)
 8000e2a:	405a      	eors	r2, r3
 8000e2c:	0013      	movs	r3, r2
 8000e2e:	00db      	lsls	r3, r3, #3
 8000e30:	1a9b      	subs	r3, r3, r2
 8000e32:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 8000e34:	68ba      	ldr	r2, [r7, #8]
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	18d3      	adds	r3, r2, r3
 8000e3a:	009b      	lsls	r3, r3, #2
 8000e3c:	4a0b      	ldr	r2, [pc, #44]	@ (8000e6c <LL_DMA_SetPeriphRequest+0x54>)
 8000e3e:	4694      	mov	ip, r2
 8000e40:	4463      	add	r3, ip
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	223f      	movs	r2, #63	@ 0x3f
 8000e46:	4393      	bics	r3, r2
 8000e48:	0019      	movs	r1, r3
 8000e4a:	68ba      	ldr	r2, [r7, #8]
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	18d3      	adds	r3, r2, r3
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	4a06      	ldr	r2, [pc, #24]	@ (8000e6c <LL_DMA_SetPeriphRequest+0x54>)
 8000e54:	4694      	mov	ip, r2
 8000e56:	4463      	add	r3, ip
 8000e58:	687a      	ldr	r2, [r7, #4]
 8000e5a:	430a      	orrs	r2, r1
 8000e5c:	601a      	str	r2, [r3, #0]
}
 8000e5e:	46c0      	nop			@ (mov r8, r8)
 8000e60:	46bd      	mov	sp, r7
 8000e62:	b006      	add	sp, #24
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	46c0      	nop			@ (mov r8, r8)
 8000e68:	00100080 	.word	0x00100080
 8000e6c:	40020800 	.word	0x40020800

08000e70 <LL_AHB1_GRP1_EnableClock>:
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8000e78:	4b07      	ldr	r3, [pc, #28]	@ (8000e98 <LL_AHB1_GRP1_EnableClock+0x28>)
 8000e7a:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8000e7c:	4b06      	ldr	r3, [pc, #24]	@ (8000e98 <LL_AHB1_GRP1_EnableClock+0x28>)
 8000e7e:	687a      	ldr	r2, [r7, #4]
 8000e80:	430a      	orrs	r2, r1
 8000e82:	639a      	str	r2, [r3, #56]	@ 0x38
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000e84:	4b04      	ldr	r3, [pc, #16]	@ (8000e98 <LL_AHB1_GRP1_EnableClock+0x28>)
 8000e86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e88:	687a      	ldr	r2, [r7, #4]
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e8e:	68fb      	ldr	r3, [r7, #12]
}
 8000e90:	46c0      	nop			@ (mov r8, r8)
 8000e92:	46bd      	mov	sp, r7
 8000e94:	b004      	add	sp, #16
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	40021000 	.word	0x40021000

08000e9c <LL_APB1_GRP1_EnableClock>:
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR1, Periphs);
 8000ea4:	4b07      	ldr	r3, [pc, #28]	@ (8000ec4 <LL_APB1_GRP1_EnableClock+0x28>)
 8000ea6:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8000ea8:	4b06      	ldr	r3, [pc, #24]	@ (8000ec4 <LL_APB1_GRP1_EnableClock+0x28>)
 8000eaa:	687a      	ldr	r2, [r7, #4]
 8000eac:	430a      	orrs	r2, r1
 8000eae:	63da      	str	r2, [r3, #60]	@ 0x3c
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 8000eb0:	4b04      	ldr	r3, [pc, #16]	@ (8000ec4 <LL_APB1_GRP1_EnableClock+0x28>)
 8000eb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000eb4:	687a      	ldr	r2, [r7, #4]
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000eba:	68fb      	ldr	r3, [r7, #12]
}
 8000ebc:	46c0      	nop			@ (mov r8, r8)
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	b004      	add	sp, #16
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	40021000 	.word	0x40021000

08000ec8 <LL_APB1_GRP1_DisableClock>:
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APBENR1, Periphs);
 8000ed0:	4b05      	ldr	r3, [pc, #20]	@ (8000ee8 <LL_APB1_GRP1_DisableClock+0x20>)
 8000ed2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	43d9      	mvns	r1, r3
 8000ed8:	4b03      	ldr	r3, [pc, #12]	@ (8000ee8 <LL_APB1_GRP1_DisableClock+0x20>)
 8000eda:	400a      	ands	r2, r1
 8000edc:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000ede:	46c0      	nop			@ (mov r8, r8)
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	b002      	add	sp, #8
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	46c0      	nop			@ (mov r8, r8)
 8000ee8:	40021000 	.word	0x40021000

08000eec <LL_APB1_GRP1_ForceReset>:
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBRSTR1, Periphs);
 8000ef4:	4b04      	ldr	r3, [pc, #16]	@ (8000f08 <LL_APB1_GRP1_ForceReset+0x1c>)
 8000ef6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000ef8:	4b03      	ldr	r3, [pc, #12]	@ (8000f08 <LL_APB1_GRP1_ForceReset+0x1c>)
 8000efa:	687a      	ldr	r2, [r7, #4]
 8000efc:	430a      	orrs	r2, r1
 8000efe:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8000f00:	46c0      	nop			@ (mov r8, r8)
 8000f02:	46bd      	mov	sp, r7
 8000f04:	b002      	add	sp, #8
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40021000 	.word	0x40021000

08000f0c <LL_APB1_GRP1_ReleaseReset>:
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APBRSTR1, Periphs);
 8000f14:	4b05      	ldr	r3, [pc, #20]	@ (8000f2c <LL_APB1_GRP1_ReleaseReset+0x20>)
 8000f16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	43d9      	mvns	r1, r3
 8000f1c:	4b03      	ldr	r3, [pc, #12]	@ (8000f2c <LL_APB1_GRP1_ReleaseReset+0x20>)
 8000f1e:	400a      	ands	r2, r1
 8000f20:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8000f22:	46c0      	nop			@ (mov r8, r8)
 8000f24:	46bd      	mov	sp, r7
 8000f26:	b002      	add	sp, #8
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	46c0      	nop			@ (mov r8, r8)
 8000f2c:	40021000 	.word	0x40021000

08000f30 <LL_APB2_GRP1_EnableClock>:
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR2, Periphs);
 8000f38:	4b07      	ldr	r3, [pc, #28]	@ (8000f58 <LL_APB2_GRP1_EnableClock+0x28>)
 8000f3a:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8000f3c:	4b06      	ldr	r3, [pc, #24]	@ (8000f58 <LL_APB2_GRP1_EnableClock+0x28>)
 8000f3e:	687a      	ldr	r2, [r7, #4]
 8000f40:	430a      	orrs	r2, r1
 8000f42:	641a      	str	r2, [r3, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 8000f44:	4b04      	ldr	r3, [pc, #16]	@ (8000f58 <LL_APB2_GRP1_EnableClock+0x28>)
 8000f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f48:	687a      	ldr	r2, [r7, #4]
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f4e:	68fb      	ldr	r3, [r7, #12]
}
 8000f50:	46c0      	nop			@ (mov r8, r8)
 8000f52:	46bd      	mov	sp, r7
 8000f54:	b004      	add	sp, #16
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	40021000 	.word	0x40021000

08000f5c <LL_APB2_GRP1_DisableClock>:
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APBENR2, Periphs);
 8000f64:	4b05      	ldr	r3, [pc, #20]	@ (8000f7c <LL_APB2_GRP1_DisableClock+0x20>)
 8000f66:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	43d9      	mvns	r1, r3
 8000f6c:	4b03      	ldr	r3, [pc, #12]	@ (8000f7c <LL_APB2_GRP1_DisableClock+0x20>)
 8000f6e:	400a      	ands	r2, r1
 8000f70:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000f72:	46c0      	nop			@ (mov r8, r8)
 8000f74:	46bd      	mov	sp, r7
 8000f76:	b002      	add	sp, #8
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	46c0      	nop			@ (mov r8, r8)
 8000f7c:	40021000 	.word	0x40021000

08000f80 <LL_APB2_GRP1_ForceReset>:
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBRSTR2, Periphs);
 8000f88:	4b04      	ldr	r3, [pc, #16]	@ (8000f9c <LL_APB2_GRP1_ForceReset+0x1c>)
 8000f8a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000f8c:	4b03      	ldr	r3, [pc, #12]	@ (8000f9c <LL_APB2_GRP1_ForceReset+0x1c>)
 8000f8e:	687a      	ldr	r2, [r7, #4]
 8000f90:	430a      	orrs	r2, r1
 8000f92:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8000f94:	46c0      	nop			@ (mov r8, r8)
 8000f96:	46bd      	mov	sp, r7
 8000f98:	b002      	add	sp, #8
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40021000 	.word	0x40021000

08000fa0 <LL_APB2_GRP1_ReleaseReset>:
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APBRSTR2, Periphs);
 8000fa8:	4b05      	ldr	r3, [pc, #20]	@ (8000fc0 <LL_APB2_GRP1_ReleaseReset+0x20>)
 8000faa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	43d9      	mvns	r1, r3
 8000fb0:	4b03      	ldr	r3, [pc, #12]	@ (8000fc0 <LL_APB2_GRP1_ReleaseReset+0x20>)
 8000fb2:	400a      	ands	r2, r1
 8000fb4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8000fb6:	46c0      	nop			@ (mov r8, r8)
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	b002      	add	sp, #8
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	46c0      	nop			@ (mov r8, r8)
 8000fc0:	40021000 	.word	0x40021000

08000fc4 <LL_IOP_GRP1_EnableClock>:
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 8000fcc:	4b07      	ldr	r3, [pc, #28]	@ (8000fec <LL_IOP_GRP1_EnableClock+0x28>)
 8000fce:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000fd0:	4b06      	ldr	r3, [pc, #24]	@ (8000fec <LL_IOP_GRP1_EnableClock+0x28>)
 8000fd2:	687a      	ldr	r2, [r7, #4]
 8000fd4:	430a      	orrs	r2, r1
 8000fd6:	635a      	str	r2, [r3, #52]	@ 0x34
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000fd8:	4b04      	ldr	r3, [pc, #16]	@ (8000fec <LL_IOP_GRP1_EnableClock+0x28>)
 8000fda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000fdc:	687a      	ldr	r2, [r7, #4]
 8000fde:	4013      	ands	r3, r2
 8000fe0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
}
 8000fe4:	46c0      	nop			@ (mov r8, r8)
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	b004      	add	sp, #16
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40021000 	.word	0x40021000

08000ff0 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	431a      	orrs	r2, r3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	601a      	str	r2, [r3, #0]
}
 8001004:	46c0      	nop			@ (mov r8, r8)
 8001006:	46bd      	mov	sp, r7
 8001008:	b002      	add	sp, #8
 800100a:	bd80      	pop	{r7, pc}

0800100c <LL_USART_Disable>:
  * @rmtoll CR1          UE            LL_USART_Disable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Disable(USART_TypeDef *USARTx)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2201      	movs	r2, #1
 800101a:	4393      	bics	r3, r2
 800101c:	001a      	movs	r2, r3
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	601a      	str	r2, [r3, #0]
}
 8001022:	46c0      	nop			@ (mov r8, r8)
 8001024:	46bd      	mov	sp, r7
 8001026:	b002      	add	sp, #8
 8001028:	bd80      	pop	{r7, pc}

0800102a <LL_USART_SetTransferDirection>:
  *         @arg @ref LL_USART_DIRECTION_TX
  *         @arg @ref LL_USART_DIRECTION_TX_RX
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTransferDirection(USART_TypeDef *USARTx, uint32_t TransferDirection)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	b086      	sub	sp, #24
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
 8001032:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001034:	f3ef 8310 	mrs	r3, PRIMASK
 8001038:	60bb      	str	r3, [r7, #8]
  return(result);
 800103a:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 800103c:	617b      	str	r3, [r7, #20]
 800103e:	2301      	movs	r3, #1
 8001040:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	f383 8810 	msr	PRIMASK, r3
}
 8001048:	46c0      	nop			@ (mov r8, r8)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	220c      	movs	r2, #12
 8001050:	4393      	bics	r3, r2
 8001052:	001a      	movs	r2, r3
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	431a      	orrs	r2, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	f383 8810 	msr	PRIMASK, r3
}
 8001066:	46c0      	nop			@ (mov r8, r8)
}
 8001068:	46c0      	nop			@ (mov r8, r8)
 800106a:	46bd      	mov	sp, r7
 800106c:	b006      	add	sp, #24
 800106e:	bd80      	pop	{r7, pc}

08001070 <LL_USART_SetParity>:
  *         @arg @ref LL_USART_PARITY_EVEN
  *         @arg @ref LL_USART_PARITY_ODD
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetParity(USART_TypeDef *USARTx, uint32_t Parity)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE, Parity);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a05      	ldr	r2, [pc, #20]	@ (8001094 <LL_USART_SetParity+0x24>)
 8001080:	401a      	ands	r2, r3
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	431a      	orrs	r2, r3
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	601a      	str	r2, [r3, #0]
}
 800108a:	46c0      	nop			@ (mov r8, r8)
 800108c:	46bd      	mov	sp, r7
 800108e:	b002      	add	sp, #8
 8001090:	bd80      	pop	{r7, pc}
 8001092:	46c0      	nop			@ (mov r8, r8)
 8001094:	fffff9ff 	.word	0xfffff9ff

08001098 <LL_USART_SetDataWidth>:
  *         @arg @ref LL_USART_DATAWIDTH_8B
  *         @arg @ref LL_USART_DATAWIDTH_9B
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetDataWidth(USART_TypeDef *USARTx, uint32_t DataWidth)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR1, USART_CR1_M, DataWidth);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a05      	ldr	r2, [pc, #20]	@ (80010bc <LL_USART_SetDataWidth+0x24>)
 80010a8:	401a      	ands	r2, r3
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	431a      	orrs	r2, r3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	601a      	str	r2, [r3, #0]
}
 80010b2:	46c0      	nop			@ (mov r8, r8)
 80010b4:	46bd      	mov	sp, r7
 80010b6:	b002      	add	sp, #8
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	46c0      	nop			@ (mov r8, r8)
 80010bc:	efffefff 	.word	0xefffefff

080010c0 <LL_USART_SetStopBitsLength>:
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	4a05      	ldr	r2, [pc, #20]	@ (80010e4 <LL_USART_SetStopBitsLength+0x24>)
 80010d0:	401a      	ands	r2, r3
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	431a      	orrs	r2, r3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	605a      	str	r2, [r3, #4]
}
 80010da:	46c0      	nop			@ (mov r8, r8)
 80010dc:	46bd      	mov	sp, r7
 80010de:	b002      	add	sp, #8
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	46c0      	nop			@ (mov r8, r8)
 80010e4:	ffffcfff 	.word	0xffffcfff

080010e8 <LL_USART_SetHWFlowCtrl>:
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	4a05      	ldr	r2, [pc, #20]	@ (800110c <LL_USART_SetHWFlowCtrl+0x24>)
 80010f8:	401a      	ands	r2, r3
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	431a      	orrs	r2, r3
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	609a      	str	r2, [r3, #8]
}
 8001102:	46c0      	nop			@ (mov r8, r8)
 8001104:	46bd      	mov	sp, r7
 8001106:	b002      	add	sp, #8
 8001108:	bd80      	pop	{r7, pc}
 800110a:	46c0      	nop			@ (mov r8, r8)
 800110c:	fffffcff 	.word	0xfffffcff

08001110 <LL_USART_SetBaudRate>:
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t PrescalerValue,
                                          uint32_t OverSampling,
                                          uint32_t BaudRate)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b086      	sub	sp, #24
 8001114:	af00      	add	r7, sp, #0
 8001116:	60f8      	str	r0, [r7, #12]
 8001118:	60b9      	str	r1, [r7, #8]
 800111a:	607a      	str	r2, [r7, #4]
 800111c:	603b      	str	r3, [r7, #0]
  uint32_t usartdiv;
  uint32_t brrtemp;

  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2b0b      	cmp	r3, #11
 8001122:	d846      	bhi.n	80011b2 <LL_USART_SetBaudRate+0xa2>
  {
    /* Do not overstep the size of USART_PRESCALER_TAB */
  }
  else if (BaudRate == 0U)
 8001124:	6a3b      	ldr	r3, [r7, #32]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d043      	beq.n	80011b2 <LL_USART_SetBaudRate+0xa2>
  {
    /* Can Not divide per 0 */
  }
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 800112a:	683a      	ldr	r2, [r7, #0]
 800112c:	2380      	movs	r3, #128	@ 0x80
 800112e:	021b      	lsls	r3, r3, #8
 8001130:	429a      	cmp	r2, r3
 8001132:	d126      	bne.n	8001182 <LL_USART_SetBaudRate+0x72>
  {
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	b2db      	uxtb	r3, r3
 8001138:	001a      	movs	r2, r3
 800113a:	4b20      	ldr	r3, [pc, #128]	@ (80011bc <LL_USART_SetBaudRate+0xac>)
 800113c:	0092      	lsls	r2, r2, #2
 800113e:	58d3      	ldr	r3, [r2, r3]
 8001140:	0019      	movs	r1, r3
 8001142:	68b8      	ldr	r0, [r7, #8]
 8001144:	f7fe fff0 	bl	8000128 <__udivsi3>
 8001148:	0003      	movs	r3, r0
 800114a:	005a      	lsls	r2, r3, #1
 800114c:	6a3b      	ldr	r3, [r7, #32]
 800114e:	085b      	lsrs	r3, r3, #1
 8001150:	18d3      	adds	r3, r2, r3
 8001152:	6a39      	ldr	r1, [r7, #32]
 8001154:	0018      	movs	r0, r3
 8001156:	f7fe ffe7 	bl	8000128 <__udivsi3>
 800115a:	0003      	movs	r3, r0
 800115c:	b29b      	uxth	r3, r3
 800115e:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	4a17      	ldr	r2, [pc, #92]	@ (80011c0 <LL_USART_SetBaudRate+0xb0>)
 8001164:	4013      	ands	r3, r2
 8001166:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	085b      	lsrs	r3, r3, #1
 800116c:	b29b      	uxth	r3, r3
 800116e:	001a      	movs	r2, r3
 8001170:	2307      	movs	r3, #7
 8001172:	4013      	ands	r3, r2
 8001174:	693a      	ldr	r2, [r7, #16]
 8001176:	4313      	orrs	r3, r2
 8001178:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	693a      	ldr	r2, [r7, #16]
 800117e:	60da      	str	r2, [r3, #12]
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
  }
}
 8001180:	e017      	b.n	80011b2 <LL_USART_SetBaudRate+0xa2>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	b2db      	uxtb	r3, r3
 8001186:	001a      	movs	r2, r3
 8001188:	4b0c      	ldr	r3, [pc, #48]	@ (80011bc <LL_USART_SetBaudRate+0xac>)
 800118a:	0092      	lsls	r2, r2, #2
 800118c:	58d3      	ldr	r3, [r2, r3]
 800118e:	0019      	movs	r1, r3
 8001190:	68b8      	ldr	r0, [r7, #8]
 8001192:	f7fe ffc9 	bl	8000128 <__udivsi3>
 8001196:	0003      	movs	r3, r0
 8001198:	001a      	movs	r2, r3
 800119a:	6a3b      	ldr	r3, [r7, #32]
 800119c:	085b      	lsrs	r3, r3, #1
 800119e:	18d3      	adds	r3, r2, r3
 80011a0:	6a39      	ldr	r1, [r7, #32]
 80011a2:	0018      	movs	r0, r3
 80011a4:	f7fe ffc0 	bl	8000128 <__udivsi3>
 80011a8:	0003      	movs	r3, r0
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	001a      	movs	r2, r3
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	60da      	str	r2, [r3, #12]
}
 80011b2:	46c0      	nop			@ (mov r8, r8)
 80011b4:	46bd      	mov	sp, r7
 80011b6:	b006      	add	sp, #24
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	46c0      	nop			@ (mov r8, r8)
 80011bc:	08002f0c 	.word	0x08002f0c
 80011c0:	0000fff0 	.word	0x0000fff0

080011c4 <LL_USART_IsActiveFlag_PE>:
  * @rmtoll ISR          PE            LL_USART_IsActiveFlag_PE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_PE(const USART_TypeDef *USARTx)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_PE) == (USART_ISR_PE)) ? 1UL : 0UL);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	69db      	ldr	r3, [r3, #28]
 80011d0:	2201      	movs	r2, #1
 80011d2:	4013      	ands	r3, r2
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d101      	bne.n	80011dc <LL_USART_IsActiveFlag_PE+0x18>
 80011d8:	2301      	movs	r3, #1
 80011da:	e000      	b.n	80011de <LL_USART_IsActiveFlag_PE+0x1a>
 80011dc:	2300      	movs	r3, #0
}
 80011de:	0018      	movs	r0, r3
 80011e0:	46bd      	mov	sp, r7
 80011e2:	b002      	add	sp, #8
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <LL_USART_IsActiveFlag_FE>:
  * @rmtoll ISR          FE            LL_USART_IsActiveFlag_FE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_FE(const USART_TypeDef *USARTx)
{
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b082      	sub	sp, #8
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	69db      	ldr	r3, [r3, #28]
 80011f2:	2202      	movs	r2, #2
 80011f4:	4013      	ands	r3, r2
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	d101      	bne.n	80011fe <LL_USART_IsActiveFlag_FE+0x18>
 80011fa:	2301      	movs	r3, #1
 80011fc:	e000      	b.n	8001200 <LL_USART_IsActiveFlag_FE+0x1a>
 80011fe:	2300      	movs	r3, #0
}
 8001200:	0018      	movs	r0, r3
 8001202:	46bd      	mov	sp, r7
 8001204:	b002      	add	sp, #8
 8001206:	bd80      	pop	{r7, pc}

08001208 <LL_USART_IsActiveFlag_NE>:
  * @rmtoll ISR          NE            LL_USART_IsActiveFlag_NE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_NE(const USART_TypeDef *USARTx)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	69db      	ldr	r3, [r3, #28]
 8001214:	2204      	movs	r2, #4
 8001216:	4013      	ands	r3, r2
 8001218:	2b04      	cmp	r3, #4
 800121a:	d101      	bne.n	8001220 <LL_USART_IsActiveFlag_NE+0x18>
 800121c:	2301      	movs	r3, #1
 800121e:	e000      	b.n	8001222 <LL_USART_IsActiveFlag_NE+0x1a>
 8001220:	2300      	movs	r3, #0
}
 8001222:	0018      	movs	r0, r3
 8001224:	46bd      	mov	sp, r7
 8001226:	b002      	add	sp, #8
 8001228:	bd80      	pop	{r7, pc}

0800122a <LL_USART_IsActiveFlag_ORE>:
  * @rmtoll ISR          ORE           LL_USART_IsActiveFlag_ORE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_ORE(const USART_TypeDef *USARTx)
{
 800122a:	b580      	push	{r7, lr}
 800122c:	b082      	sub	sp, #8
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	69db      	ldr	r3, [r3, #28]
 8001236:	2208      	movs	r2, #8
 8001238:	4013      	ands	r3, r2
 800123a:	2b08      	cmp	r3, #8
 800123c:	d101      	bne.n	8001242 <LL_USART_IsActiveFlag_ORE+0x18>
 800123e:	2301      	movs	r3, #1
 8001240:	e000      	b.n	8001244 <LL_USART_IsActiveFlag_ORE+0x1a>
 8001242:	2300      	movs	r3, #0
}
 8001244:	0018      	movs	r0, r3
 8001246:	46bd      	mov	sp, r7
 8001248:	b002      	add	sp, #8
 800124a:	bd80      	pop	{r7, pc}

0800124c <LL_USART_IsActiveFlag_IDLE>:
  * @rmtoll ISR          IDLE          LL_USART_IsActiveFlag_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(const USART_TypeDef *USARTx)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	69db      	ldr	r3, [r3, #28]
 8001258:	2210      	movs	r2, #16
 800125a:	4013      	ands	r3, r2
 800125c:	2b10      	cmp	r3, #16
 800125e:	d101      	bne.n	8001264 <LL_USART_IsActiveFlag_IDLE+0x18>
 8001260:	2301      	movs	r3, #1
 8001262:	e000      	b.n	8001266 <LL_USART_IsActiveFlag_IDLE+0x1a>
 8001264:	2300      	movs	r3, #0
}
 8001266:	0018      	movs	r0, r3
 8001268:	46bd      	mov	sp, r7
 800126a:	b002      	add	sp, #8
 800126c:	bd80      	pop	{r7, pc}

0800126e <LL_USART_IsActiveFlag_RXNE_RXFNE>:
  * @rmtoll ISR          RXNE_RXFNE    LL_USART_IsActiveFlag_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE_RXFNE(const USART_TypeDef *USARTx)
{
 800126e:	b580      	push	{r7, lr}
 8001270:	b082      	sub	sp, #8
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	69db      	ldr	r3, [r3, #28]
 800127a:	2220      	movs	r2, #32
 800127c:	4013      	ands	r3, r2
 800127e:	2b20      	cmp	r3, #32
 8001280:	d101      	bne.n	8001286 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x18>
 8001282:	2301      	movs	r3, #1
 8001284:	e000      	b.n	8001288 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x1a>
 8001286:	2300      	movs	r3, #0
}
 8001288:	0018      	movs	r0, r3
 800128a:	46bd      	mov	sp, r7
 800128c:	b002      	add	sp, #8
 800128e:	bd80      	pop	{r7, pc}

08001290 <LL_USART_IsActiveFlag_TXE_TXFNF>:
  * @rmtoll ISR          TXE_TXFNF     LL_USART_IsActiveFlag_TXE_TXFNF
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE_TXFNF(const USART_TypeDef *USARTx)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	69db      	ldr	r3, [r3, #28]
 800129c:	2280      	movs	r2, #128	@ 0x80
 800129e:	4013      	ands	r3, r2
 80012a0:	2b80      	cmp	r3, #128	@ 0x80
 80012a2:	d101      	bne.n	80012a8 <LL_USART_IsActiveFlag_TXE_TXFNF+0x18>
 80012a4:	2301      	movs	r3, #1
 80012a6:	e000      	b.n	80012aa <LL_USART_IsActiveFlag_TXE_TXFNF+0x1a>
 80012a8:	2300      	movs	r3, #0
}
 80012aa:	0018      	movs	r0, r3
 80012ac:	46bd      	mov	sp, r7
 80012ae:	b002      	add	sp, #8
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <LL_USART_IsActiveFlag_TEACK>:
  * @rmtoll ISR          TEACK         LL_USART_IsActiveFlag_TEACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(const USART_TypeDef *USARTx)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b082      	sub	sp, #8
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	69da      	ldr	r2, [r3, #28]
 80012be:	2380      	movs	r3, #128	@ 0x80
 80012c0:	039b      	lsls	r3, r3, #14
 80012c2:	401a      	ands	r2, r3
 80012c4:	2380      	movs	r3, #128	@ 0x80
 80012c6:	039b      	lsls	r3, r3, #14
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d101      	bne.n	80012d0 <LL_USART_IsActiveFlag_TEACK+0x1e>
 80012cc:	2301      	movs	r3, #1
 80012ce:	e000      	b.n	80012d2 <LL_USART_IsActiveFlag_TEACK+0x20>
 80012d0:	2300      	movs	r3, #0
}
 80012d2:	0018      	movs	r0, r3
 80012d4:	46bd      	mov	sp, r7
 80012d6:	b002      	add	sp, #8
 80012d8:	bd80      	pop	{r7, pc}

080012da <LL_USART_IsActiveFlag_REACK>:
  * @rmtoll ISR          REACK         LL_USART_IsActiveFlag_REACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(const USART_TypeDef *USARTx)
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	b082      	sub	sp, #8
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	69da      	ldr	r2, [r3, #28]
 80012e6:	2380      	movs	r3, #128	@ 0x80
 80012e8:	03db      	lsls	r3, r3, #15
 80012ea:	401a      	ands	r2, r3
 80012ec:	2380      	movs	r3, #128	@ 0x80
 80012ee:	03db      	lsls	r3, r3, #15
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d101      	bne.n	80012f8 <LL_USART_IsActiveFlag_REACK+0x1e>
 80012f4:	2301      	movs	r3, #1
 80012f6:	e000      	b.n	80012fa <LL_USART_IsActiveFlag_REACK+0x20>
 80012f8:	2300      	movs	r3, #0
}
 80012fa:	0018      	movs	r0, r3
 80012fc:	46bd      	mov	sp, r7
 80012fe:	b002      	add	sp, #8
 8001300:	bd80      	pop	{r7, pc}

08001302 <LL_USART_ClearFlag_PE>:
  * @rmtoll ICR          PECF          LL_USART_ClearFlag_PE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_PE(USART_TypeDef *USARTx)
{
 8001302:	b580      	push	{r7, lr}
 8001304:	b082      	sub	sp, #8
 8001306:	af00      	add	r7, sp, #0
 8001308:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_PECF);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2201      	movs	r2, #1
 800130e:	621a      	str	r2, [r3, #32]
}
 8001310:	46c0      	nop			@ (mov r8, r8)
 8001312:	46bd      	mov	sp, r7
 8001314:	b002      	add	sp, #8
 8001316:	bd80      	pop	{r7, pc}

08001318 <LL_USART_ClearFlag_FE>:
  * @rmtoll ICR          FECF          LL_USART_ClearFlag_FE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_FE(USART_TypeDef *USARTx)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2202      	movs	r2, #2
 8001324:	621a      	str	r2, [r3, #32]
}
 8001326:	46c0      	nop			@ (mov r8, r8)
 8001328:	46bd      	mov	sp, r7
 800132a:	b002      	add	sp, #8
 800132c:	bd80      	pop	{r7, pc}

0800132e <LL_USART_ClearFlag_NE>:
  * @rmtoll ICR          NECF          LL_USART_ClearFlag_NE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_NE(USART_TypeDef *USARTx)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	b082      	sub	sp, #8
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_NECF);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2204      	movs	r2, #4
 800133a:	621a      	str	r2, [r3, #32]
}
 800133c:	46c0      	nop			@ (mov r8, r8)
 800133e:	46bd      	mov	sp, r7
 8001340:	b002      	add	sp, #8
 8001342:	bd80      	pop	{r7, pc}

08001344 <LL_USART_ClearFlag_ORE>:
  * @rmtoll ICR          ORECF         LL_USART_ClearFlag_ORE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2208      	movs	r2, #8
 8001350:	621a      	str	r2, [r3, #32]
}
 8001352:	46c0      	nop			@ (mov r8, r8)
 8001354:	46bd      	mov	sp, r7
 8001356:	b002      	add	sp, #8
 8001358:	bd80      	pop	{r7, pc}

0800135a <LL_USART_ClearFlag_IDLE>:
  * @rmtoll ICR          IDLECF        LL_USART_ClearFlag_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
{
 800135a:	b580      	push	{r7, lr}
 800135c:	b082      	sub	sp, #8
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2210      	movs	r2, #16
 8001366:	621a      	str	r2, [r3, #32]
}
 8001368:	46c0      	nop			@ (mov r8, r8)
 800136a:	46bd      	mov	sp, r7
 800136c:	b002      	add	sp, #8
 800136e:	bd80      	pop	{r7, pc}

08001370 <LL_USART_ClearFlag_TXFE>:
  * @rmtoll ICR          TXFECF        LL_USART_ClearFlag_TXFE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_TXFE(USART_TypeDef *USARTx)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_TXFECF);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2220      	movs	r2, #32
 800137c:	621a      	str	r2, [r3, #32]
}
 800137e:	46c0      	nop			@ (mov r8, r8)
 8001380:	46bd      	mov	sp, r7
 8001382:	b002      	add	sp, #8
 8001384:	bd80      	pop	{r7, pc}

08001386 <LL_USART_EnableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
 8001386:	b580      	push	{r7, lr}
 8001388:	b086      	sub	sp, #24
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800138e:	f3ef 8310 	mrs	r3, PRIMASK
 8001392:	60bb      	str	r3, [r7, #8]
  return(result);
 8001394:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8001396:	617b      	str	r3, [r7, #20]
 8001398:	2301      	movs	r3, #1
 800139a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	f383 8810 	msr	PRIMASK, r3
}
 80013a2:	46c0      	nop			@ (mov r8, r8)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2210      	movs	r2, #16
 80013aa:	431a      	orrs	r2, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	f383 8810 	msr	PRIMASK, r3
}
 80013ba:	46c0      	nop			@ (mov r8, r8)
}
 80013bc:	46c0      	nop			@ (mov r8, r8)
 80013be:	46bd      	mov	sp, r7
 80013c0:	b006      	add	sp, #24
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <LL_USART_EnableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80013cc:	f3ef 8310 	mrs	r3, PRIMASK
 80013d0:	60bb      	str	r3, [r7, #8]
  return(result);
 80013d2:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 80013d4:	617b      	str	r3, [r7, #20]
 80013d6:	2301      	movs	r3, #1
 80013d8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	f383 8810 	msr	PRIMASK, r3
}
 80013e0:	46c0      	nop			@ (mov r8, r8)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	2201      	movs	r2, #1
 80013e8:	431a      	orrs	r2, r3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	609a      	str	r2, [r3, #8]
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	f383 8810 	msr	PRIMASK, r3
}
 80013f8:	46c0      	nop			@ (mov r8, r8)
}
 80013fa:	46c0      	nop			@ (mov r8, r8)
 80013fc:	46bd      	mov	sp, r7
 80013fe:	b006      	add	sp, #24
 8001400:	bd80      	pop	{r7, pc}

08001402 <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 8001402:	b580      	push	{r7, lr}
 8001404:	b086      	sub	sp, #24
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800140a:	f3ef 8310 	mrs	r3, PRIMASK
 800140e:	60bb      	str	r3, [r7, #8]
  return(result);
 8001410:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8001412:	617b      	str	r3, [r7, #20]
 8001414:	2301      	movs	r3, #1
 8001416:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	f383 8810 	msr	PRIMASK, r3
}
 800141e:	46c0      	nop			@ (mov r8, r8)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	2240      	movs	r2, #64	@ 0x40
 8001426:	431a      	orrs	r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	609a      	str	r2, [r3, #8]
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	f383 8810 	msr	PRIMASK, r3
}
 8001436:	46c0      	nop			@ (mov r8, r8)
}
 8001438:	46c0      	nop			@ (mov r8, r8)
 800143a:	46bd      	mov	sp, r7
 800143c:	b006      	add	sp, #24
 800143e:	bd80      	pop	{r7, pc}

08001440 <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800144c:	b2db      	uxtb	r3, r3
}
 800144e:	0018      	movs	r0, r3
 8001450:	46bd      	mov	sp, r7
 8001452:	b002      	add	sp, #8
 8001454:	bd80      	pop	{r7, pc}

08001456 <LL_GPIO_SetPinMode>:
{
 8001456:	b580      	push	{r7, lr}
 8001458:	b084      	sub	sp, #16
 800145a:	af00      	add	r7, sp, #0
 800145c:	60f8      	str	r0, [r7, #12]
 800145e:	60b9      	str	r1, [r7, #8]
 8001460:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	6819      	ldr	r1, [r3, #0]
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	435b      	muls	r3, r3
 800146a:	001a      	movs	r2, r3
 800146c:	0013      	movs	r3, r2
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	189b      	adds	r3, r3, r2
 8001472:	43db      	mvns	r3, r3
 8001474:	400b      	ands	r3, r1
 8001476:	001a      	movs	r2, r3
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	435b      	muls	r3, r3
 800147c:	6879      	ldr	r1, [r7, #4]
 800147e:	434b      	muls	r3, r1
 8001480:	431a      	orrs	r2, r3
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	601a      	str	r2, [r3, #0]
}
 8001486:	46c0      	nop			@ (mov r8, r8)
 8001488:	46bd      	mov	sp, r7
 800148a:	b004      	add	sp, #16
 800148c:	bd80      	pop	{r7, pc}

0800148e <LL_GPIO_SetPinOutputType>:
{
 800148e:	b580      	push	{r7, lr}
 8001490:	b084      	sub	sp, #16
 8001492:	af00      	add	r7, sp, #0
 8001494:	60f8      	str	r0, [r7, #12]
 8001496:	60b9      	str	r1, [r7, #8]
 8001498:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	68ba      	ldr	r2, [r7, #8]
 80014a0:	43d2      	mvns	r2, r2
 80014a2:	401a      	ands	r2, r3
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	6879      	ldr	r1, [r7, #4]
 80014a8:	434b      	muls	r3, r1
 80014aa:	431a      	orrs	r2, r3
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	605a      	str	r2, [r3, #4]
}
 80014b0:	46c0      	nop			@ (mov r8, r8)
 80014b2:	46bd      	mov	sp, r7
 80014b4:	b004      	add	sp, #16
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <LL_GPIO_SetPinSpeed>:
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	60f8      	str	r0, [r7, #12]
 80014c0:	60b9      	str	r1, [r7, #8]
 80014c2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	6899      	ldr	r1, [r3, #8]
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	435b      	muls	r3, r3
 80014cc:	001a      	movs	r2, r3
 80014ce:	0013      	movs	r3, r2
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	189b      	adds	r3, r3, r2
 80014d4:	43db      	mvns	r3, r3
 80014d6:	400b      	ands	r3, r1
 80014d8:	001a      	movs	r2, r3
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	435b      	muls	r3, r3
 80014de:	6879      	ldr	r1, [r7, #4]
 80014e0:	434b      	muls	r3, r1
 80014e2:	431a      	orrs	r2, r3
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	609a      	str	r2, [r3, #8]
}
 80014e8:	46c0      	nop			@ (mov r8, r8)
 80014ea:	46bd      	mov	sp, r7
 80014ec:	b004      	add	sp, #16
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <LL_GPIO_SetPinPull>:
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	60b9      	str	r1, [r7, #8]
 80014fa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	68d9      	ldr	r1, [r3, #12]
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	435b      	muls	r3, r3
 8001504:	001a      	movs	r2, r3
 8001506:	0013      	movs	r3, r2
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	189b      	adds	r3, r3, r2
 800150c:	43db      	mvns	r3, r3
 800150e:	400b      	ands	r3, r1
 8001510:	001a      	movs	r2, r3
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	435b      	muls	r3, r3
 8001516:	6879      	ldr	r1, [r7, #4]
 8001518:	434b      	muls	r3, r1
 800151a:	431a      	orrs	r2, r3
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	60da      	str	r2, [r3, #12]
}
 8001520:	46c0      	nop			@ (mov r8, r8)
 8001522:	46bd      	mov	sp, r7
 8001524:	b004      	add	sp, #16
 8001526:	bd80      	pop	{r7, pc}

08001528 <LL_GPIO_SetAFPin_0_7>:
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	60f8      	str	r0, [r7, #12]
 8001530:	60b9      	str	r1, [r7, #8]
 8001532:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	6a19      	ldr	r1, [r3, #32]
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	435b      	muls	r3, r3
 800153c:	68ba      	ldr	r2, [r7, #8]
 800153e:	4353      	muls	r3, r2
 8001540:	68ba      	ldr	r2, [r7, #8]
 8001542:	435a      	muls	r2, r3
 8001544:	0013      	movs	r3, r2
 8001546:	011b      	lsls	r3, r3, #4
 8001548:	1a9b      	subs	r3, r3, r2
 800154a:	43db      	mvns	r3, r3
 800154c:	400b      	ands	r3, r1
 800154e:	001a      	movs	r2, r3
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	435b      	muls	r3, r3
 8001554:	68b9      	ldr	r1, [r7, #8]
 8001556:	434b      	muls	r3, r1
 8001558:	68b9      	ldr	r1, [r7, #8]
 800155a:	434b      	muls	r3, r1
 800155c:	6879      	ldr	r1, [r7, #4]
 800155e:	434b      	muls	r3, r1
 8001560:	431a      	orrs	r2, r3
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	621a      	str	r2, [r3, #32]
}
 8001566:	46c0      	nop			@ (mov r8, r8)
 8001568:	46bd      	mov	sp, r7
 800156a:	b004      	add	sp, #16
 800156c:	bd80      	pop	{r7, pc}

0800156e <LL_GPIO_SetAFPin_8_15>:
{
 800156e:	b580      	push	{r7, lr}
 8001570:	b084      	sub	sp, #16
 8001572:	af00      	add	r7, sp, #0
 8001574:	60f8      	str	r0, [r7, #12]
 8001576:	60b9      	str	r1, [r7, #8]
 8001578:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	0a1b      	lsrs	r3, r3, #8
 8001582:	68ba      	ldr	r2, [r7, #8]
 8001584:	0a12      	lsrs	r2, r2, #8
 8001586:	4353      	muls	r3, r2
 8001588:	68ba      	ldr	r2, [r7, #8]
 800158a:	0a12      	lsrs	r2, r2, #8
 800158c:	4353      	muls	r3, r2
 800158e:	68ba      	ldr	r2, [r7, #8]
 8001590:	0a12      	lsrs	r2, r2, #8
 8001592:	435a      	muls	r2, r3
 8001594:	0013      	movs	r3, r2
 8001596:	011b      	lsls	r3, r3, #4
 8001598:	1a9b      	subs	r3, r3, r2
 800159a:	43db      	mvns	r3, r3
 800159c:	400b      	ands	r3, r1
 800159e:	001a      	movs	r2, r3
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	0a1b      	lsrs	r3, r3, #8
 80015a4:	68b9      	ldr	r1, [r7, #8]
 80015a6:	0a09      	lsrs	r1, r1, #8
 80015a8:	434b      	muls	r3, r1
 80015aa:	68b9      	ldr	r1, [r7, #8]
 80015ac:	0a09      	lsrs	r1, r1, #8
 80015ae:	434b      	muls	r3, r1
 80015b0:	68b9      	ldr	r1, [r7, #8]
 80015b2:	0a09      	lsrs	r1, r1, #8
 80015b4:	434b      	muls	r3, r1
 80015b6:	6879      	ldr	r1, [r7, #4]
 80015b8:	434b      	muls	r3, r1
 80015ba:	431a      	orrs	r2, r3
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80015c0:	46c0      	nop			@ (mov r8, r8)
 80015c2:	46bd      	mov	sp, r7
 80015c4:	b004      	add	sp, #16
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <LL_GPIO_ResetOutputPin>:
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	683a      	ldr	r2, [r7, #0]
 80015d6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80015d8:	46c0      	nop			@ (mov r8, r8)
 80015da:	46bd      	mov	sp, r7
 80015dc:	b002      	add	sp, #8
 80015de:	bd80      	pop	{r7, pc}

080015e0 <USART1_setup>:
static void USARTx_Init(USART_TypeDef *USARTx,uint32_t baudrate);
static void USARTx_DMA_RX_Init(USART_TypeDef *USARTx,const DMA_TypeDef *DMAx, uint32_t Channel,  uint32_t Request,uint8_t* rx_bufer,uint16_t rx_bufer_size );
static void USARTx_DMA_TX_Init(USART_TypeDef *USARTx,const DMA_TypeDef *DMAx, uint32_t Channel,  uint32_t Request,uint8_t* tx_bufer,uint16_t tx_bufer_size );


void USART1_setup(uint32_t baudrate) {
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af02      	add	r7, sp, #8
 80015e6:	6078      	str	r0, [r7, #4]
	USART1_deinit();
 80015e8:	f000 f86e 	bl	80016c8 <USART1_deinit>

	USART1_GPIO_Init();
 80015ec:	f000 fa96 	bl	8001b1c <USART1_GPIO_Init>
	USART1_CLK_ENABLE();
 80015f0:	2380      	movs	r3, #128	@ 0x80
 80015f2:	01db      	lsls	r3, r3, #7
 80015f4:	0018      	movs	r0, r3
 80015f6:	f7ff fc9b 	bl	8000f30 <LL_APB2_GRP1_EnableClock>
	USARTx_Init(USART1, baudrate);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4a12      	ldr	r2, [pc, #72]	@ (8001648 <USART1_setup+0x68>)
 80015fe:	0019      	movs	r1, r3
 8001600:	0010      	movs	r0, r2
 8001602:	f000 fb29 	bl	8001c58 <USARTx_Init>

#if USART1_ENABLE_RX_DMA
	LL_USART_EnableIT_IDLE(USART1);
 8001606:	4b10      	ldr	r3, [pc, #64]	@ (8001648 <USART1_setup+0x68>)
 8001608:	0018      	movs	r0, r3
 800160a:	f7ff febc 	bl	8001386 <LL_USART_EnableIT_IDLE>
#else
	LL_USART_EnableIT_RXNE_RXFNE(USART1);
#endif
	LL_USART_EnableIT_ERROR(USART1); // Bật ngắt lỗi
 800160e:	4b0e      	ldr	r3, [pc, #56]	@ (8001648 <USART1_setup+0x68>)
 8001610:	0018      	movs	r0, r3
 8001612:	f7ff fed7 	bl	80013c4 <LL_USART_EnableIT_ERROR>
	NVIC_SetPriority(USART1_IRQn, 1);
 8001616:	2101      	movs	r1, #1
 8001618:	201b      	movs	r0, #27
 800161a:	f7ff fabf 	bl	8000b9c <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART1_IRQn);
 800161e:	201b      	movs	r0, #27
 8001620:	f7ff fa80 	bl	8000b24 <__NVIC_EnableIRQ>

#if USART1_ENABLE_RX_DMA
	DMA1_Channelx_DeInit(USART1_RX_DMA_CHANEL);
 8001624:	2000      	movs	r0, #0
 8001626:	f000 fb93 	bl	8001d50 <DMA1_Channelx_DeInit>
	USARTx_DMA_RX_Init(USART1, USART1_RX_DMA, USART1_RX_DMA_CHANEL, USART1_RX_DMA_DMAMUX_REQ, usart1_rxBuffer, USART1_RX_BUFFER_SIZE);
 800162a:	4908      	ldr	r1, [pc, #32]	@ (800164c <USART1_setup+0x6c>)
 800162c:	4806      	ldr	r0, [pc, #24]	@ (8001648 <USART1_setup+0x68>)
 800162e:	2380      	movs	r3, #128	@ 0x80
 8001630:	00db      	lsls	r3, r3, #3
 8001632:	9301      	str	r3, [sp, #4]
 8001634:	4b06      	ldr	r3, [pc, #24]	@ (8001650 <USART1_setup+0x70>)
 8001636:	9300      	str	r3, [sp, #0]
 8001638:	2332      	movs	r3, #50	@ 0x32
 800163a:	2200      	movs	r2, #0
 800163c:	f000 fb4c 	bl	8001cd8 <USARTx_DMA_RX_Init>
	NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn, 1);
	NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn);
	USARTx_DMA_TX_Init(USART1, USART1_TX_DMA, USART1_TX_DMA_CHANEL, USART1_TX_DMA_DMAMUX_REQ, usart1_txBuffer, USART1_TX_BUFFER_SIZE);
#endif

}
 8001640:	46c0      	nop			@ (mov r8, r8)
 8001642:	46bd      	mov	sp, r7
 8001644:	b002      	add	sp, #8
 8001646:	bd80      	pop	{r7, pc}
 8001648:	40013800 	.word	0x40013800
 800164c:	40020000 	.word	0x40020000
 8001650:	20000470 	.word	0x20000470

08001654 <USART2_setup>:

void USART2_setup(uint32_t baudrate) {
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af02      	add	r7, sp, #8
 800165a:	6078      	str	r0, [r7, #4]
	USART2_deinit();
 800165c:	f000 f862 	bl	8001724 <USART2_deinit>

	USART2_GPIO_Init();
 8001660:	f000 faaf 	bl	8001bc2 <USART2_GPIO_Init>
	USART2_CLK_ENABLE();
 8001664:	2380      	movs	r3, #128	@ 0x80
 8001666:	029b      	lsls	r3, r3, #10
 8001668:	0018      	movs	r0, r3
 800166a:	f7ff fc17 	bl	8000e9c <LL_APB1_GRP1_EnableClock>
	USARTx_Init(USART2, baudrate);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4a12      	ldr	r2, [pc, #72]	@ (80016bc <USART2_setup+0x68>)
 8001672:	0019      	movs	r1, r3
 8001674:	0010      	movs	r0, r2
 8001676:	f000 faef 	bl	8001c58 <USARTx_Init>
#if USART2_ENABLE_RX_DMA
	LL_USART_EnableIT_IDLE(USART2);
 800167a:	4b10      	ldr	r3, [pc, #64]	@ (80016bc <USART2_setup+0x68>)
 800167c:	0018      	movs	r0, r3
 800167e:	f7ff fe82 	bl	8001386 <LL_USART_EnableIT_IDLE>
#else
	LL_USART_EnableIT_RXNE_RXFNE(USART2);
#endif
	LL_USART_EnableIT_ERROR(USART2);
 8001682:	4b0e      	ldr	r3, [pc, #56]	@ (80016bc <USART2_setup+0x68>)
 8001684:	0018      	movs	r0, r3
 8001686:	f7ff fe9d 	bl	80013c4 <LL_USART_EnableIT_ERROR>
	NVIC_SetPriority(USART2_IRQn, 1);
 800168a:	2101      	movs	r1, #1
 800168c:	201c      	movs	r0, #28
 800168e:	f7ff fa85 	bl	8000b9c <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART2_IRQn);
 8001692:	201c      	movs	r0, #28
 8001694:	f7ff fa46 	bl	8000b24 <__NVIC_EnableIRQ>
#if USART2_ENABLE_RX_DMA
	DMA1_Channelx_DeInit(USART2_RX_DMA_CHANEL);
 8001698:	2001      	movs	r0, #1
 800169a:	f000 fb59 	bl	8001d50 <DMA1_Channelx_DeInit>
	USARTx_DMA_RX_Init(USART2, USART2_RX_DMA, USART2_RX_DMA_CHANEL, USART2_RX_DMA_DMAMUX_REQ, USART2_rxBuffer, USART2_RX_BUFFER_SIZE);
 800169e:	4908      	ldr	r1, [pc, #32]	@ (80016c0 <USART2_setup+0x6c>)
 80016a0:	4806      	ldr	r0, [pc, #24]	@ (80016bc <USART2_setup+0x68>)
 80016a2:	2380      	movs	r3, #128	@ 0x80
 80016a4:	00db      	lsls	r3, r3, #3
 80016a6:	9301      	str	r3, [sp, #4]
 80016a8:	4b06      	ldr	r3, [pc, #24]	@ (80016c4 <USART2_setup+0x70>)
 80016aa:	9300      	str	r3, [sp, #0]
 80016ac:	2334      	movs	r3, #52	@ 0x34
 80016ae:	2201      	movs	r2, #1
 80016b0:	f000 fb12 	bl	8001cd8 <USARTx_DMA_RX_Init>
	DMA1_Channelx_DeInit(USART2_TX_DMA_CHANEL);
	NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn, 1);
	NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn);
	USARTx_DMA_TX_Init(USART2, USART2_TX_DMA, USART2_TX_DMA_CHANEL, USART2_TX_DMA_DMAMUX_REQ, USART2_txBuffer, USART2_TX_BUFFER_SIZE);
#endif
}
 80016b4:	46c0      	nop			@ (mov r8, r8)
 80016b6:	46bd      	mov	sp, r7
 80016b8:	b002      	add	sp, #8
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	40004400 	.word	0x40004400
 80016c0:	40020000 	.word	0x40020000
 80016c4:	20000870 	.word	0x20000870

080016c8 <USART1_deinit>:

void USART1_deinit() {
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
	LL_USART_Disable(USART1);
 80016cc:	4b14      	ldr	r3, [pc, #80]	@ (8001720 <USART1_deinit+0x58>)
 80016ce:	0018      	movs	r0, r3
 80016d0:	f7ff fc9c 	bl	800100c <LL_USART_Disable>
	NVIC_DisableIRQ(USART1_IRQn);
 80016d4:	201b      	movs	r0, #27
 80016d6:	f7ff fa3f 	bl	8000b58 <__NVIC_DisableIRQ>

	LL_APB2_GRP1_ForceReset(LL_APB2_GRP1_PERIPH_USART1);
 80016da:	2380      	movs	r3, #128	@ 0x80
 80016dc:	01db      	lsls	r3, r3, #7
 80016de:	0018      	movs	r0, r3
 80016e0:	f7ff fc4e 	bl	8000f80 <LL_APB2_GRP1_ForceReset>
	LL_APB2_GRP1_ReleaseReset(LL_APB2_GRP1_PERIPH_USART1);
 80016e4:	2380      	movs	r3, #128	@ 0x80
 80016e6:	01db      	lsls	r3, r3, #7
 80016e8:	0018      	movs	r0, r3
 80016ea:	f7ff fc59 	bl	8000fa0 <LL_APB2_GRP1_ReleaseReset>
	LL_APB2_GRP1_DisableClock(LL_APB2_GRP1_PERIPH_USART1);
 80016ee:	2380      	movs	r3, #128	@ 0x80
 80016f0:	01db      	lsls	r3, r3, #7
 80016f2:	0018      	movs	r0, r3
 80016f4:	f7ff fc32 	bl	8000f5c <LL_APB2_GRP1_DisableClock>

	LL_GPIO_ResetOutputPin(USART1_TX_GPIO_Port, USART1_TX_Pin); // TX
 80016f8:	2380      	movs	r3, #128	@ 0x80
 80016fa:	009a      	lsls	r2, r3, #2
 80016fc:	23a0      	movs	r3, #160	@ 0xa0
 80016fe:	05db      	lsls	r3, r3, #23
 8001700:	0011      	movs	r1, r2
 8001702:	0018      	movs	r0, r3
 8001704:	f7ff ff60 	bl	80015c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(USART1_RX_GPIO_Port, USART1_RX_Pin); // RX
 8001708:	2380      	movs	r3, #128	@ 0x80
 800170a:	00da      	lsls	r2, r3, #3
 800170c:	23a0      	movs	r3, #160	@ 0xa0
 800170e:	05db      	lsls	r3, r3, #23
 8001710:	0011      	movs	r1, r2
 8001712:	0018      	movs	r0, r3
 8001714:	f7ff ff58 	bl	80015c8 <LL_GPIO_ResetOutputPin>
}
 8001718:	46c0      	nop			@ (mov r8, r8)
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	46c0      	nop			@ (mov r8, r8)
 8001720:	40013800 	.word	0x40013800

08001724 <USART2_deinit>:
void USART2_deinit() {
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
	LL_USART_Disable(USART2);
 8001728:	4b12      	ldr	r3, [pc, #72]	@ (8001774 <USART2_deinit+0x50>)
 800172a:	0018      	movs	r0, r3
 800172c:	f7ff fc6e 	bl	800100c <LL_USART_Disable>
	NVIC_DisableIRQ(USART2_IRQn);
 8001730:	201c      	movs	r0, #28
 8001732:	f7ff fa11 	bl	8000b58 <__NVIC_DisableIRQ>

	LL_APB1_GRP1_ForceReset(LL_APB1_GRP1_PERIPH_USART2);
 8001736:	2380      	movs	r3, #128	@ 0x80
 8001738:	029b      	lsls	r3, r3, #10
 800173a:	0018      	movs	r0, r3
 800173c:	f7ff fbd6 	bl	8000eec <LL_APB1_GRP1_ForceReset>
	LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_USART2);
 8001740:	2380      	movs	r3, #128	@ 0x80
 8001742:	029b      	lsls	r3, r3, #10
 8001744:	0018      	movs	r0, r3
 8001746:	f7ff fbe1 	bl	8000f0c <LL_APB1_GRP1_ReleaseReset>
	LL_APB1_GRP1_DisableClock(LL_APB1_GRP1_PERIPH_USART2);
 800174a:	2380      	movs	r3, #128	@ 0x80
 800174c:	029b      	lsls	r3, r3, #10
 800174e:	0018      	movs	r0, r3
 8001750:	f7ff fbba 	bl	8000ec8 <LL_APB1_GRP1_DisableClock>

	LL_GPIO_ResetOutputPin(USART2_TX_GPIO_Port, USART2_TX_Pin); // TX
 8001754:	23a0      	movs	r3, #160	@ 0xa0
 8001756:	05db      	lsls	r3, r3, #23
 8001758:	2104      	movs	r1, #4
 800175a:	0018      	movs	r0, r3
 800175c:	f7ff ff34 	bl	80015c8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(USART2_RX_GPIO_Port, USART2_RX_Pin); // RX
 8001760:	23a0      	movs	r3, #160	@ 0xa0
 8001762:	05db      	lsls	r3, r3, #23
 8001764:	2108      	movs	r1, #8
 8001766:	0018      	movs	r0, r3
 8001768:	f7ff ff2e 	bl	80015c8 <LL_GPIO_ResetOutputPin>
}
 800176c:	46c0      	nop			@ (mov r8, r8)
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	46c0      	nop			@ (mov r8, r8)
 8001774:	40004400 	.word	0x40004400

08001778 <USART1_putchar>:


void USART1_putchar(uint8_t c){
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	0002      	movs	r2, r0
 8001780:	1dfb      	adds	r3, r7, #7
 8001782:	701a      	strb	r2, [r3, #0]
	while ((USART1->ISR & USART_ISR_TXE_TXFNF) != USART_ISR_TXE_TXFNF);
 8001784:	46c0      	nop			@ (mov r8, r8)
 8001786:	4b07      	ldr	r3, [pc, #28]	@ (80017a4 <USART1_putchar+0x2c>)
 8001788:	69db      	ldr	r3, [r3, #28]
 800178a:	2280      	movs	r2, #128	@ 0x80
 800178c:	4013      	ands	r3, r2
 800178e:	2b80      	cmp	r3, #128	@ 0x80
 8001790:	d1f9      	bne.n	8001786 <USART1_putchar+0xe>
	USART1->TDR = c;
 8001792:	4b04      	ldr	r3, [pc, #16]	@ (80017a4 <USART1_putchar+0x2c>)
 8001794:	1dfa      	adds	r2, r7, #7
 8001796:	7812      	ldrb	r2, [r2, #0]
 8001798:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800179a:	46c0      	nop			@ (mov r8, r8)
 800179c:	46bd      	mov	sp, r7
 800179e:	b002      	add	sp, #8
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	46c0      	nop			@ (mov r8, r8)
 80017a4:	40013800 	.word	0x40013800

080017a8 <USART2_putchar>:

void USART2_putchar(uint8_t c){
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	0002      	movs	r2, r0
 80017b0:	1dfb      	adds	r3, r7, #7
 80017b2:	701a      	strb	r2, [r3, #0]
	while ((USART2->ISR & USART_ISR_TXE_TXFNF) != USART_ISR_TXE_TXFNF);
 80017b4:	46c0      	nop			@ (mov r8, r8)
 80017b6:	4b07      	ldr	r3, [pc, #28]	@ (80017d4 <USART2_putchar+0x2c>)
 80017b8:	69db      	ldr	r3, [r3, #28]
 80017ba:	2280      	movs	r2, #128	@ 0x80
 80017bc:	4013      	ands	r3, r2
 80017be:	2b80      	cmp	r3, #128	@ 0x80
 80017c0:	d1f9      	bne.n	80017b6 <USART2_putchar+0xe>
	USART2->TDR = c;
 80017c2:	4b04      	ldr	r3, [pc, #16]	@ (80017d4 <USART2_putchar+0x2c>)
 80017c4:	1dfa      	adds	r2, r7, #7
 80017c6:	7812      	ldrb	r2, [r2, #0]
 80017c8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80017ca:	46c0      	nop			@ (mov r8, r8)
 80017cc:	46bd      	mov	sp, r7
 80017ce:	b002      	add	sp, #8
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	46c0      	nop			@ (mov r8, r8)
 80017d4:	40004400 	.word	0x40004400

080017d8 <USART1_TX_transmit>:


void USART1_TX_transmit(uint8_t *str, uint16_t len, uint32_t timeout) {
 80017d8:	b580      	push	{r7, lr}
 80017da:	b086      	sub	sp, #24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	607a      	str	r2, [r7, #4]
 80017e2:	230a      	movs	r3, #10
 80017e4:	18fb      	adds	r3, r7, r3
 80017e6:	1c0a      	adds	r2, r1, #0
 80017e8:	801a      	strh	r2, [r3, #0]
		LL_USART_ClearFlag_TC(USART1);
		LL_DMA_EnableChannel(USART1_TX_DMA, USART1_TX_DMA_CHANEL);
		usart1_transmit_busy = u32MiliCount;
	}
#else
	for(int i =0;i< len;i++){
 80017ea:	2300      	movs	r3, #0
 80017ec:	617b      	str	r3, [r7, #20]
 80017ee:	e00a      	b.n	8001806 <USART1_TX_transmit+0x2e>
		USART1_putchar(*str);
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	0018      	movs	r0, r3
 80017f6:	f7ff ffbf 	bl	8001778 <USART1_putchar>
				str++;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	3301      	adds	r3, #1
 80017fe:	60fb      	str	r3, [r7, #12]
	for(int i =0;i< len;i++){
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	3301      	adds	r3, #1
 8001804:	617b      	str	r3, [r7, #20]
 8001806:	230a      	movs	r3, #10
 8001808:	18fb      	adds	r3, r7, r3
 800180a:	881b      	ldrh	r3, [r3, #0]
 800180c:	697a      	ldr	r2, [r7, #20]
 800180e:	429a      	cmp	r2, r3
 8001810:	dbee      	blt.n	80017f0 <USART1_TX_transmit+0x18>
	}
#endif
}
 8001812:	46c0      	nop			@ (mov r8, r8)
 8001814:	46c0      	nop			@ (mov r8, r8)
 8001816:	46bd      	mov	sp, r7
 8001818:	b006      	add	sp, #24
 800181a:	bd80      	pop	{r7, pc}

0800181c <USART2_TX_transmit>:


void USART2_TX_transmit(uint8_t *str, uint16_t len, uint32_t timeout) {
 800181c:	b580      	push	{r7, lr}
 800181e:	b086      	sub	sp, #24
 8001820:	af00      	add	r7, sp, #0
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	607a      	str	r2, [r7, #4]
 8001826:	230a      	movs	r3, #10
 8001828:	18fb      	adds	r3, r7, r3
 800182a:	1c0a      	adds	r2, r1, #0
 800182c:	801a      	strh	r2, [r3, #0]
		LL_USART_ClearFlag_TC(USART2);
		LL_DMA_EnableChannel(USART2_TX_DMA, USART2_TX_DMA_CHANEL);
		USART2_transmit_busy = 1;
	}
#else
	for(int i =0;i< len;i++){
 800182e:	2300      	movs	r3, #0
 8001830:	617b      	str	r3, [r7, #20]
 8001832:	e00a      	b.n	800184a <USART2_TX_transmit+0x2e>
		USART2_putchar(*str);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	0018      	movs	r0, r3
 800183a:	f7ff ffb5 	bl	80017a8 <USART2_putchar>
				str++;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	3301      	adds	r3, #1
 8001842:	60fb      	str	r3, [r7, #12]
	for(int i =0;i< len;i++){
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	3301      	adds	r3, #1
 8001848:	617b      	str	r3, [r7, #20]
 800184a:	230a      	movs	r3, #10
 800184c:	18fb      	adds	r3, r7, r3
 800184e:	881b      	ldrh	r3, [r3, #0]
 8001850:	697a      	ldr	r2, [r7, #20]
 8001852:	429a      	cmp	r2, r3
 8001854:	dbee      	blt.n	8001834 <USART2_TX_transmit+0x18>
	}
#endif
}
 8001856:	46c0      	nop			@ (mov r8, r8)
 8001858:	46c0      	nop			@ (mov r8, r8)
 800185a:	46bd      	mov	sp, r7
 800185c:	b006      	add	sp, #24
 800185e:	bd80      	pop	{r7, pc}

08001860 <USART1_TX_callback>:
#endif
}



void USART1_TX_callback(void) {
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
		LL_DMA_ClearFlag_TC4(USART1_TX_DMA);
		LL_DMA_DisableChannel(USART1_TX_DMA, USART1_TX_DMA_CHANEL);
		usart1_transmit_busy = 0;
	}
#endif
}
 8001864:	46c0      	nop			@ (mov r8, r8)
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <USART2_TX_callback>:

void USART2_TX_callback(void) {
 800186a:	b580      	push	{r7, lr}
 800186c:	af00      	add	r7, sp, #0
		LL_DMA_ClearFlag_TC5(USART2_TX_DMA);
		LL_DMA_DisableChannel(USART2_TX_DMA, USART2_TX_DMA_CHANEL);
		USART2_transmit_busy = 0;
	}
#endif
}
 800186e:	46c0      	nop			@ (mov r8, r8)
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}

08001874 <LPUART1_TX_callback>:


void LPUART1_TX_callback(void) {
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
		LL_DMA_ClearFlag_TC6(LPUART1_TX_DMA);
		LL_DMA_DisableChannel(LPUART1_TX_DMA, LPUART1_TX_DMA_CHANEL);
		lpuart1_transmit_busy = 0;
	}
#endif
}
 8001878:	46c0      	nop			@ (mov r8, r8)
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
	...

08001880 <USART1_callback>:

void USART1_callback(void) {
 8001880:	b590      	push	{r4, r7, lr}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
	uint8_t cChar = 0;
 8001886:	1dfb      	adds	r3, r7, #7
 8001888:	2200      	movs	r2, #0
 800188a:	701a      	strb	r2, [r3, #0]
	if (LL_USART_IsActiveFlag_IDLE(USART1)) {
 800188c:	4b4b      	ldr	r3, [pc, #300]	@ (80019bc <USART1_callback+0x13c>)
 800188e:	0018      	movs	r0, r3
 8001890:	f7ff fcdc 	bl	800124c <LL_USART_IsActiveFlag_IDLE>
 8001894:	1e03      	subs	r3, r0, #0
 8001896:	d02e      	beq.n	80018f6 <USART1_callback+0x76>

#if USART1_ENABLE_RX_DMA
		/* Disable and Re-enable DMA to reset the buffer */
		LL_DMA_DisableChannel(USART1_RX_DMA, USART1_RX_DMA_CHANEL);
 8001898:	4b49      	ldr	r3, [pc, #292]	@ (80019c0 <USART1_callback+0x140>)
 800189a:	2100      	movs	r1, #0
 800189c:	0018      	movs	r0, r3
 800189e:	f7ff fa0b 	bl	8000cb8 <LL_DMA_DisableChannel>
		uint16_t remainingBytes = LL_DMA_GetDataLength(USART1_RX_DMA, USART1_RX_DMA_CHANEL);
 80018a2:	4b47      	ldr	r3, [pc, #284]	@ (80019c0 <USART1_callback+0x140>)
 80018a4:	2100      	movs	r1, #0
 80018a6:	0018      	movs	r0, r3
 80018a8:	f7ff fa6e 	bl	8000d88 <LL_DMA_GetDataLength>
 80018ac:	0002      	movs	r2, r0
 80018ae:	1d3b      	adds	r3, r7, #4
 80018b0:	801a      	strh	r2, [r3, #0]
		uint16_t receivedLength = USART1_RX_BUFFER_SIZE - remainingBytes;
 80018b2:	1cbb      	adds	r3, r7, #2
 80018b4:	1d3a      	adds	r2, r7, #4
 80018b6:	8812      	ldrh	r2, [r2, #0]
 80018b8:	2180      	movs	r1, #128	@ 0x80
 80018ba:	00c9      	lsls	r1, r1, #3
 80018bc:	1a8a      	subs	r2, r1, r2
 80018be:	801a      	strh	r2, [r3, #0]

		if (receivedLength > 0) {
 80018c0:	1cbb      	adds	r3, r7, #2
 80018c2:	881b      	ldrh	r3, [r3, #0]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d006      	beq.n	80018d6 <USART1_callback+0x56>
			putcomdata(usart1_rxBuffer, receivedLength, source_485);
 80018c8:	1cbb      	adds	r3, r7, #2
 80018ca:	8819      	ldrh	r1, [r3, #0]
 80018cc:	4b3d      	ldr	r3, [pc, #244]	@ (80019c4 <USART1_callback+0x144>)
 80018ce:	2201      	movs	r2, #1
 80018d0:	0018      	movs	r0, r3
 80018d2:	f000 fafd 	bl	8001ed0 <putcomdata>
		}

		/* Process received data */
		/* Restart DMA */
		LL_DMA_SetDataLength(USART1_RX_DMA, USART1_RX_DMA_CHANEL, USART1_RX_BUFFER_SIZE);
 80018d6:	2380      	movs	r3, #128	@ 0x80
 80018d8:	00db      	lsls	r3, r3, #3
 80018da:	4839      	ldr	r0, [pc, #228]	@ (80019c0 <USART1_callback+0x140>)
 80018dc:	001a      	movs	r2, r3
 80018de:	2100      	movs	r1, #0
 80018e0:	f7ff fa30 	bl	8000d44 <LL_DMA_SetDataLength>
		LL_DMA_EnableChannel(USART1_RX_DMA, USART1_RX_DMA_CHANEL);
 80018e4:	4b36      	ldr	r3, [pc, #216]	@ (80019c0 <USART1_callback+0x140>)
 80018e6:	2100      	movs	r1, #0
 80018e8:	0018      	movs	r0, r3
 80018ea:	f7ff f9c5 	bl	8000c78 <LL_DMA_EnableChannel>
#endif
		LL_USART_ClearFlag_IDLE(USART1);  // Clear flag
 80018ee:	4b33      	ldr	r3, [pc, #204]	@ (80019bc <USART1_callback+0x13c>)
 80018f0:	0018      	movs	r0, r3
 80018f2:	f7ff fd32 	bl	800135a <LL_USART_ClearFlag_IDLE>
	}
	if (LL_USART_IsActiveFlag_RXNE_RXFNE(USART1)) {
 80018f6:	4b31      	ldr	r3, [pc, #196]	@ (80019bc <USART1_callback+0x13c>)
 80018f8:	0018      	movs	r0, r3
 80018fa:	f7ff fcb8 	bl	800126e <LL_USART_IsActiveFlag_RXNE_RXFNE>
 80018fe:	1e03      	subs	r3, r0, #0
 8001900:	d009      	beq.n	8001916 <USART1_callback+0x96>
		cChar = USART1->RDR;
 8001902:	4b2e      	ldr	r3, [pc, #184]	@ (80019bc <USART1_callback+0x13c>)
 8001904:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001906:	1dfb      	adds	r3, r7, #7
 8001908:	701a      	strb	r2, [r3, #0]
		USART1->ICR |= USART_RQR_RXFRQ;
 800190a:	4b2c      	ldr	r3, [pc, #176]	@ (80019bc <USART1_callback+0x13c>)
 800190c:	6a1a      	ldr	r2, [r3, #32]
 800190e:	4b2b      	ldr	r3, [pc, #172]	@ (80019bc <USART1_callback+0x13c>)
 8001910:	2108      	movs	r1, #8
 8001912:	430a      	orrs	r2, r1
 8001914:	621a      	str	r2, [r3, #32]

	}
	//(ORE)
	if (LL_USART_IsActiveFlag_ORE(USART1)) {
 8001916:	4b29      	ldr	r3, [pc, #164]	@ (80019bc <USART1_callback+0x13c>)
 8001918:	0018      	movs	r0, r3
 800191a:	f7ff fc86 	bl	800122a <LL_USART_IsActiveFlag_ORE>
 800191e:	1e03      	subs	r3, r0, #0
 8001920:	d00a      	beq.n	8001938 <USART1_callback+0xb8>
		LL_USART_ClearFlag_ORE(USART1);
 8001922:	4b26      	ldr	r3, [pc, #152]	@ (80019bc <USART1_callback+0x13c>)
 8001924:	0018      	movs	r0, r3
 8001926:	f7ff fd0d 	bl	8001344 <LL_USART_ClearFlag_ORE>
		cChar = LL_USART_ReceiveData8(USART1);
 800192a:	1dfc      	adds	r4, r7, #7
 800192c:	4b23      	ldr	r3, [pc, #140]	@ (80019bc <USART1_callback+0x13c>)
 800192e:	0018      	movs	r0, r3
 8001930:	f7ff fd86 	bl	8001440 <LL_USART_ReceiveData8>
 8001934:	0003      	movs	r3, r0
 8001936:	7023      	strb	r3, [r4, #0]
	}

	//Framing (FE)
	if (LL_USART_IsActiveFlag_FE(USART1)) {
 8001938:	4b20      	ldr	r3, [pc, #128]	@ (80019bc <USART1_callback+0x13c>)
 800193a:	0018      	movs	r0, r3
 800193c:	f7ff fc53 	bl	80011e6 <LL_USART_IsActiveFlag_FE>
 8001940:	1e03      	subs	r3, r0, #0
 8001942:	d00a      	beq.n	800195a <USART1_callback+0xda>
		LL_USART_ClearFlag_FE(USART1);
 8001944:	4b1d      	ldr	r3, [pc, #116]	@ (80019bc <USART1_callback+0x13c>)
 8001946:	0018      	movs	r0, r3
 8001948:	f7ff fce6 	bl	8001318 <LL_USART_ClearFlag_FE>
		cChar = LL_USART_ReceiveData8(USART1);
 800194c:	1dfc      	adds	r4, r7, #7
 800194e:	4b1b      	ldr	r3, [pc, #108]	@ (80019bc <USART1_callback+0x13c>)
 8001950:	0018      	movs	r0, r3
 8001952:	f7ff fd75 	bl	8001440 <LL_USART_ReceiveData8>
 8001956:	0003      	movs	r3, r0
 8001958:	7023      	strb	r3, [r4, #0]
	}

	//(NE)
	if (LL_USART_IsActiveFlag_NE(USART1)) {
 800195a:	4b18      	ldr	r3, [pc, #96]	@ (80019bc <USART1_callback+0x13c>)
 800195c:	0018      	movs	r0, r3
 800195e:	f7ff fc53 	bl	8001208 <LL_USART_IsActiveFlag_NE>
 8001962:	1e03      	subs	r3, r0, #0
 8001964:	d00a      	beq.n	800197c <USART1_callback+0xfc>
		LL_USART_ClearFlag_NE(USART1);
 8001966:	4b15      	ldr	r3, [pc, #84]	@ (80019bc <USART1_callback+0x13c>)
 8001968:	0018      	movs	r0, r3
 800196a:	f7ff fce0 	bl	800132e <LL_USART_ClearFlag_NE>
		cChar = LL_USART_ReceiveData8(USART1);
 800196e:	1dfc      	adds	r4, r7, #7
 8001970:	4b12      	ldr	r3, [pc, #72]	@ (80019bc <USART1_callback+0x13c>)
 8001972:	0018      	movs	r0, r3
 8001974:	f7ff fd64 	bl	8001440 <LL_USART_ReceiveData8>
 8001978:	0003      	movs	r3, r0
 800197a:	7023      	strb	r3, [r4, #0]
	}

	//(PE)
	if (LL_USART_IsActiveFlag_PE(USART1)) {
 800197c:	4b0f      	ldr	r3, [pc, #60]	@ (80019bc <USART1_callback+0x13c>)
 800197e:	0018      	movs	r0, r3
 8001980:	f7ff fc20 	bl	80011c4 <LL_USART_IsActiveFlag_PE>
 8001984:	1e03      	subs	r3, r0, #0
 8001986:	d00a      	beq.n	800199e <USART1_callback+0x11e>
		LL_USART_ClearFlag_PE(USART1);
 8001988:	4b0c      	ldr	r3, [pc, #48]	@ (80019bc <USART1_callback+0x13c>)
 800198a:	0018      	movs	r0, r3
 800198c:	f7ff fcb9 	bl	8001302 <LL_USART_ClearFlag_PE>
		cChar = LL_USART_ReceiveData8(USART1);
 8001990:	1dfc      	adds	r4, r7, #7
 8001992:	4b0a      	ldr	r3, [pc, #40]	@ (80019bc <USART1_callback+0x13c>)
 8001994:	0018      	movs	r0, r3
 8001996:	f7ff fd53 	bl	8001440 <LL_USART_ReceiveData8>
 800199a:	0003      	movs	r3, r0
 800199c:	7023      	strb	r3, [r4, #0]
	}

	if (LL_USART_IsActiveFlag_TXE(USART1)) {
 800199e:	4b07      	ldr	r3, [pc, #28]	@ (80019bc <USART1_callback+0x13c>)
 80019a0:	0018      	movs	r0, r3
 80019a2:	f7ff fc75 	bl	8001290 <LL_USART_IsActiveFlag_TXE_TXFNF>
 80019a6:	1e03      	subs	r3, r0, #0
 80019a8:	d003      	beq.n	80019b2 <USART1_callback+0x132>
		LL_USART_ClearFlag_TXFE(USART1);
 80019aa:	4b04      	ldr	r3, [pc, #16]	@ (80019bc <USART1_callback+0x13c>)
 80019ac:	0018      	movs	r0, r3
 80019ae:	f7ff fcdf 	bl	8001370 <LL_USART_ClearFlag_TXFE>
	}
}
 80019b2:	46c0      	nop			@ (mov r8, r8)
 80019b4:	46bd      	mov	sp, r7
 80019b6:	b003      	add	sp, #12
 80019b8:	bd90      	pop	{r4, r7, pc}
 80019ba:	46c0      	nop			@ (mov r8, r8)
 80019bc:	40013800 	.word	0x40013800
 80019c0:	40020000 	.word	0x40020000
 80019c4:	20000470 	.word	0x20000470

080019c8 <USART2_callback>:

char ble_buf[256] ={0};
int ble_idx =0;

void USART2_callback(void) {
 80019c8:	b590      	push	{r4, r7, lr}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
	uint8_t cChar = 0;
 80019ce:	1dfb      	adds	r3, r7, #7
 80019d0:	2200      	movs	r2, #0
 80019d2:	701a      	strb	r2, [r3, #0]
	if (LL_USART_IsActiveFlag_IDLE(USART2)) {
 80019d4:	4b4e      	ldr	r3, [pc, #312]	@ (8001b10 <USART2_callback+0x148>)
 80019d6:	0018      	movs	r0, r3
 80019d8:	f7ff fc38 	bl	800124c <LL_USART_IsActiveFlag_IDLE>
 80019dc:	1e03      	subs	r3, r0, #0
 80019de:	d034      	beq.n	8001a4a <USART2_callback+0x82>

#if USART2_ENABLE_RX_DMA
		/* Disable and Re-enable DMA to reset the buffer */
		LL_DMA_DisableChannel(USART2_RX_DMA, USART2_RX_DMA_CHANEL);
 80019e0:	4b4c      	ldr	r3, [pc, #304]	@ (8001b14 <USART2_callback+0x14c>)
 80019e2:	2101      	movs	r1, #1
 80019e4:	0018      	movs	r0, r3
 80019e6:	f7ff f967 	bl	8000cb8 <LL_DMA_DisableChannel>
		uint16_t remainingBytes = LL_DMA_GetDataLength(USART2_RX_DMA, USART2_RX_DMA_CHANEL);
 80019ea:	4b4a      	ldr	r3, [pc, #296]	@ (8001b14 <USART2_callback+0x14c>)
 80019ec:	2101      	movs	r1, #1
 80019ee:	0018      	movs	r0, r3
 80019f0:	f7ff f9ca 	bl	8000d88 <LL_DMA_GetDataLength>
 80019f4:	0002      	movs	r2, r0
 80019f6:	1d3b      	adds	r3, r7, #4
 80019f8:	801a      	strh	r2, [r3, #0]
		uint16_t receivedLength = USART2_RX_BUFFER_SIZE - remainingBytes;
 80019fa:	1cbb      	adds	r3, r7, #2
 80019fc:	1d3a      	adds	r2, r7, #4
 80019fe:	8812      	ldrh	r2, [r2, #0]
 8001a00:	2180      	movs	r1, #128	@ 0x80
 8001a02:	00c9      	lsls	r1, r1, #3
 8001a04:	1a8a      	subs	r2, r1, r2
 8001a06:	801a      	strh	r2, [r3, #0]

		if (receivedLength > 0) {
 8001a08:	1cbb      	adds	r3, r7, #2
 8001a0a:	881b      	ldrh	r3, [r3, #0]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d006      	beq.n	8001a1e <USART2_callback+0x56>
			putcomdata(USART2_rxBuffer, receivedLength, source_debug);
 8001a10:	1cbb      	adds	r3, r7, #2
 8001a12:	8819      	ldrh	r1, [r3, #0]
 8001a14:	4b40      	ldr	r3, [pc, #256]	@ (8001b18 <USART2_callback+0x150>)
 8001a16:	2203      	movs	r2, #3
 8001a18:	0018      	movs	r0, r3
 8001a1a:	f000 fa59 	bl	8001ed0 <putcomdata>
		}

		LL_DMA_SetMemoryAddress(USART2_RX_DMA, USART2_RX_DMA_CHANEL, (uint32_t) USART2_rxBuffer);
 8001a1e:	4b3e      	ldr	r3, [pc, #248]	@ (8001b18 <USART2_callback+0x150>)
 8001a20:	483c      	ldr	r0, [pc, #240]	@ (8001b14 <USART2_callback+0x14c>)
 8001a22:	001a      	movs	r2, r3
 8001a24:	2101      	movs	r1, #1
 8001a26:	f7ff f9c7 	bl	8000db8 <LL_DMA_SetMemoryAddress>
		LL_DMA_SetDataLength(USART2_RX_DMA, USART2_RX_DMA_CHANEL, USART2_RX_BUFFER_SIZE);
 8001a2a:	2380      	movs	r3, #128	@ 0x80
 8001a2c:	00db      	lsls	r3, r3, #3
 8001a2e:	4839      	ldr	r0, [pc, #228]	@ (8001b14 <USART2_callback+0x14c>)
 8001a30:	001a      	movs	r2, r3
 8001a32:	2101      	movs	r1, #1
 8001a34:	f7ff f986 	bl	8000d44 <LL_DMA_SetDataLength>
		LL_DMA_EnableChannel(USART2_RX_DMA, USART2_RX_DMA_CHANEL);
 8001a38:	4b36      	ldr	r3, [pc, #216]	@ (8001b14 <USART2_callback+0x14c>)
 8001a3a:	2101      	movs	r1, #1
 8001a3c:	0018      	movs	r0, r3
 8001a3e:	f7ff f91b 	bl	8000c78 <LL_DMA_EnableChannel>
#endif
		LL_USART_ClearFlag_IDLE(USART2);  // Clear flag
 8001a42:	4b33      	ldr	r3, [pc, #204]	@ (8001b10 <USART2_callback+0x148>)
 8001a44:	0018      	movs	r0, r3
 8001a46:	f7ff fc88 	bl	800135a <LL_USART_ClearFlag_IDLE>
	}
	if (LL_USART_IsActiveFlag_RXNE_RXFNE(USART2)) {
 8001a4a:	4b31      	ldr	r3, [pc, #196]	@ (8001b10 <USART2_callback+0x148>)
 8001a4c:	0018      	movs	r0, r3
 8001a4e:	f7ff fc0e 	bl	800126e <LL_USART_IsActiveFlag_RXNE_RXFNE>
 8001a52:	1e03      	subs	r3, r0, #0
 8001a54:	d009      	beq.n	8001a6a <USART2_callback+0xa2>
		cChar = USART2->RDR;
 8001a56:	4b2e      	ldr	r3, [pc, #184]	@ (8001b10 <USART2_callback+0x148>)
 8001a58:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001a5a:	1dfb      	adds	r3, r7, #7
 8001a5c:	701a      	strb	r2, [r3, #0]
		USART2->ICR |= USART_RQR_RXFRQ;
 8001a5e:	4b2c      	ldr	r3, [pc, #176]	@ (8001b10 <USART2_callback+0x148>)
 8001a60:	6a1a      	ldr	r2, [r3, #32]
 8001a62:	4b2b      	ldr	r3, [pc, #172]	@ (8001b10 <USART2_callback+0x148>)
 8001a64:	2108      	movs	r1, #8
 8001a66:	430a      	orrs	r2, r1
 8001a68:	621a      	str	r2, [r3, #32]
	}

	//(ORE)
	if (LL_USART_IsActiveFlag_ORE(USART2)) {
 8001a6a:	4b29      	ldr	r3, [pc, #164]	@ (8001b10 <USART2_callback+0x148>)
 8001a6c:	0018      	movs	r0, r3
 8001a6e:	f7ff fbdc 	bl	800122a <LL_USART_IsActiveFlag_ORE>
 8001a72:	1e03      	subs	r3, r0, #0
 8001a74:	d00a      	beq.n	8001a8c <USART2_callback+0xc4>
		LL_USART_ClearFlag_ORE(USART2);
 8001a76:	4b26      	ldr	r3, [pc, #152]	@ (8001b10 <USART2_callback+0x148>)
 8001a78:	0018      	movs	r0, r3
 8001a7a:	f7ff fc63 	bl	8001344 <LL_USART_ClearFlag_ORE>
		cChar = LL_USART_ReceiveData8(USART2);
 8001a7e:	1dfc      	adds	r4, r7, #7
 8001a80:	4b23      	ldr	r3, [pc, #140]	@ (8001b10 <USART2_callback+0x148>)
 8001a82:	0018      	movs	r0, r3
 8001a84:	f7ff fcdc 	bl	8001440 <LL_USART_ReceiveData8>
 8001a88:	0003      	movs	r3, r0
 8001a8a:	7023      	strb	r3, [r4, #0]
	}

	//Framing (FE)
	if (LL_USART_IsActiveFlag_FE(USART2)) {
 8001a8c:	4b20      	ldr	r3, [pc, #128]	@ (8001b10 <USART2_callback+0x148>)
 8001a8e:	0018      	movs	r0, r3
 8001a90:	f7ff fba9 	bl	80011e6 <LL_USART_IsActiveFlag_FE>
 8001a94:	1e03      	subs	r3, r0, #0
 8001a96:	d00a      	beq.n	8001aae <USART2_callback+0xe6>
		LL_USART_ClearFlag_FE(USART2);
 8001a98:	4b1d      	ldr	r3, [pc, #116]	@ (8001b10 <USART2_callback+0x148>)
 8001a9a:	0018      	movs	r0, r3
 8001a9c:	f7ff fc3c 	bl	8001318 <LL_USART_ClearFlag_FE>
		cChar = LL_USART_ReceiveData8(USART2);
 8001aa0:	1dfc      	adds	r4, r7, #7
 8001aa2:	4b1b      	ldr	r3, [pc, #108]	@ (8001b10 <USART2_callback+0x148>)
 8001aa4:	0018      	movs	r0, r3
 8001aa6:	f7ff fccb 	bl	8001440 <LL_USART_ReceiveData8>
 8001aaa:	0003      	movs	r3, r0
 8001aac:	7023      	strb	r3, [r4, #0]
	}

	//(NE)
	if (LL_USART_IsActiveFlag_NE(USART2)) {
 8001aae:	4b18      	ldr	r3, [pc, #96]	@ (8001b10 <USART2_callback+0x148>)
 8001ab0:	0018      	movs	r0, r3
 8001ab2:	f7ff fba9 	bl	8001208 <LL_USART_IsActiveFlag_NE>
 8001ab6:	1e03      	subs	r3, r0, #0
 8001ab8:	d00a      	beq.n	8001ad0 <USART2_callback+0x108>
		LL_USART_ClearFlag_NE(USART2);
 8001aba:	4b15      	ldr	r3, [pc, #84]	@ (8001b10 <USART2_callback+0x148>)
 8001abc:	0018      	movs	r0, r3
 8001abe:	f7ff fc36 	bl	800132e <LL_USART_ClearFlag_NE>
		cChar = LL_USART_ReceiveData8(USART2);
 8001ac2:	1dfc      	adds	r4, r7, #7
 8001ac4:	4b12      	ldr	r3, [pc, #72]	@ (8001b10 <USART2_callback+0x148>)
 8001ac6:	0018      	movs	r0, r3
 8001ac8:	f7ff fcba 	bl	8001440 <LL_USART_ReceiveData8>
 8001acc:	0003      	movs	r3, r0
 8001ace:	7023      	strb	r3, [r4, #0]
	}

	//(PE)
	if (LL_USART_IsActiveFlag_PE(USART2)) {
 8001ad0:	4b0f      	ldr	r3, [pc, #60]	@ (8001b10 <USART2_callback+0x148>)
 8001ad2:	0018      	movs	r0, r3
 8001ad4:	f7ff fb76 	bl	80011c4 <LL_USART_IsActiveFlag_PE>
 8001ad8:	1e03      	subs	r3, r0, #0
 8001ada:	d00a      	beq.n	8001af2 <USART2_callback+0x12a>
		LL_USART_ClearFlag_PE(USART2);
 8001adc:	4b0c      	ldr	r3, [pc, #48]	@ (8001b10 <USART2_callback+0x148>)
 8001ade:	0018      	movs	r0, r3
 8001ae0:	f7ff fc0f 	bl	8001302 <LL_USART_ClearFlag_PE>
		cChar = LL_USART_ReceiveData8(USART2);
 8001ae4:	1dfc      	adds	r4, r7, #7
 8001ae6:	4b0a      	ldr	r3, [pc, #40]	@ (8001b10 <USART2_callback+0x148>)
 8001ae8:	0018      	movs	r0, r3
 8001aea:	f7ff fca9 	bl	8001440 <LL_USART_ReceiveData8>
 8001aee:	0003      	movs	r3, r0
 8001af0:	7023      	strb	r3, [r4, #0]
	}

	if (LL_USART_IsActiveFlag_TXE(USART2)) {
 8001af2:	4b07      	ldr	r3, [pc, #28]	@ (8001b10 <USART2_callback+0x148>)
 8001af4:	0018      	movs	r0, r3
 8001af6:	f7ff fbcb 	bl	8001290 <LL_USART_IsActiveFlag_TXE_TXFNF>
 8001afa:	1e03      	subs	r3, r0, #0
 8001afc:	d003      	beq.n	8001b06 <USART2_callback+0x13e>
		LL_USART_ClearFlag_TXFE(USART2);
 8001afe:	4b04      	ldr	r3, [pc, #16]	@ (8001b10 <USART2_callback+0x148>)
 8001b00:	0018      	movs	r0, r3
 8001b02:	f7ff fc35 	bl	8001370 <LL_USART_ClearFlag_TXFE>

	}
}
 8001b06:	46c0      	nop			@ (mov r8, r8)
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	b003      	add	sp, #12
 8001b0c:	bd90      	pop	{r4, r7, pc}
 8001b0e:	46c0      	nop			@ (mov r8, r8)
 8001b10:	40004400 	.word	0x40004400
 8001b14:	40020000 	.word	0x40020000
 8001b18:	20000870 	.word	0x20000870

08001b1c <USART1_GPIO_Init>:
	LL_GPIO_ResetOutputPin(USART2_TX_GPIO_Port, USART2_TX_Pin); // TX
	LL_GPIO_ResetOutputPin(USART2_RX_GPIO_Port, USART2_RX_Pin); // RX
}


static void USART1_GPIO_Init() {
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
	LL_IOP_GRP1_EnableClock(USART1_TX_GPIO_CLK);
 8001b20:	2001      	movs	r0, #1
 8001b22:	f7ff fa4f 	bl	8000fc4 <LL_IOP_GRP1_EnableClock>
	LL_IOP_GRP1_EnableClock(USART1_RX_GPIO_CLK);
 8001b26:	2001      	movs	r0, #1
 8001b28:	f7ff fa4c 	bl	8000fc4 <LL_IOP_GRP1_EnableClock>
	/*TX*/
	LL_GPIO_SetPinMode(USART1_TX_GPIO_Port, USART1_TX_Pin, LL_GPIO_MODE_ALTERNATE);
 8001b2c:	2380      	movs	r3, #128	@ 0x80
 8001b2e:	0099      	lsls	r1, r3, #2
 8001b30:	23a0      	movs	r3, #160	@ 0xa0
 8001b32:	05db      	lsls	r3, r3, #23
 8001b34:	2202      	movs	r2, #2
 8001b36:	0018      	movs	r0, r3
 8001b38:	f7ff fc8d 	bl	8001456 <LL_GPIO_SetPinMode>
	if (USART1_TX_Pin < LL_GPIO_PIN_8)
		LL_GPIO_SetAFPin_0_7(USART1_TX_GPIO_Port, USART1_TX_Pin, USART1_TX_GPIO_AF);
	else
		LL_GPIO_SetAFPin_8_15(USART1_TX_GPIO_Port, USART1_TX_Pin, USART1_TX_GPIO_AF);
 8001b3c:	2380      	movs	r3, #128	@ 0x80
 8001b3e:	0099      	lsls	r1, r3, #2
 8001b40:	23a0      	movs	r3, #160	@ 0xa0
 8001b42:	05db      	lsls	r3, r3, #23
 8001b44:	2201      	movs	r2, #1
 8001b46:	0018      	movs	r0, r3
 8001b48:	f7ff fd11 	bl	800156e <LL_GPIO_SetAFPin_8_15>
	LL_GPIO_SetPinSpeed(USART1_TX_GPIO_Port, USART1_TX_Pin, LL_GPIO_SPEED_FREQ_HIGH);
 8001b4c:	2380      	movs	r3, #128	@ 0x80
 8001b4e:	0099      	lsls	r1, r3, #2
 8001b50:	23a0      	movs	r3, #160	@ 0xa0
 8001b52:	05db      	lsls	r3, r3, #23
 8001b54:	2202      	movs	r2, #2
 8001b56:	0018      	movs	r0, r3
 8001b58:	f7ff fcae 	bl	80014b8 <LL_GPIO_SetPinSpeed>
	LL_GPIO_SetPinOutputType(USART1_TX_GPIO_Port, USART1_TX_Pin, LL_GPIO_OUTPUT_PUSHPULL);
 8001b5c:	2380      	movs	r3, #128	@ 0x80
 8001b5e:	0099      	lsls	r1, r3, #2
 8001b60:	23a0      	movs	r3, #160	@ 0xa0
 8001b62:	05db      	lsls	r3, r3, #23
 8001b64:	2200      	movs	r2, #0
 8001b66:	0018      	movs	r0, r3
 8001b68:	f7ff fc91 	bl	800148e <LL_GPIO_SetPinOutputType>
	LL_GPIO_SetPinPull(USART1_TX_GPIO_Port, USART1_TX_Pin, LL_GPIO_PULL_UP);
 8001b6c:	2380      	movs	r3, #128	@ 0x80
 8001b6e:	0099      	lsls	r1, r3, #2
 8001b70:	23a0      	movs	r3, #160	@ 0xa0
 8001b72:	05db      	lsls	r3, r3, #23
 8001b74:	2201      	movs	r2, #1
 8001b76:	0018      	movs	r0, r3
 8001b78:	f7ff fcba 	bl	80014f0 <LL_GPIO_SetPinPull>
	/*RX*/
	LL_GPIO_SetPinMode(USART1_RX_GPIO_Port, USART1_RX_Pin, LL_GPIO_MODE_ALTERNATE);
 8001b7c:	2380      	movs	r3, #128	@ 0x80
 8001b7e:	00d9      	lsls	r1, r3, #3
 8001b80:	23a0      	movs	r3, #160	@ 0xa0
 8001b82:	05db      	lsls	r3, r3, #23
 8001b84:	2202      	movs	r2, #2
 8001b86:	0018      	movs	r0, r3
 8001b88:	f7ff fc65 	bl	8001456 <LL_GPIO_SetPinMode>
	if (USART1_RX_Pin < LL_GPIO_PIN_8)
		LL_GPIO_SetAFPin_0_7(USART1_RX_GPIO_Port, USART1_RX_Pin, USART1_RX_GPIO_AF);
	else
		LL_GPIO_SetAFPin_8_15(USART1_RX_GPIO_Port, USART1_RX_Pin, USART1_RX_GPIO_AF);
 8001b8c:	2380      	movs	r3, #128	@ 0x80
 8001b8e:	00d9      	lsls	r1, r3, #3
 8001b90:	23a0      	movs	r3, #160	@ 0xa0
 8001b92:	05db      	lsls	r3, r3, #23
 8001b94:	2201      	movs	r2, #1
 8001b96:	0018      	movs	r0, r3
 8001b98:	f7ff fce9 	bl	800156e <LL_GPIO_SetAFPin_8_15>
	LL_GPIO_SetPinSpeed(USART1_RX_GPIO_Port, USART1_RX_Pin, LL_GPIO_SPEED_FREQ_HIGH);
 8001b9c:	2380      	movs	r3, #128	@ 0x80
 8001b9e:	00d9      	lsls	r1, r3, #3
 8001ba0:	23a0      	movs	r3, #160	@ 0xa0
 8001ba2:	05db      	lsls	r3, r3, #23
 8001ba4:	2202      	movs	r2, #2
 8001ba6:	0018      	movs	r0, r3
 8001ba8:	f7ff fc86 	bl	80014b8 <LL_GPIO_SetPinSpeed>
	LL_GPIO_SetPinPull(USART1_RX_GPIO_Port, USART1_RX_Pin, LL_GPIO_PULL_UP);
 8001bac:	2380      	movs	r3, #128	@ 0x80
 8001bae:	00d9      	lsls	r1, r3, #3
 8001bb0:	23a0      	movs	r3, #160	@ 0xa0
 8001bb2:	05db      	lsls	r3, r3, #23
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	0018      	movs	r0, r3
 8001bb8:	f7ff fc9a 	bl	80014f0 <LL_GPIO_SetPinPull>

}
 8001bbc:	46c0      	nop			@ (mov r8, r8)
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <USART2_GPIO_Init>:



static void USART2_GPIO_Init() {
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	af00      	add	r7, sp, #0
	LL_IOP_GRP1_EnableClock(USART2_TX_GPIO_CLK);
 8001bc6:	2001      	movs	r0, #1
 8001bc8:	f7ff f9fc 	bl	8000fc4 <LL_IOP_GRP1_EnableClock>
	LL_IOP_GRP1_EnableClock(USART2_RX_GPIO_CLK);
 8001bcc:	2001      	movs	r0, #1
 8001bce:	f7ff f9f9 	bl	8000fc4 <LL_IOP_GRP1_EnableClock>
	/*TX*/
	LL_GPIO_SetPinMode(USART2_TX_GPIO_Port, USART2_TX_Pin, LL_GPIO_MODE_ALTERNATE);
 8001bd2:	23a0      	movs	r3, #160	@ 0xa0
 8001bd4:	05db      	lsls	r3, r3, #23
 8001bd6:	2202      	movs	r2, #2
 8001bd8:	2104      	movs	r1, #4
 8001bda:	0018      	movs	r0, r3
 8001bdc:	f7ff fc3b 	bl	8001456 <LL_GPIO_SetPinMode>
	if (USART2_TX_Pin < LL_GPIO_PIN_8)
		LL_GPIO_SetAFPin_0_7(USART2_TX_GPIO_Port, USART2_TX_Pin, USART2_TX_GPIO_AF);
 8001be0:	23a0      	movs	r3, #160	@ 0xa0
 8001be2:	05db      	lsls	r3, r3, #23
 8001be4:	2201      	movs	r2, #1
 8001be6:	2104      	movs	r1, #4
 8001be8:	0018      	movs	r0, r3
 8001bea:	f7ff fc9d 	bl	8001528 <LL_GPIO_SetAFPin_0_7>
	else
		LL_GPIO_SetAFPin_8_15(USART2_TX_GPIO_Port, USART2_TX_Pin, USART2_TX_GPIO_AF);

	LL_GPIO_SetPinSpeed(USART2_TX_GPIO_Port, USART2_TX_Pin, LL_GPIO_SPEED_FREQ_LOW);
 8001bee:	23a0      	movs	r3, #160	@ 0xa0
 8001bf0:	05db      	lsls	r3, r3, #23
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	2104      	movs	r1, #4
 8001bf6:	0018      	movs	r0, r3
 8001bf8:	f7ff fc5e 	bl	80014b8 <LL_GPIO_SetPinSpeed>
	LL_GPIO_SetPinOutputType(USART2_TX_GPIO_Port, USART2_TX_Pin, LL_GPIO_OUTPUT_PUSHPULL);
 8001bfc:	23a0      	movs	r3, #160	@ 0xa0
 8001bfe:	05db      	lsls	r3, r3, #23
 8001c00:	2200      	movs	r2, #0
 8001c02:	2104      	movs	r1, #4
 8001c04:	0018      	movs	r0, r3
 8001c06:	f7ff fc42 	bl	800148e <LL_GPIO_SetPinOutputType>
	LL_GPIO_SetPinPull(USART2_TX_GPIO_Port, USART2_TX_Pin, LL_GPIO_PULL_UP);
 8001c0a:	23a0      	movs	r3, #160	@ 0xa0
 8001c0c:	05db      	lsls	r3, r3, #23
 8001c0e:	2201      	movs	r2, #1
 8001c10:	2104      	movs	r1, #4
 8001c12:	0018      	movs	r0, r3
 8001c14:	f7ff fc6c 	bl	80014f0 <LL_GPIO_SetPinPull>
	/*RX*/
	LL_GPIO_SetPinMode(USART2_RX_GPIO_Port, USART2_RX_Pin, LL_GPIO_MODE_ALTERNATE);
 8001c18:	23a0      	movs	r3, #160	@ 0xa0
 8001c1a:	05db      	lsls	r3, r3, #23
 8001c1c:	2202      	movs	r2, #2
 8001c1e:	2108      	movs	r1, #8
 8001c20:	0018      	movs	r0, r3
 8001c22:	f7ff fc18 	bl	8001456 <LL_GPIO_SetPinMode>
	if (USART2_RX_Pin < LL_GPIO_PIN_8)
		LL_GPIO_SetAFPin_0_7(USART2_RX_GPIO_Port, USART2_RX_Pin, USART2_RX_GPIO_AF);
 8001c26:	23a0      	movs	r3, #160	@ 0xa0
 8001c28:	05db      	lsls	r3, r3, #23
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	2108      	movs	r1, #8
 8001c2e:	0018      	movs	r0, r3
 8001c30:	f7ff fc7a 	bl	8001528 <LL_GPIO_SetAFPin_0_7>
	else
		LL_GPIO_SetAFPin_8_15(USART2_RX_GPIO_Port, USART2_RX_Pin, USART2_RX_GPIO_AF);

	LL_GPIO_SetPinSpeed(USART2_RX_GPIO_Port, USART2_RX_Pin, LL_GPIO_SPEED_FREQ_LOW);
 8001c34:	23a0      	movs	r3, #160	@ 0xa0
 8001c36:	05db      	lsls	r3, r3, #23
 8001c38:	2200      	movs	r2, #0
 8001c3a:	2108      	movs	r1, #8
 8001c3c:	0018      	movs	r0, r3
 8001c3e:	f7ff fc3b 	bl	80014b8 <LL_GPIO_SetPinSpeed>
	LL_GPIO_SetPinPull(USART2_RX_GPIO_Port, USART2_RX_Pin, LL_GPIO_PULL_UP);
 8001c42:	23a0      	movs	r3, #160	@ 0xa0
 8001c44:	05db      	lsls	r3, r3, #23
 8001c46:	2201      	movs	r2, #1
 8001c48:	2108      	movs	r1, #8
 8001c4a:	0018      	movs	r0, r3
 8001c4c:	f7ff fc50 	bl	80014f0 <LL_GPIO_SetPinPull>
}
 8001c50:	46c0      	nop			@ (mov r8, r8)
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
	...

08001c58 <USARTx_Init>:


static void USARTx_Init(USART_TypeDef *USARTx,uint32_t baudrate) {
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af02      	add	r7, sp, #8
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	6039      	str	r1, [r7, #0]
    LL_USART_SetBaudRate(USARTx, SystemCoreClock, LL_USART_PRESCALER_DIV1, LL_USART_OVERSAMPLING_16, baudrate);
 8001c62:	4b1c      	ldr	r3, [pc, #112]	@ (8001cd4 <USARTx_Init+0x7c>)
 8001c64:	6819      	ldr	r1, [r3, #0]
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	9300      	str	r3, [sp, #0]
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f7ff fa4e 	bl	8001110 <LL_USART_SetBaudRate>
    LL_USART_SetDataWidth(USARTx, LL_USART_DATAWIDTH_8B);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2100      	movs	r1, #0
 8001c78:	0018      	movs	r0, r3
 8001c7a:	f7ff fa0d 	bl	8001098 <LL_USART_SetDataWidth>
    LL_USART_SetStopBitsLength(USARTx, LL_USART_STOPBITS_1);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2100      	movs	r1, #0
 8001c82:	0018      	movs	r0, r3
 8001c84:	f7ff fa1c 	bl	80010c0 <LL_USART_SetStopBitsLength>
    LL_USART_SetParity(USARTx, LL_USART_PARITY_NONE);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	0018      	movs	r0, r3
 8001c8e:	f7ff f9ef 	bl	8001070 <LL_USART_SetParity>
    LL_USART_SetTransferDirection(USARTx, LL_USART_DIRECTION_TX_RX);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	210c      	movs	r1, #12
 8001c96:	0018      	movs	r0, r3
 8001c98:	f7ff f9c7 	bl	800102a <LL_USART_SetTransferDirection>
    LL_USART_SetHWFlowCtrl(USARTx, LL_USART_HWCONTROL_NONE);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	0018      	movs	r0, r3
 8001ca2:	f7ff fa21 	bl	80010e8 <LL_USART_SetHWFlowCtrl>

	//LL_LPUART_DisableFIFO(USARTx);
    /* Enable USART */
    LL_USART_Enable(USARTx);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	0018      	movs	r0, r3
 8001caa:	f7ff f9a1 	bl	8000ff0 <LL_USART_Enable>
    while((!(LL_USART_IsActiveFlag_TEACK(USARTx))) || (!(LL_USART_IsActiveFlag_REACK(USARTx))))
 8001cae:	46c0      	nop			@ (mov r8, r8)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	0018      	movs	r0, r3
 8001cb4:	f7ff fafd 	bl	80012b2 <LL_USART_IsActiveFlag_TEACK>
 8001cb8:	1e03      	subs	r3, r0, #0
 8001cba:	d0f9      	beq.n	8001cb0 <USARTx_Init+0x58>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	0018      	movs	r0, r3
 8001cc0:	f7ff fb0b 	bl	80012da <LL_USART_IsActiveFlag_REACK>
 8001cc4:	1e03      	subs	r3, r0, #0
 8001cc6:	d0f3      	beq.n	8001cb0 <USARTx_Init+0x58>
     {
     }

}
 8001cc8:	46c0      	nop			@ (mov r8, r8)
 8001cca:	46c0      	nop			@ (mov r8, r8)
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	b002      	add	sp, #8
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	46c0      	nop			@ (mov r8, r8)
 8001cd4:	20000000 	.word	0x20000000

08001cd8 <USARTx_DMA_RX_Init>:

static void USARTx_DMA_RX_Init(USART_TypeDef *USARTx,const DMA_TypeDef *DMAx, uint32_t Channel,  uint32_t Request,uint8_t* rx_bufer,uint16_t rx_bufer_size ) {
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	60b9      	str	r1, [r7, #8]
 8001ce2:	607a      	str	r2, [r7, #4]
 8001ce4:	603b      	str	r3, [r7, #0]
    LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8001ce6:	2001      	movs	r0, #1
 8001ce8:	f7ff f8c2 	bl	8000e70 <LL_AHB1_GRP1_EnableClock>
#if defined(DMA2)
    LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
#endif

    /* Configure DMA for USART2_RX */
    LL_DMA_ConfigTransfer(DMAx, Channel,
 8001cec:	4a17      	ldr	r2, [pc, #92]	@ (8001d4c <USARTx_DMA_RX_Init+0x74>)
 8001cee:	6879      	ldr	r1, [r7, #4]
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	0018      	movs	r0, r3
 8001cf4:	f7ff f800 	bl	8000cf8 <LL_DMA_ConfigTransfer>
                          LL_DMA_PDATAALIGN_BYTE |
                          LL_DMA_MDATAALIGN_BYTE |
                          LL_DMA_PRIORITY_HIGH);

    /* Set Peripheral Address */
    LL_DMA_SetPeriphAddress(DMAx, Channel, (uint32_t)&USARTx->RDR);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	3324      	adds	r3, #36	@ 0x24
 8001cfc:	001a      	movs	r2, r3
 8001cfe:	6879      	ldr	r1, [r7, #4]
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	0018      	movs	r0, r3
 8001d04:	f7ff f870 	bl	8000de8 <LL_DMA_SetPeriphAddress>
    /* Set Memory Address */
    LL_DMA_SetMemoryAddress(DMAx, Channel, (uint32_t)rx_bufer);
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	6879      	ldr	r1, [r7, #4]
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	0018      	movs	r0, r3
 8001d10:	f7ff f852 	bl	8000db8 <LL_DMA_SetMemoryAddress>
    /* Set Number of Data to Transfer */
    LL_DMA_SetDataLength(DMAx, Channel, rx_bufer_size);
 8001d14:	231c      	movs	r3, #28
 8001d16:	18fb      	adds	r3, r7, r3
 8001d18:	881a      	ldrh	r2, [r3, #0]
 8001d1a:	6879      	ldr	r1, [r7, #4]
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	0018      	movs	r0, r3
 8001d20:	f7ff f810 	bl	8000d44 <LL_DMA_SetDataLength>
    LL_DMA_SetPeriphRequest(DMAx, Channel, Request);
 8001d24:	683a      	ldr	r2, [r7, #0]
 8001d26:	6879      	ldr	r1, [r7, #4]
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	0018      	movs	r0, r3
 8001d2c:	f7ff f874 	bl	8000e18 <LL_DMA_SetPeriphRequest>
	/* Enable USART DMA Reception */
	LL_USART_EnableDMAReq_RX(USARTx);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	0018      	movs	r0, r3
 8001d34:	f7ff fb65 	bl	8001402 <LL_USART_EnableDMAReq_RX>
	/* Enable DMA Channel */
	LL_DMA_EnableChannel(DMAx, Channel);
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	0011      	movs	r1, r2
 8001d3e:	0018      	movs	r0, r3
 8001d40:	f7fe ff9a 	bl	8000c78 <LL_DMA_EnableChannel>

}
 8001d44:	46c0      	nop			@ (mov r8, r8)
 8001d46:	46bd      	mov	sp, r7
 8001d48:	b004      	add	sp, #16
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	000020a0 	.word	0x000020a0

08001d50 <DMA1_Channelx_DeInit>:
	/* Enable DMA Channel */
	LL_DMA_EnableChannel(DMAx, Channel);

}

static void DMA1_Channelx_DeInit(uint32_t Channel) {
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
	LL_DMA_DisableChannel(DMA1, Channel);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	4a04      	ldr	r2, [pc, #16]	@ (8001d6c <DMA1_Channelx_DeInit+0x1c>)
 8001d5c:	0019      	movs	r1, r3
 8001d5e:	0010      	movs	r0, r2
 8001d60:	f7fe ffaa 	bl	8000cb8 <LL_DMA_DisableChannel>
}
 8001d64:	46c0      	nop			@ (mov r8, r8)
 8001d66:	46bd      	mov	sp, r7
 8001d68:	b002      	add	sp, #8
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	40020000 	.word	0x40020000

08001d70 <NMI_Handler>:
extern volatile uint32_t u32MiliCount;
extern volatile uint32_t u32SecCount;

static uint32_t u32tickCount = 0;;
void NMI_Handler(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
}
 8001d74:	46c0      	nop			@ (mov r8, r8)
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	af00      	add	r7, sp, #0

  while (1)
 8001d7e:	46c0      	nop			@ (mov r8, r8)
 8001d80:	e7fd      	b.n	8001d7e <HardFault_Handler+0x4>

08001d82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d82:	b580      	push	{r7, lr}
 8001d84:	af00      	add	r7, sp, #0
}
 8001d86:	46c0      	nop			@ (mov r8, r8)
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
}
 8001d90:	46c0      	nop			@ (mov r8, r8)
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
	...

08001d98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void) {
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
	u32tickCount++;
 8001d9c:	4b0d      	ldr	r3, [pc, #52]	@ (8001dd4 <SysTick_Handler+0x3c>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	1c5a      	adds	r2, r3, #1
 8001da2:	4b0c      	ldr	r3, [pc, #48]	@ (8001dd4 <SysTick_Handler+0x3c>)
 8001da4:	601a      	str	r2, [r3, #0]
	u32MiliCount++;
 8001da6:	4b0c      	ldr	r3, [pc, #48]	@ (8001dd8 <SysTick_Handler+0x40>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	1c5a      	adds	r2, r3, #1
 8001dac:	4b0a      	ldr	r3, [pc, #40]	@ (8001dd8 <SysTick_Handler+0x40>)
 8001dae:	601a      	str	r2, [r3, #0]
	if (u32tickCount >= 1000) {
 8001db0:	4b08      	ldr	r3, [pc, #32]	@ (8001dd4 <SysTick_Handler+0x3c>)
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	23fa      	movs	r3, #250	@ 0xfa
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d307      	bcc.n	8001dcc <SysTick_Handler+0x34>
		u32tickCount = 0;
 8001dbc:	4b05      	ldr	r3, [pc, #20]	@ (8001dd4 <SysTick_Handler+0x3c>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	601a      	str	r2, [r3, #0]
		u32SecCount++;
 8001dc2:	4b06      	ldr	r3, [pc, #24]	@ (8001ddc <SysTick_Handler+0x44>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	1c5a      	adds	r2, r3, #1
 8001dc8:	4b04      	ldr	r3, [pc, #16]	@ (8001ddc <SysTick_Handler+0x44>)
 8001dca:	601a      	str	r2, [r3, #0]
	}
}
 8001dcc:	46c0      	nop			@ (mov r8, r8)
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	46c0      	nop			@ (mov r8, r8)
 8001dd4:	20000c70 	.word	0x20000c70
 8001dd8:	20000c78 	.word	0x20000c78
 8001ddc:	20000c7c 	.word	0x20000c7c

08001de0 <USART1_IRQHandler>:

void USART1_IRQHandler(void) {
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
	USART1_callback();
 8001de4:	f7ff fd4c 	bl	8001880 <USART1_callback>
}
 8001de8:	46c0      	nop			@ (mov r8, r8)
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <USART2_IRQHandler>:

void USART2_IRQHandler(void) {
 8001dee:	b580      	push	{r7, lr}
 8001df0:	af00      	add	r7, sp, #0
	USART2_callback();
 8001df2:	f7ff fde9 	bl	80019c8 <USART2_callback>
}
 8001df6:	46c0      	nop			@ (mov r8, r8)
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <DMA1_Channel1_IRQHandler>:

void LPUART1_IRQHandler(void) {
	LPUART1_callback();
}

void DMA1_Channel1_IRQHandler(void) {
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
}
 8001e00:	46c0      	nop			@ (mov r8, r8)
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <DMA1_Channel2_3_IRQHandler>:
void DMA1_Channel2_3_IRQHandler(void) {
 8001e06:	b580      	push	{r7, lr}
 8001e08:	af00      	add	r7, sp, #0

}
 8001e0a:	46c0      	nop			@ (mov r8, r8)
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <DMA1_Channel4_5_6_7_DMAMUX_DMA2_Channel1_2_3_4_5_IRQHandler>:

void DMA1_Channel4_5_6_7_DMAMUX_DMA2_Channel1_2_3_4_5_IRQHandler(void) {
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
	USART1_TX_callback();
 8001e14:	f7ff fd24 	bl	8001860 <USART1_TX_callback>
	USART2_TX_callback();
 8001e18:	f7ff fd27 	bl	800186a <USART2_TX_callback>
	LPUART1_TX_callback();
 8001e1c:	f7ff fd2a 	bl	8001874 <LPUART1_TX_callback>
}
 8001e20:	46c0      	nop			@ (mov r8, r8)
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
	...

08001e28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b086      	sub	sp, #24
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e30:	4a14      	ldr	r2, [pc, #80]	@ (8001e84 <_sbrk+0x5c>)
 8001e32:	4b15      	ldr	r3, [pc, #84]	@ (8001e88 <_sbrk+0x60>)
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e3c:	4b13      	ldr	r3, [pc, #76]	@ (8001e8c <_sbrk+0x64>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d102      	bne.n	8001e4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e44:	4b11      	ldr	r3, [pc, #68]	@ (8001e8c <_sbrk+0x64>)
 8001e46:	4a12      	ldr	r2, [pc, #72]	@ (8001e90 <_sbrk+0x68>)
 8001e48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e4a:	4b10      	ldr	r3, [pc, #64]	@ (8001e8c <_sbrk+0x64>)
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	18d3      	adds	r3, r2, r3
 8001e52:	693a      	ldr	r2, [r7, #16]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d207      	bcs.n	8001e68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e58:	f000 fc8e 	bl	8002778 <__errno>
 8001e5c:	0003      	movs	r3, r0
 8001e5e:	220c      	movs	r2, #12
 8001e60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e62:	2301      	movs	r3, #1
 8001e64:	425b      	negs	r3, r3
 8001e66:	e009      	b.n	8001e7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e68:	4b08      	ldr	r3, [pc, #32]	@ (8001e8c <_sbrk+0x64>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e6e:	4b07      	ldr	r3, [pc, #28]	@ (8001e8c <_sbrk+0x64>)
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	18d2      	adds	r2, r2, r3
 8001e76:	4b05      	ldr	r3, [pc, #20]	@ (8001e8c <_sbrk+0x64>)
 8001e78:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
}
 8001e7c:	0018      	movs	r0, r3
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	b006      	add	sp, #24
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	20002000 	.word	0x20002000
 8001e88:	00000400 	.word	0x00000400
 8001e8c:	20000c74 	.word	0x20000c74
 8001e90:	20000dd8 	.word	0x20000dd8

08001e94 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e98:	46c0      	nop			@ (mov r8, r8)
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <LL_GPIO_SetOutputPin>:
{
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b082      	sub	sp, #8
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
 8001ea6:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	683a      	ldr	r2, [r7, #0]
 8001eac:	619a      	str	r2, [r3, #24]
}
 8001eae:	46c0      	nop			@ (mov r8, r8)
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	b002      	add	sp, #8
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <LL_GPIO_ResetOutputPin>:
{
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b082      	sub	sp, #8
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
 8001ebe:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	683a      	ldr	r2, [r7, #0]
 8001ec4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001ec6:	46c0      	nop			@ (mov r8, r8)
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	b002      	add	sp, #8
 8001ecc:	bd80      	pop	{r7, pc}
	...

08001ed0 <putcomdata>:
#include "config.h"
#include "queue.h"
#include "platform.h"


int putcomdata(uint8_t *data, uint16_t len, uint8_t source) {
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b086      	sub	sp, #24
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	0008      	movs	r0, r1
 8001eda:	0011      	movs	r1, r2
 8001edc:	1cbb      	adds	r3, r7, #2
 8001ede:	1c02      	adds	r2, r0, #0
 8001ee0:	801a      	strh	r2, [r3, #0]
 8001ee2:	1c7b      	adds	r3, r7, #1
 8001ee4:	1c0a      	adds	r2, r1, #0
 8001ee6:	701a      	strb	r2, [r3, #0]
	char *ptr = (char*) malloc(len);
 8001ee8:	1cbb      	adds	r3, r7, #2
 8001eea:	881b      	ldrh	r3, [r3, #0]
 8001eec:	0018      	movs	r0, r3
 8001eee:	f000 fb41 	bl	8002574 <malloc>
 8001ef2:	0003      	movs	r3, r0
 8001ef4:	617b      	str	r3, [r7, #20]
	memcpy(ptr, data, len);
 8001ef6:	1cbb      	adds	r3, r7, #2
 8001ef8:	881a      	ldrh	r2, [r3, #0]
 8001efa:	6879      	ldr	r1, [r7, #4]
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	0018      	movs	r0, r3
 8001f00:	f000 fc66 	bl	80027d0 <memcpy>
	RS232_DATA *msg = (RS232_DATA*) malloc(sizeof(RS232_DATA));
 8001f04:	2008      	movs	r0, #8
 8001f06:	f000 fb35 	bl	8002574 <malloc>
 8001f0a:	0003      	movs	r3, r0
 8001f0c:	613b      	str	r3, [r7, #16]
	msg->source = source;
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	1c7a      	adds	r2, r7, #1
 8001f12:	7812      	ldrb	r2, [r2, #0]
 8001f14:	701a      	strb	r2, [r3, #0]
	msg->len = len;
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	1cba      	adds	r2, r7, #2
 8001f1a:	8812      	ldrh	r2, [r2, #0]
 8001f1c:	805a      	strh	r2, [r3, #2]
	msg->ptr_data = ptr;
 8001f1e:	697a      	ldr	r2, [r7, #20]
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	605a      	str	r2, [r3, #4]
	int result = queue_put(DP_RxQueue, msg);
 8001f24:	4b0d      	ldr	r3, [pc, #52]	@ (8001f5c <putcomdata+0x8c>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	693a      	ldr	r2, [r7, #16]
 8001f2a:	0011      	movs	r1, r2
 8001f2c:	0018      	movs	r0, r3
 8001f2e:	f000 fa96 	bl	800245e <queue_put>
 8001f32:	0003      	movs	r3, r0
 8001f34:	60fb      	str	r3, [r7, #12]
	if (!result) {
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d109      	bne.n	8001f50 <putcomdata+0x80>
		free(ptr);
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	0018      	movs	r0, r3
 8001f40:	f000 fb22 	bl	8002588 <free>
		free(msg);
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	0018      	movs	r0, r3
 8001f48:	f000 fb1e 	bl	8002588 <free>
		return 0;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	e000      	b.n	8001f52 <putcomdata+0x82>
	}
	return 1;
 8001f50:	2301      	movs	r3, #1
}
 8001f52:	0018      	movs	r0, r3
 8001f54:	46bd      	mov	sp, r7
 8001f56:	b006      	add	sp, #24
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	46c0      	nop			@ (mov r8, r8)
 8001f5c:	20000c84 	.word	0x20000c84

08001f60 <handler_comdata>:

int handler_comdata() {
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
	DataType_T ptr;
	RS232_DATA *comPtr;
	if (queue_get(DP_RxQueue, &ptr)) {
 8001f66:	4b20      	ldr	r3, [pc, #128]	@ (8001fe8 <handler_comdata+0x88>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	003a      	movs	r2, r7
 8001f6c:	0011      	movs	r1, r2
 8001f6e:	0018      	movs	r0, r3
 8001f70:	f000 faa2 	bl	80024b8 <queue_get>
 8001f74:	1e03      	subs	r3, r0, #0
 8001f76:	d031      	beq.n	8001fdc <handler_comdata+0x7c>
		comPtr = (RS232_DATA*) ptr;
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	607b      	str	r3, [r7, #4]
		switch (comPtr->source) {
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d00c      	beq.n	8001f9e <handler_comdata+0x3e>
 8001f84:	2b03      	cmp	r3, #3
 8001f86:	d11f      	bne.n	8001fc8 <handler_comdata+0x68>
		case source_debug:
			COM_DEBUG_trans(comPtr->ptr_data, comPtr->len);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6858      	ldr	r0, [r3, #4]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	885b      	ldrh	r3, [r3, #2]
 8001f90:	0019      	movs	r1, r3
 8001f92:	23fa      	movs	r3, #250	@ 0xfa
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	001a      	movs	r2, r3
 8001f98:	f7ff fc40 	bl	800181c <USART2_TX_transmit>
			break;
 8001f9c:	e015      	b.n	8001fca <handler_comdata+0x6a>
		case source_485:
			RS485_DE();
 8001f9e:	4b13      	ldr	r3, [pc, #76]	@ (8001fec <handler_comdata+0x8c>)
 8001fa0:	2140      	movs	r1, #64	@ 0x40
 8001fa2:	0018      	movs	r0, r3
 8001fa4:	f7ff ff7b 	bl	8001e9e <LL_GPIO_SetOutputPin>
			COM_RS485_trans(comPtr->ptr_data, comPtr->len);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6858      	ldr	r0, [r3, #4]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	885b      	ldrh	r3, [r3, #2]
 8001fb0:	0019      	movs	r1, r3
 8001fb2:	23fa      	movs	r3, #250	@ 0xfa
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	001a      	movs	r2, r3
 8001fb8:	f7ff fc0e 	bl	80017d8 <USART1_TX_transmit>
			RS485_RE();
 8001fbc:	4b0b      	ldr	r3, [pc, #44]	@ (8001fec <handler_comdata+0x8c>)
 8001fbe:	2140      	movs	r1, #64	@ 0x40
 8001fc0:	0018      	movs	r0, r3
 8001fc2:	f7ff ff78 	bl	8001eb6 <LL_GPIO_ResetOutputPin>
			break;
 8001fc6:	e000      	b.n	8001fca <handler_comdata+0x6a>
		default:
			break;
 8001fc8:	46c0      	nop			@ (mov r8, r8)
		}

		free((char*) comPtr->ptr_data);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	0018      	movs	r0, r3
 8001fd0:	f000 fada 	bl	8002588 <free>
		free(comPtr);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	0018      	movs	r0, r3
 8001fd8:	f000 fad6 	bl	8002588 <free>
	}
	return 1;
 8001fdc:	2301      	movs	r3, #1
}
 8001fde:	0018      	movs	r0, r3
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	b002      	add	sp, #8
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	46c0      	nop			@ (mov r8, r8)
 8001fe8:	20000c84 	.word	0x20000c84
 8001fec:	50000800 	.word	0x50000800

08001ff0 <__NVIC_SetPriority>:
{
 8001ff0:	b590      	push	{r4, r7, lr}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	0002      	movs	r2, r0
 8001ff8:	6039      	str	r1, [r7, #0]
 8001ffa:	1dfb      	adds	r3, r7, #7
 8001ffc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001ffe:	1dfb      	adds	r3, r7, #7
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	2b7f      	cmp	r3, #127	@ 0x7f
 8002004:	d828      	bhi.n	8002058 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002006:	4a2f      	ldr	r2, [pc, #188]	@ (80020c4 <__NVIC_SetPriority+0xd4>)
 8002008:	1dfb      	adds	r3, r7, #7
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	b25b      	sxtb	r3, r3
 800200e:	089b      	lsrs	r3, r3, #2
 8002010:	33c0      	adds	r3, #192	@ 0xc0
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	589b      	ldr	r3, [r3, r2]
 8002016:	1dfa      	adds	r2, r7, #7
 8002018:	7812      	ldrb	r2, [r2, #0]
 800201a:	0011      	movs	r1, r2
 800201c:	2203      	movs	r2, #3
 800201e:	400a      	ands	r2, r1
 8002020:	00d2      	lsls	r2, r2, #3
 8002022:	21ff      	movs	r1, #255	@ 0xff
 8002024:	4091      	lsls	r1, r2
 8002026:	000a      	movs	r2, r1
 8002028:	43d2      	mvns	r2, r2
 800202a:	401a      	ands	r2, r3
 800202c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	019b      	lsls	r3, r3, #6
 8002032:	22ff      	movs	r2, #255	@ 0xff
 8002034:	401a      	ands	r2, r3
 8002036:	1dfb      	adds	r3, r7, #7
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	0018      	movs	r0, r3
 800203c:	2303      	movs	r3, #3
 800203e:	4003      	ands	r3, r0
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002044:	481f      	ldr	r0, [pc, #124]	@ (80020c4 <__NVIC_SetPriority+0xd4>)
 8002046:	1dfb      	adds	r3, r7, #7
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	b25b      	sxtb	r3, r3
 800204c:	089b      	lsrs	r3, r3, #2
 800204e:	430a      	orrs	r2, r1
 8002050:	33c0      	adds	r3, #192	@ 0xc0
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	501a      	str	r2, [r3, r0]
}
 8002056:	e031      	b.n	80020bc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002058:	4a1b      	ldr	r2, [pc, #108]	@ (80020c8 <__NVIC_SetPriority+0xd8>)
 800205a:	1dfb      	adds	r3, r7, #7
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	0019      	movs	r1, r3
 8002060:	230f      	movs	r3, #15
 8002062:	400b      	ands	r3, r1
 8002064:	3b08      	subs	r3, #8
 8002066:	089b      	lsrs	r3, r3, #2
 8002068:	3306      	adds	r3, #6
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	18d3      	adds	r3, r2, r3
 800206e:	3304      	adds	r3, #4
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	1dfa      	adds	r2, r7, #7
 8002074:	7812      	ldrb	r2, [r2, #0]
 8002076:	0011      	movs	r1, r2
 8002078:	2203      	movs	r2, #3
 800207a:	400a      	ands	r2, r1
 800207c:	00d2      	lsls	r2, r2, #3
 800207e:	21ff      	movs	r1, #255	@ 0xff
 8002080:	4091      	lsls	r1, r2
 8002082:	000a      	movs	r2, r1
 8002084:	43d2      	mvns	r2, r2
 8002086:	401a      	ands	r2, r3
 8002088:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	019b      	lsls	r3, r3, #6
 800208e:	22ff      	movs	r2, #255	@ 0xff
 8002090:	401a      	ands	r2, r3
 8002092:	1dfb      	adds	r3, r7, #7
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	0018      	movs	r0, r3
 8002098:	2303      	movs	r3, #3
 800209a:	4003      	ands	r3, r0
 800209c:	00db      	lsls	r3, r3, #3
 800209e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80020a0:	4809      	ldr	r0, [pc, #36]	@ (80020c8 <__NVIC_SetPriority+0xd8>)
 80020a2:	1dfb      	adds	r3, r7, #7
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	001c      	movs	r4, r3
 80020a8:	230f      	movs	r3, #15
 80020aa:	4023      	ands	r3, r4
 80020ac:	3b08      	subs	r3, #8
 80020ae:	089b      	lsrs	r3, r3, #2
 80020b0:	430a      	orrs	r2, r1
 80020b2:	3306      	adds	r3, #6
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	18c3      	adds	r3, r0, r3
 80020b8:	3304      	adds	r3, #4
 80020ba:	601a      	str	r2, [r3, #0]
}
 80020bc:	46c0      	nop			@ (mov r8, r8)
 80020be:	46bd      	mov	sp, r7
 80020c0:	b003      	add	sp, #12
 80020c2:	bd90      	pop	{r4, r7, pc}
 80020c4:	e000e100 	.word	0xe000e100
 80020c8:	e000ed00 	.word	0xe000ed00

080020cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	1e5a      	subs	r2, r3, #1
 80020d8:	2380      	movs	r3, #128	@ 0x80
 80020da:	045b      	lsls	r3, r3, #17
 80020dc:	429a      	cmp	r2, r3
 80020de:	d301      	bcc.n	80020e4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020e0:	2301      	movs	r3, #1
 80020e2:	e010      	b.n	8002106 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020e4:	4b0a      	ldr	r3, [pc, #40]	@ (8002110 <SysTick_Config+0x44>)
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	3a01      	subs	r2, #1
 80020ea:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020ec:	2301      	movs	r3, #1
 80020ee:	425b      	negs	r3, r3
 80020f0:	2103      	movs	r1, #3
 80020f2:	0018      	movs	r0, r3
 80020f4:	f7ff ff7c 	bl	8001ff0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020f8:	4b05      	ldr	r3, [pc, #20]	@ (8002110 <SysTick_Config+0x44>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020fe:	4b04      	ldr	r3, [pc, #16]	@ (8002110 <SysTick_Config+0x44>)
 8002100:	2207      	movs	r2, #7
 8002102:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002104:	2300      	movs	r3, #0
}
 8002106:	0018      	movs	r0, r3
 8002108:	46bd      	mov	sp, r7
 800210a:	b002      	add	sp, #8
 800210c:	bd80      	pop	{r7, pc}
 800210e:	46c0      	nop			@ (mov r8, r8)
 8002110:	e000e010 	.word	0xe000e010

08002114 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002118:	4b04      	ldr	r3, [pc, #16]	@ (800212c <LL_RCC_HSI_Enable+0x18>)
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	4b03      	ldr	r3, [pc, #12]	@ (800212c <LL_RCC_HSI_Enable+0x18>)
 800211e:	2180      	movs	r1, #128	@ 0x80
 8002120:	0049      	lsls	r1, r1, #1
 8002122:	430a      	orrs	r2, r1
 8002124:	601a      	str	r2, [r3, #0]
}
 8002126:	46c0      	nop			@ (mov r8, r8)
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	40021000 	.word	0x40021000

08002130 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002134:	4b07      	ldr	r3, [pc, #28]	@ (8002154 <LL_RCC_HSI_IsReady+0x24>)
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	2380      	movs	r3, #128	@ 0x80
 800213a:	00db      	lsls	r3, r3, #3
 800213c:	401a      	ands	r2, r3
 800213e:	2380      	movs	r3, #128	@ 0x80
 8002140:	00db      	lsls	r3, r3, #3
 8002142:	429a      	cmp	r2, r3
 8002144:	d101      	bne.n	800214a <LL_RCC_HSI_IsReady+0x1a>
 8002146:	2301      	movs	r3, #1
 8002148:	e000      	b.n	800214c <LL_RCC_HSI_IsReady+0x1c>
 800214a:	2300      	movs	r3, #0
}
 800214c:	0018      	movs	r0, r3
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	46c0      	nop			@ (mov r8, r8)
 8002154:	40021000 	.word	0x40021000

08002158 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002160:	4b06      	ldr	r3, [pc, #24]	@ (800217c <LL_RCC_SetSysClkSource+0x24>)
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	2207      	movs	r2, #7
 8002166:	4393      	bics	r3, r2
 8002168:	0019      	movs	r1, r3
 800216a:	4b04      	ldr	r3, [pc, #16]	@ (800217c <LL_RCC_SetSysClkSource+0x24>)
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	430a      	orrs	r2, r1
 8002170:	609a      	str	r2, [r3, #8]
}
 8002172:	46c0      	nop			@ (mov r8, r8)
 8002174:	46bd      	mov	sp, r7
 8002176:	b002      	add	sp, #8
 8002178:	bd80      	pop	{r7, pc}
 800217a:	46c0      	nop			@ (mov r8, r8)
 800217c:	40021000 	.word	0x40021000

08002180 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_LSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002184:	4b03      	ldr	r3, [pc, #12]	@ (8002194 <LL_RCC_GetSysClkSource+0x14>)
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	2238      	movs	r2, #56	@ 0x38
 800218a:	4013      	ands	r3, r2
}
 800218c:	0018      	movs	r0, r3
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	46c0      	nop			@ (mov r8, r8)
 8002194:	40021000 	.word	0x40021000

08002198 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80021a0:	4b06      	ldr	r3, [pc, #24]	@ (80021bc <LL_RCC_SetAHBPrescaler+0x24>)
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	4a06      	ldr	r2, [pc, #24]	@ (80021c0 <LL_RCC_SetAHBPrescaler+0x28>)
 80021a6:	4013      	ands	r3, r2
 80021a8:	0019      	movs	r1, r3
 80021aa:	4b04      	ldr	r3, [pc, #16]	@ (80021bc <LL_RCC_SetAHBPrescaler+0x24>)
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	430a      	orrs	r2, r1
 80021b0:	609a      	str	r2, [r3, #8]
}
 80021b2:	46c0      	nop			@ (mov r8, r8)
 80021b4:	46bd      	mov	sp, r7
 80021b6:	b002      	add	sp, #8
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	46c0      	nop			@ (mov r8, r8)
 80021bc:	40021000 	.word	0x40021000
 80021c0:	fffff0ff 	.word	0xfffff0ff

080021c4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 80021cc:	4b06      	ldr	r3, [pc, #24]	@ (80021e8 <LL_RCC_SetAPB1Prescaler+0x24>)
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	4a06      	ldr	r2, [pc, #24]	@ (80021ec <LL_RCC_SetAPB1Prescaler+0x28>)
 80021d2:	4013      	ands	r3, r2
 80021d4:	0019      	movs	r1, r3
 80021d6:	4b04      	ldr	r3, [pc, #16]	@ (80021e8 <LL_RCC_SetAPB1Prescaler+0x24>)
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	430a      	orrs	r2, r1
 80021dc:	609a      	str	r2, [r3, #8]
}
 80021de:	46c0      	nop			@ (mov r8, r8)
 80021e0:	46bd      	mov	sp, r7
 80021e2:	b002      	add	sp, #8
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	46c0      	nop			@ (mov r8, r8)
 80021e8:	40021000 	.word	0x40021000
 80021ec:	ffff8fff 	.word	0xffff8fff

080021f0 <LL_GPIO_SetOutputPin>:
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	683a      	ldr	r2, [r7, #0]
 80021fe:	619a      	str	r2, [r3, #24]
}
 8002200:	46c0      	nop			@ (mov r8, r8)
 8002202:	46bd      	mov	sp, r7
 8002204:	b002      	add	sp, #8
 8002206:	bd80      	pop	{r7, pc}

08002208 <LL_GPIO_ResetOutputPin>:
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002218:	46c0      	nop			@ (mov r8, r8)
 800221a:	46bd      	mov	sp, r7
 800221c:	b002      	add	sp, #8
 800221e:	bd80      	pop	{r7, pc}

08002220 <main>:
static void SystemClock_Config();
static void setup();


uint8_t tmpval = 0;
int main(void) {
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
	setup();
 8002224:	f000 f832 	bl	800228c <setup>
	while (1) {
		handler_comdata();
 8002228:	f7ff fe9a 	bl	8001f60 <handler_comdata>
		if((uint32_t)(u32MiliCount - u32lastprint) >= 1000){
 800222c:	4b14      	ldr	r3, [pc, #80]	@ (8002280 <main+0x60>)
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	4b14      	ldr	r3, [pc, #80]	@ (8002284 <main+0x64>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	1ad2      	subs	r2, r2, r3
 8002236:	23fa      	movs	r3, #250	@ 0xfa
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	429a      	cmp	r2, r3
 800223c:	d3f4      	bcc.n	8002228 <main+0x8>
			u32lastprint = u32MiliCount;
 800223e:	4b10      	ldr	r3, [pc, #64]	@ (8002280 <main+0x60>)
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	4b10      	ldr	r3, [pc, #64]	@ (8002284 <main+0x64>)
 8002244:	601a      	str	r2, [r3, #0]
			if (tmpval) {
 8002246:	4b10      	ldr	r3, [pc, #64]	@ (8002288 <main+0x68>)
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d00b      	beq.n	8002266 <main+0x46>
				tmpval = 0;
 800224e:	4b0e      	ldr	r3, [pc, #56]	@ (8002288 <main+0x68>)
 8002250:	2200      	movs	r2, #0
 8002252:	701a      	strb	r2, [r3, #0]
				LED_MCU_ON();
 8002254:	2380      	movs	r3, #128	@ 0x80
 8002256:	005a      	lsls	r2, r3, #1
 8002258:	23a0      	movs	r3, #160	@ 0xa0
 800225a:	05db      	lsls	r3, r3, #23
 800225c:	0011      	movs	r1, r2
 800225e:	0018      	movs	r0, r3
 8002260:	f7ff ffd2 	bl	8002208 <LL_GPIO_ResetOutputPin>
 8002264:	e7e0      	b.n	8002228 <main+0x8>
			} else {
				tmpval = 1;
 8002266:	4b08      	ldr	r3, [pc, #32]	@ (8002288 <main+0x68>)
 8002268:	2201      	movs	r2, #1
 800226a:	701a      	strb	r2, [r3, #0]
				LED_MCU_OFF();
 800226c:	2380      	movs	r3, #128	@ 0x80
 800226e:	005a      	lsls	r2, r3, #1
 8002270:	23a0      	movs	r3, #160	@ 0xa0
 8002272:	05db      	lsls	r3, r3, #23
 8002274:	0011      	movs	r1, r2
 8002276:	0018      	movs	r0, r3
 8002278:	f7ff ffba 	bl	80021f0 <LL_GPIO_SetOutputPin>
		handler_comdata();
 800227c:	e7d4      	b.n	8002228 <main+0x8>
 800227e:	46c0      	nop			@ (mov r8, r8)
 8002280:	20000c78 	.word	0x20000c78
 8002284:	20000c80 	.word	0x20000c80
 8002288:	20000c8c 	.word	0x20000c8c

0800228c <setup>:
			}
		}
	}
}

static void setup(){
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
	SystemClock_Config();
 8002290:	f000 f84e 	bl	8002330 <SystemClock_Config>
	DP_RxQueue = queue_init(DP_RX_QUEUE_MAX_SIZE);
 8002294:	2014      	movs	r0, #20
 8002296:	f000 f8bd 	bl	8002414 <queue_init>
 800229a:	0002      	movs	r2, r0
 800229c:	4b20      	ldr	r3, [pc, #128]	@ (8002320 <setup+0x94>)
 800229e:	601a      	str	r2, [r3, #0]
	DP_TxQueue = queue_init(DP_TX_QUEUE_MAX_SIZE);
 80022a0:	2014      	movs	r0, #20
 80022a2:	f000 f8b7 	bl	8002414 <queue_init>
 80022a6:	0002      	movs	r2, r0
 80022a8:	4b1e      	ldr	r3, [pc, #120]	@ (8002324 <setup+0x98>)
 80022aa:	601a      	str	r2, [r3, #0]

	COM_DEBUG_init(115200);
 80022ac:	23e1      	movs	r3, #225	@ 0xe1
 80022ae:	025b      	lsls	r3, r3, #9
 80022b0:	0018      	movs	r0, r3
 80022b2:	f7ff f9cf 	bl	8001654 <USART2_setup>
	COM_RS485_init(9600);
 80022b6:	2396      	movs	r3, #150	@ 0x96
 80022b8:	019b      	lsls	r3, r3, #6
 80022ba:	0018      	movs	r0, r3
 80022bc:	f7ff f990 	bl	80015e0 <USART1_setup>
	MCP4278_i2c_init();
 80022c0:	f7fe fb58 	bl	8000974 <I2C2_Init>
	pin_init();
 80022c4:	f7fe fa0c 	bl	80006e0 <pin_init>
	MCP4728_WriteChannel(0, 1024); // Kênh A ~ 50%
 80022c8:	2380      	movs	r3, #128	@ 0x80
 80022ca:	00db      	lsls	r3, r3, #3
 80022cc:	0019      	movs	r1, r3
 80022ce:	2000      	movs	r0, #0
 80022d0:	f000 f860 	bl	8002394 <MCP4728_WriteChannel>
	MCP4728_WriteChannel(1, 512); // Kênh B ~ 25%
 80022d4:	2380      	movs	r3, #128	@ 0x80
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	0019      	movs	r1, r3
 80022da:	2001      	movs	r0, #1
 80022dc:	f000 f85a 	bl	8002394 <MCP4728_WriteChannel>
	MCP4728_WriteChannel(2, 512); // Kênh C ~ 75%
 80022e0:	2380      	movs	r3, #128	@ 0x80
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	0019      	movs	r1, r3
 80022e6:	2002      	movs	r0, #2
 80022e8:	f000 f854 	bl	8002394 <MCP4728_WriteChannel>
	MCP4728_WriteChannel(3, 512); // Kênh D = Max
 80022ec:	2380      	movs	r3, #128	@ 0x80
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	0019      	movs	r1, r3
 80022f2:	2003      	movs	r0, #3
 80022f4:	f000 f84e 	bl	8002394 <MCP4728_WriteChannel>
	LOG("PCB3 INIT DONE \r\n");
 80022f8:	4a0b      	ldr	r2, [pc, #44]	@ (8002328 <setup+0x9c>)
 80022fa:	4b0c      	ldr	r3, [pc, #48]	@ (800232c <setup+0xa0>)
 80022fc:	0011      	movs	r1, r2
 80022fe:	0018      	movs	r0, r3
 8002300:	f000 f9fe 	bl	8002700 <siprintf>
 8002304:	4b09      	ldr	r3, [pc, #36]	@ (800232c <setup+0xa0>)
 8002306:	0018      	movs	r0, r3
 8002308:	f7fd fefc 	bl	8000104 <strlen>
 800230c:	0001      	movs	r1, r0
 800230e:	23fa      	movs	r3, #250	@ 0xfa
 8002310:	009a      	lsls	r2, r3, #2
 8002312:	4b06      	ldr	r3, [pc, #24]	@ (800232c <setup+0xa0>)
 8002314:	0018      	movs	r0, r3
 8002316:	f7ff fa81 	bl	800181c <USART2_TX_transmit>
}
 800231a:	46c0      	nop			@ (mov r8, r8)
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	20000c84 	.word	0x20000c84
 8002324:	20000c88 	.word	0x20000c88
 8002328:	08002ef0 	.word	0x08002ef0
 800232c:	20000070 	.word	0x20000070

08002330 <SystemClock_Config>:


static void SystemClock_Config() {
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
	/* Set APB1 prescaler*/
	LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
	SystemCoreClockUpdate();
	SysTick_Config(SystemCoreClock / 1000);
#else
	  LL_RCC_HSI_Enable();
 8002334:	f7ff feee 	bl	8002114 <LL_RCC_HSI_Enable>
	  while(LL_RCC_HSI_IsReady() != 1);
 8002338:	46c0      	nop			@ (mov r8, r8)
 800233a:	f7ff fef9 	bl	8002130 <LL_RCC_HSI_IsReady>
 800233e:	0003      	movs	r3, r0
 8002340:	2b01      	cmp	r3, #1
 8002342:	d1fa      	bne.n	800233a <SystemClock_Config+0xa>
	  /* Set AHB prescaler*/
	  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8002344:	2000      	movs	r0, #0
 8002346:	f7ff ff27 	bl	8002198 <LL_RCC_SetAHBPrescaler>
	  /* Sysclk activation on the HSI */
	  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 800234a:	2000      	movs	r0, #0
 800234c:	f7ff ff04 	bl	8002158 <LL_RCC_SetSysClkSource>
	  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI);
 8002350:	46c0      	nop			@ (mov r8, r8)
 8002352:	f7ff ff15 	bl	8002180 <LL_RCC_GetSysClkSource>
 8002356:	1e03      	subs	r3, r0, #0
 8002358:	d1fb      	bne.n	8002352 <SystemClock_Config+0x22>
	  /* Set APB1 prescaler*/
	  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 800235a:	2000      	movs	r0, #0
 800235c:	f7ff ff32 	bl	80021c4 <LL_RCC_SetAPB1Prescaler>
	  LL_Init1msTick(16000000);
 8002360:	4b0a      	ldr	r3, [pc, #40]	@ (800238c <SystemClock_Config+0x5c>)
 8002362:	0018      	movs	r0, r3
 8002364:	f7fe f97c 	bl	8000660 <LL_Init1msTick>
	  /* Update CMSIS variable (which can be updated also through SystemCoreClockUpdate function) */
	  LL_SetSystemCoreClock(16000000);
 8002368:	4b08      	ldr	r3, [pc, #32]	@ (800238c <SystemClock_Config+0x5c>)
 800236a:	0018      	movs	r0, r3
 800236c:	f7fe f988 	bl	8000680 <LL_SetSystemCoreClock>
	  SysTick_Config(SystemCoreClock / 1000);
 8002370:	4b07      	ldr	r3, [pc, #28]	@ (8002390 <SystemClock_Config+0x60>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	22fa      	movs	r2, #250	@ 0xfa
 8002376:	0091      	lsls	r1, r2, #2
 8002378:	0018      	movs	r0, r3
 800237a:	f7fd fed5 	bl	8000128 <__udivsi3>
 800237e:	0003      	movs	r3, r0
 8002380:	0018      	movs	r0, r3
 8002382:	f7ff fea3 	bl	80020cc <SysTick_Config>
#endif
}
 8002386:	46c0      	nop			@ (mov r8, r8)
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	00f42400 	.word	0x00f42400
 8002390:	20000000 	.word	0x20000000

08002394 <MCP4728_WriteChannel>:

	if (value > 4095) value = 4095;
	I2C2_WriteBuf(MCP4728_I2C_ADDR, data, 2);
}
#else
void MCP4728_WriteChannel(uint8_t channel, uint16_t value){
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	0002      	movs	r2, r0
 800239c:	1dfb      	adds	r3, r7, #7
 800239e:	701a      	strb	r2, [r3, #0]
 80023a0:	1d3b      	adds	r3, r7, #4
 80023a2:	1c0a      	adds	r2, r1, #0
 80023a4:	801a      	strh	r2, [r3, #0]
	uint8_t data[3];
	//uint32_t timeout;

	uint8_t sequential_write_cmd = MCP4728_MULTI_IR_CMD;
 80023a6:	210f      	movs	r1, #15
 80023a8:	187b      	adds	r3, r7, r1
 80023aa:	2240      	movs	r2, #64	@ 0x40
 80023ac:	701a      	strb	r2, [r3, #0]
	sequential_write_cmd |= (channel << 1);
 80023ae:	1dfb      	adds	r3, r7, #7
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	b25b      	sxtb	r3, r3
 80023b4:	18db      	adds	r3, r3, r3
 80023b6:	b25a      	sxtb	r2, r3
 80023b8:	187b      	adds	r3, r7, r1
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	b25b      	sxtb	r3, r3
 80023be:	4313      	orrs	r3, r2
 80023c0:	b25a      	sxtb	r2, r3
 80023c2:	187b      	adds	r3, r7, r1
 80023c4:	701a      	strb	r2, [r3, #0]
	data[0] = sequential_write_cmd;
 80023c6:	200c      	movs	r0, #12
 80023c8:	183b      	adds	r3, r7, r0
 80023ca:	187a      	adds	r2, r7, r1
 80023cc:	7812      	ldrb	r2, [r2, #0]
 80023ce:	701a      	strb	r2, [r3, #0]

	data[1] = value >> 8; // CMD + D11..D8
 80023d0:	1d3b      	adds	r3, r7, #4
 80023d2:	881b      	ldrh	r3, [r3, #0]
 80023d4:	0a1b      	lsrs	r3, r3, #8
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	b2da      	uxtb	r2, r3
 80023da:	183b      	adds	r3, r7, r0
 80023dc:	705a      	strb	r2, [r3, #1]
    data[2] = value & 0xFF;                                  // D7..D0
 80023de:	1d3b      	adds	r3, r7, #4
 80023e0:	881b      	ldrh	r3, [r3, #0]
 80023e2:	b2da      	uxtb	r2, r3
 80023e4:	183b      	adds	r3, r7, r0
 80023e6:	709a      	strb	r2, [r3, #2]

	if (value > 4095) value = 4095;
 80023e8:	1d3b      	adds	r3, r7, #4
 80023ea:	881a      	ldrh	r2, [r3, #0]
 80023ec:	2380      	movs	r3, #128	@ 0x80
 80023ee:	015b      	lsls	r3, r3, #5
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d302      	bcc.n	80023fa <MCP4728_WriteChannel+0x66>
 80023f4:	1d3b      	adds	r3, r7, #4
 80023f6:	4a06      	ldr	r2, [pc, #24]	@ (8002410 <MCP4728_WriteChannel+0x7c>)
 80023f8:	801a      	strh	r2, [r3, #0]
	I2C2_WriteBuf(MCP4728_I2C_ADDR, data, 3);
 80023fa:	230c      	movs	r3, #12
 80023fc:	18fb      	adds	r3, r7, r3
 80023fe:	2203      	movs	r2, #3
 8002400:	0019      	movs	r1, r3
 8002402:	20c0      	movs	r0, #192	@ 0xc0
 8002404:	f7fe fb42 	bl	8000a8c <I2C2_WriteBuf>
}
 8002408:	46c0      	nop			@ (mov r8, r8)
 800240a:	46bd      	mov	sp, r7
 800240c:	b004      	add	sp, #16
 800240e:	bd80      	pop	{r7, pc}
 8002410:	00000fff 	.word	0x00000fff

08002414 <queue_init>:
#include <stdlib.h>
#include "queue.h"

queue_t * queue_init(int size) {
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
	queue_t * queue;
	int newSize = size + 1;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	3301      	adds	r3, #1
 8002420:	60fb      	str	r3, [r7, #12]
	queue = (queue_t *) malloc(sizeof(queue_t));
 8002422:	2014      	movs	r0, #20
 8002424:	f000 f8a6 	bl	8002574 <malloc>
 8002428:	0003      	movs	r3, r0
 800242a:	60bb      	str	r3, [r7, #8]
	queue->elements = (DataType_T *) malloc(newSize * sizeof(DataType_T));
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	0018      	movs	r0, r3
 8002432:	f000 f89f 	bl	8002574 <malloc>
 8002436:	0003      	movs	r3, r0
 8002438:	001a      	movs	r2, r3
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	609a      	str	r2, [r3, #8]
	queue->tail = queue->head = &queue->elements[0];
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	689a      	ldr	r2, [r3, #8]
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	611a      	str	r2, [r3, #16]
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	691a      	ldr	r2, [r3, #16]
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	60da      	str	r2, [r3, #12]
	queue->size = newSize;
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	68fa      	ldr	r2, [r7, #12]
 8002452:	601a      	str	r2, [r3, #0]
	return queue;
 8002454:	68bb      	ldr	r3, [r7, #8]
}
 8002456:	0018      	movs	r0, r3
 8002458:	46bd      	mov	sp, r7
 800245a:	b004      	add	sp, #16
 800245c:	bd80      	pop	{r7, pc}

0800245e <queue_put>:

int queue_put(queue_t *queue, void * data) {
 800245e:	b580      	push	{r7, lr}
 8002460:	b084      	sub	sp, #16
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
 8002466:	6039      	str	r1, [r7, #0]
	DataType_T * nextTail;
	nextTail = queue->tail + 1;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	3304      	adds	r3, #4
 800246e:	60fb      	str	r3, [r7, #12]
	if (nextTail == &queue->elements[queue->size]) {
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	689a      	ldr	r2, [r3, #8]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	18d3      	adds	r3, r2, r3
 800247c:	68fa      	ldr	r2, [r7, #12]
 800247e:	429a      	cmp	r2, r3
 8002480:	d102      	bne.n	8002488 <queue_put+0x2a>
		/* Wrap around. */
		nextTail = &queue->elements[0];
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	60fb      	str	r3, [r7, #12]
	}

	if (nextTail == queue->head) {
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	691b      	ldr	r3, [r3, #16]
 800248c:	68fa      	ldr	r2, [r7, #12]
 800248e:	429a      	cmp	r2, r3
 8002490:	d101      	bne.n	8002496 <queue_put+0x38>
		return 0;
 8002492:	2300      	movs	r3, #0
 8002494:	e00c      	b.n	80024b0 <queue_put+0x52>
	} else {
		*queue->tail = (DataType_T) data;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	683a      	ldr	r2, [r7, #0]
 800249c:	601a      	str	r2, [r3, #0]
		queue->tail = nextTail;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	68fa      	ldr	r2, [r7, #12]
 80024a2:	60da      	str	r2, [r3, #12]

		queue->count++;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	1c5a      	adds	r2, r3, #1
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	605a      	str	r2, [r3, #4]
		return 1;
 80024ae:	2301      	movs	r3, #1
	}
}
 80024b0:	0018      	movs	r0, r3
 80024b2:	46bd      	mov	sp, r7
 80024b4:	b004      	add	sp, #16
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <queue_get>:

int queue_get(queue_t *queue, DataType_T *dataptr) {
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
	if (queue->tail == queue->head) {
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	68da      	ldr	r2, [r3, #12]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	691b      	ldr	r3, [r3, #16]
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d104      	bne.n	80024d8 <queue_get+0x20>
		/* Queue is empty. */
		queue->count = 0;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2200      	movs	r2, #0
 80024d2:	605a      	str	r2, [r3, #4]
		return 0;
 80024d4:	2300      	movs	r3, #0
 80024d6:	e01f      	b.n	8002518 <queue_get+0x60>
	}
	DataType_T * tmp = (queue->head++); //lay data cua head, trong head co dia chi pointer tiep theo
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	691b      	ldr	r3, [r3, #16]
 80024dc:	1d19      	adds	r1, r3, #4
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	6111      	str	r1, [r2, #16]
 80024e2:	60fb      	str	r3, [r7, #12]
	memcpy(dataptr, tmp, sizeof(DataType_T));
 80024e4:	68f9      	ldr	r1, [r7, #12]
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	2204      	movs	r2, #4
 80024ea:	0018      	movs	r0, r3
 80024ec:	f000 f970 	bl	80027d0 <memcpy>

	if (queue->head == &queue->elements[queue->size]) {
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	691a      	ldr	r2, [r3, #16]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6899      	ldr	r1, [r3, #8]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	18cb      	adds	r3, r1, r3
 8002500:	429a      	cmp	r2, r3
 8002502:	d103      	bne.n	800250c <queue_get+0x54>
		/* Wrap around. */
		queue->head = &queue->elements[0];
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	689a      	ldr	r2, [r3, #8]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	611a      	str	r2, [r3, #16]
	}
	queue->count--;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	1e5a      	subs	r2, r3, #1
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	605a      	str	r2, [r3, #4]

	return 1;
 8002516:	2301      	movs	r3, #1
}
 8002518:	0018      	movs	r0, r3
 800251a:	46bd      	mov	sp, r7
 800251c:	b004      	add	sp, #16
 800251e:	bd80      	pop	{r7, pc}

08002520 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002520:	480d      	ldr	r0, [pc, #52]	@ (8002558 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002522:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002524:	f7ff fcb6 	bl	8001e94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002528:	480c      	ldr	r0, [pc, #48]	@ (800255c <LoopForever+0x6>)
  ldr r1, =_edata
 800252a:	490d      	ldr	r1, [pc, #52]	@ (8002560 <LoopForever+0xa>)
  ldr r2, =_sidata
 800252c:	4a0d      	ldr	r2, [pc, #52]	@ (8002564 <LoopForever+0xe>)
  movs r3, #0
 800252e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002530:	e002      	b.n	8002538 <LoopCopyDataInit>

08002532 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002532:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002534:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002536:	3304      	adds	r3, #4

08002538 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002538:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800253a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800253c:	d3f9      	bcc.n	8002532 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800253e:	4a0a      	ldr	r2, [pc, #40]	@ (8002568 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002540:	4c0a      	ldr	r4, [pc, #40]	@ (800256c <LoopForever+0x16>)
  movs r3, #0
 8002542:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002544:	e001      	b.n	800254a <LoopFillZerobss>

08002546 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002546:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002548:	3204      	adds	r2, #4

0800254a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800254a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800254c:	d3fb      	bcc.n	8002546 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800254e:	f000 f919 	bl	8002784 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002552:	f7ff fe65 	bl	8002220 <main>

08002556 <LoopForever>:

LoopForever:
  b LoopForever
 8002556:	e7fe      	b.n	8002556 <LoopForever>
  ldr   r0, =_estack
 8002558:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800255c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002560:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8002564:	08002f78 	.word	0x08002f78
  ldr r2, =_sbss
 8002568:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 800256c:	20000dd8 	.word	0x20000dd8

08002570 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002570:	e7fe      	b.n	8002570 <ADC_IRQHandler>
	...

08002574 <malloc>:
 8002574:	b510      	push	{r4, lr}
 8002576:	4b03      	ldr	r3, [pc, #12]	@ (8002584 <malloc+0x10>)
 8002578:	0001      	movs	r1, r0
 800257a:	6818      	ldr	r0, [r3, #0]
 800257c:	f000 f830 	bl	80025e0 <_malloc_r>
 8002580:	bd10      	pop	{r4, pc}
 8002582:	46c0      	nop			@ (mov r8, r8)
 8002584:	20000004 	.word	0x20000004

08002588 <free>:
 8002588:	b510      	push	{r4, lr}
 800258a:	4b03      	ldr	r3, [pc, #12]	@ (8002598 <free+0x10>)
 800258c:	0001      	movs	r1, r0
 800258e:	6818      	ldr	r0, [r3, #0]
 8002590:	f000 f928 	bl	80027e4 <_free_r>
 8002594:	bd10      	pop	{r4, pc}
 8002596:	46c0      	nop			@ (mov r8, r8)
 8002598:	20000004 	.word	0x20000004

0800259c <sbrk_aligned>:
 800259c:	b570      	push	{r4, r5, r6, lr}
 800259e:	4e0f      	ldr	r6, [pc, #60]	@ (80025dc <sbrk_aligned+0x40>)
 80025a0:	000d      	movs	r5, r1
 80025a2:	6831      	ldr	r1, [r6, #0]
 80025a4:	0004      	movs	r4, r0
 80025a6:	2900      	cmp	r1, #0
 80025a8:	d102      	bne.n	80025b0 <sbrk_aligned+0x14>
 80025aa:	f000 f8d3 	bl	8002754 <_sbrk_r>
 80025ae:	6030      	str	r0, [r6, #0]
 80025b0:	0029      	movs	r1, r5
 80025b2:	0020      	movs	r0, r4
 80025b4:	f000 f8ce 	bl	8002754 <_sbrk_r>
 80025b8:	1c43      	adds	r3, r0, #1
 80025ba:	d103      	bne.n	80025c4 <sbrk_aligned+0x28>
 80025bc:	2501      	movs	r5, #1
 80025be:	426d      	negs	r5, r5
 80025c0:	0028      	movs	r0, r5
 80025c2:	bd70      	pop	{r4, r5, r6, pc}
 80025c4:	2303      	movs	r3, #3
 80025c6:	1cc5      	adds	r5, r0, #3
 80025c8:	439d      	bics	r5, r3
 80025ca:	42a8      	cmp	r0, r5
 80025cc:	d0f8      	beq.n	80025c0 <sbrk_aligned+0x24>
 80025ce:	1a29      	subs	r1, r5, r0
 80025d0:	0020      	movs	r0, r4
 80025d2:	f000 f8bf 	bl	8002754 <_sbrk_r>
 80025d6:	3001      	adds	r0, #1
 80025d8:	d1f2      	bne.n	80025c0 <sbrk_aligned+0x24>
 80025da:	e7ef      	b.n	80025bc <sbrk_aligned+0x20>
 80025dc:	20000c90 	.word	0x20000c90

080025e0 <_malloc_r>:
 80025e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80025e2:	2203      	movs	r2, #3
 80025e4:	1ccb      	adds	r3, r1, #3
 80025e6:	4393      	bics	r3, r2
 80025e8:	3308      	adds	r3, #8
 80025ea:	0005      	movs	r5, r0
 80025ec:	001f      	movs	r7, r3
 80025ee:	2b0c      	cmp	r3, #12
 80025f0:	d234      	bcs.n	800265c <_malloc_r+0x7c>
 80025f2:	270c      	movs	r7, #12
 80025f4:	42b9      	cmp	r1, r7
 80025f6:	d833      	bhi.n	8002660 <_malloc_r+0x80>
 80025f8:	0028      	movs	r0, r5
 80025fa:	f000 f871 	bl	80026e0 <__malloc_lock>
 80025fe:	4e37      	ldr	r6, [pc, #220]	@ (80026dc <_malloc_r+0xfc>)
 8002600:	6833      	ldr	r3, [r6, #0]
 8002602:	001c      	movs	r4, r3
 8002604:	2c00      	cmp	r4, #0
 8002606:	d12f      	bne.n	8002668 <_malloc_r+0x88>
 8002608:	0039      	movs	r1, r7
 800260a:	0028      	movs	r0, r5
 800260c:	f7ff ffc6 	bl	800259c <sbrk_aligned>
 8002610:	0004      	movs	r4, r0
 8002612:	1c43      	adds	r3, r0, #1
 8002614:	d15f      	bne.n	80026d6 <_malloc_r+0xf6>
 8002616:	6834      	ldr	r4, [r6, #0]
 8002618:	9400      	str	r4, [sp, #0]
 800261a:	9b00      	ldr	r3, [sp, #0]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d14a      	bne.n	80026b6 <_malloc_r+0xd6>
 8002620:	2c00      	cmp	r4, #0
 8002622:	d052      	beq.n	80026ca <_malloc_r+0xea>
 8002624:	6823      	ldr	r3, [r4, #0]
 8002626:	0028      	movs	r0, r5
 8002628:	18e3      	adds	r3, r4, r3
 800262a:	9900      	ldr	r1, [sp, #0]
 800262c:	9301      	str	r3, [sp, #4]
 800262e:	f000 f891 	bl	8002754 <_sbrk_r>
 8002632:	9b01      	ldr	r3, [sp, #4]
 8002634:	4283      	cmp	r3, r0
 8002636:	d148      	bne.n	80026ca <_malloc_r+0xea>
 8002638:	6823      	ldr	r3, [r4, #0]
 800263a:	0028      	movs	r0, r5
 800263c:	1aff      	subs	r7, r7, r3
 800263e:	0039      	movs	r1, r7
 8002640:	f7ff ffac 	bl	800259c <sbrk_aligned>
 8002644:	3001      	adds	r0, #1
 8002646:	d040      	beq.n	80026ca <_malloc_r+0xea>
 8002648:	6823      	ldr	r3, [r4, #0]
 800264a:	19db      	adds	r3, r3, r7
 800264c:	6023      	str	r3, [r4, #0]
 800264e:	6833      	ldr	r3, [r6, #0]
 8002650:	685a      	ldr	r2, [r3, #4]
 8002652:	2a00      	cmp	r2, #0
 8002654:	d133      	bne.n	80026be <_malloc_r+0xde>
 8002656:	9b00      	ldr	r3, [sp, #0]
 8002658:	6033      	str	r3, [r6, #0]
 800265a:	e019      	b.n	8002690 <_malloc_r+0xb0>
 800265c:	2b00      	cmp	r3, #0
 800265e:	dac9      	bge.n	80025f4 <_malloc_r+0x14>
 8002660:	230c      	movs	r3, #12
 8002662:	602b      	str	r3, [r5, #0]
 8002664:	2000      	movs	r0, #0
 8002666:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002668:	6821      	ldr	r1, [r4, #0]
 800266a:	1bc9      	subs	r1, r1, r7
 800266c:	d420      	bmi.n	80026b0 <_malloc_r+0xd0>
 800266e:	290b      	cmp	r1, #11
 8002670:	d90a      	bls.n	8002688 <_malloc_r+0xa8>
 8002672:	19e2      	adds	r2, r4, r7
 8002674:	6027      	str	r7, [r4, #0]
 8002676:	42a3      	cmp	r3, r4
 8002678:	d104      	bne.n	8002684 <_malloc_r+0xa4>
 800267a:	6032      	str	r2, [r6, #0]
 800267c:	6863      	ldr	r3, [r4, #4]
 800267e:	6011      	str	r1, [r2, #0]
 8002680:	6053      	str	r3, [r2, #4]
 8002682:	e005      	b.n	8002690 <_malloc_r+0xb0>
 8002684:	605a      	str	r2, [r3, #4]
 8002686:	e7f9      	b.n	800267c <_malloc_r+0x9c>
 8002688:	6862      	ldr	r2, [r4, #4]
 800268a:	42a3      	cmp	r3, r4
 800268c:	d10e      	bne.n	80026ac <_malloc_r+0xcc>
 800268e:	6032      	str	r2, [r6, #0]
 8002690:	0028      	movs	r0, r5
 8002692:	f000 f82d 	bl	80026f0 <__malloc_unlock>
 8002696:	0020      	movs	r0, r4
 8002698:	2207      	movs	r2, #7
 800269a:	300b      	adds	r0, #11
 800269c:	1d23      	adds	r3, r4, #4
 800269e:	4390      	bics	r0, r2
 80026a0:	1ac2      	subs	r2, r0, r3
 80026a2:	4298      	cmp	r0, r3
 80026a4:	d0df      	beq.n	8002666 <_malloc_r+0x86>
 80026a6:	1a1b      	subs	r3, r3, r0
 80026a8:	50a3      	str	r3, [r4, r2]
 80026aa:	e7dc      	b.n	8002666 <_malloc_r+0x86>
 80026ac:	605a      	str	r2, [r3, #4]
 80026ae:	e7ef      	b.n	8002690 <_malloc_r+0xb0>
 80026b0:	0023      	movs	r3, r4
 80026b2:	6864      	ldr	r4, [r4, #4]
 80026b4:	e7a6      	b.n	8002604 <_malloc_r+0x24>
 80026b6:	9c00      	ldr	r4, [sp, #0]
 80026b8:	6863      	ldr	r3, [r4, #4]
 80026ba:	9300      	str	r3, [sp, #0]
 80026bc:	e7ad      	b.n	800261a <_malloc_r+0x3a>
 80026be:	001a      	movs	r2, r3
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	42a3      	cmp	r3, r4
 80026c4:	d1fb      	bne.n	80026be <_malloc_r+0xde>
 80026c6:	2300      	movs	r3, #0
 80026c8:	e7da      	b.n	8002680 <_malloc_r+0xa0>
 80026ca:	230c      	movs	r3, #12
 80026cc:	0028      	movs	r0, r5
 80026ce:	602b      	str	r3, [r5, #0]
 80026d0:	f000 f80e 	bl	80026f0 <__malloc_unlock>
 80026d4:	e7c6      	b.n	8002664 <_malloc_r+0x84>
 80026d6:	6007      	str	r7, [r0, #0]
 80026d8:	e7da      	b.n	8002690 <_malloc_r+0xb0>
 80026da:	46c0      	nop			@ (mov r8, r8)
 80026dc:	20000c94 	.word	0x20000c94

080026e0 <__malloc_lock>:
 80026e0:	b510      	push	{r4, lr}
 80026e2:	4802      	ldr	r0, [pc, #8]	@ (80026ec <__malloc_lock+0xc>)
 80026e4:	f000 f872 	bl	80027cc <__retarget_lock_acquire_recursive>
 80026e8:	bd10      	pop	{r4, pc}
 80026ea:	46c0      	nop			@ (mov r8, r8)
 80026ec:	20000dd4 	.word	0x20000dd4

080026f0 <__malloc_unlock>:
 80026f0:	b510      	push	{r4, lr}
 80026f2:	4802      	ldr	r0, [pc, #8]	@ (80026fc <__malloc_unlock+0xc>)
 80026f4:	f000 f86b 	bl	80027ce <__retarget_lock_release_recursive>
 80026f8:	bd10      	pop	{r4, pc}
 80026fa:	46c0      	nop			@ (mov r8, r8)
 80026fc:	20000dd4 	.word	0x20000dd4

08002700 <siprintf>:
 8002700:	b40e      	push	{r1, r2, r3}
 8002702:	b510      	push	{r4, lr}
 8002704:	2400      	movs	r4, #0
 8002706:	490c      	ldr	r1, [pc, #48]	@ (8002738 <siprintf+0x38>)
 8002708:	b09d      	sub	sp, #116	@ 0x74
 800270a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800270c:	9002      	str	r0, [sp, #8]
 800270e:	9006      	str	r0, [sp, #24]
 8002710:	9107      	str	r1, [sp, #28]
 8002712:	9104      	str	r1, [sp, #16]
 8002714:	4809      	ldr	r0, [pc, #36]	@ (800273c <siprintf+0x3c>)
 8002716:	490a      	ldr	r1, [pc, #40]	@ (8002740 <siprintf+0x40>)
 8002718:	cb04      	ldmia	r3!, {r2}
 800271a:	9105      	str	r1, [sp, #20]
 800271c:	6800      	ldr	r0, [r0, #0]
 800271e:	a902      	add	r1, sp, #8
 8002720:	9301      	str	r3, [sp, #4]
 8002722:	941b      	str	r4, [sp, #108]	@ 0x6c
 8002724:	f000 f908 	bl	8002938 <_svfiprintf_r>
 8002728:	9b02      	ldr	r3, [sp, #8]
 800272a:	701c      	strb	r4, [r3, #0]
 800272c:	b01d      	add	sp, #116	@ 0x74
 800272e:	bc10      	pop	{r4}
 8002730:	bc08      	pop	{r3}
 8002732:	b003      	add	sp, #12
 8002734:	4718      	bx	r3
 8002736:	46c0      	nop			@ (mov r8, r8)
 8002738:	7fffffff 	.word	0x7fffffff
 800273c:	20000004 	.word	0x20000004
 8002740:	ffff0208 	.word	0xffff0208

08002744 <memset>:
 8002744:	0003      	movs	r3, r0
 8002746:	1882      	adds	r2, r0, r2
 8002748:	4293      	cmp	r3, r2
 800274a:	d100      	bne.n	800274e <memset+0xa>
 800274c:	4770      	bx	lr
 800274e:	7019      	strb	r1, [r3, #0]
 8002750:	3301      	adds	r3, #1
 8002752:	e7f9      	b.n	8002748 <memset+0x4>

08002754 <_sbrk_r>:
 8002754:	2300      	movs	r3, #0
 8002756:	b570      	push	{r4, r5, r6, lr}
 8002758:	4d06      	ldr	r5, [pc, #24]	@ (8002774 <_sbrk_r+0x20>)
 800275a:	0004      	movs	r4, r0
 800275c:	0008      	movs	r0, r1
 800275e:	602b      	str	r3, [r5, #0]
 8002760:	f7ff fb62 	bl	8001e28 <_sbrk>
 8002764:	1c43      	adds	r3, r0, #1
 8002766:	d103      	bne.n	8002770 <_sbrk_r+0x1c>
 8002768:	682b      	ldr	r3, [r5, #0]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d000      	beq.n	8002770 <_sbrk_r+0x1c>
 800276e:	6023      	str	r3, [r4, #0]
 8002770:	bd70      	pop	{r4, r5, r6, pc}
 8002772:	46c0      	nop			@ (mov r8, r8)
 8002774:	20000dd0 	.word	0x20000dd0

08002778 <__errno>:
 8002778:	4b01      	ldr	r3, [pc, #4]	@ (8002780 <__errno+0x8>)
 800277a:	6818      	ldr	r0, [r3, #0]
 800277c:	4770      	bx	lr
 800277e:	46c0      	nop			@ (mov r8, r8)
 8002780:	20000004 	.word	0x20000004

08002784 <__libc_init_array>:
 8002784:	b570      	push	{r4, r5, r6, lr}
 8002786:	2600      	movs	r6, #0
 8002788:	4c0c      	ldr	r4, [pc, #48]	@ (80027bc <__libc_init_array+0x38>)
 800278a:	4d0d      	ldr	r5, [pc, #52]	@ (80027c0 <__libc_init_array+0x3c>)
 800278c:	1b64      	subs	r4, r4, r5
 800278e:	10a4      	asrs	r4, r4, #2
 8002790:	42a6      	cmp	r6, r4
 8002792:	d109      	bne.n	80027a8 <__libc_init_array+0x24>
 8002794:	2600      	movs	r6, #0
 8002796:	f000 fb9f 	bl	8002ed8 <_init>
 800279a:	4c0a      	ldr	r4, [pc, #40]	@ (80027c4 <__libc_init_array+0x40>)
 800279c:	4d0a      	ldr	r5, [pc, #40]	@ (80027c8 <__libc_init_array+0x44>)
 800279e:	1b64      	subs	r4, r4, r5
 80027a0:	10a4      	asrs	r4, r4, #2
 80027a2:	42a6      	cmp	r6, r4
 80027a4:	d105      	bne.n	80027b2 <__libc_init_array+0x2e>
 80027a6:	bd70      	pop	{r4, r5, r6, pc}
 80027a8:	00b3      	lsls	r3, r6, #2
 80027aa:	58eb      	ldr	r3, [r5, r3]
 80027ac:	4798      	blx	r3
 80027ae:	3601      	adds	r6, #1
 80027b0:	e7ee      	b.n	8002790 <__libc_init_array+0xc>
 80027b2:	00b3      	lsls	r3, r6, #2
 80027b4:	58eb      	ldr	r3, [r5, r3]
 80027b6:	4798      	blx	r3
 80027b8:	3601      	adds	r6, #1
 80027ba:	e7f2      	b.n	80027a2 <__libc_init_array+0x1e>
 80027bc:	08002f70 	.word	0x08002f70
 80027c0:	08002f70 	.word	0x08002f70
 80027c4:	08002f74 	.word	0x08002f74
 80027c8:	08002f70 	.word	0x08002f70

080027cc <__retarget_lock_acquire_recursive>:
 80027cc:	4770      	bx	lr

080027ce <__retarget_lock_release_recursive>:
 80027ce:	4770      	bx	lr

080027d0 <memcpy>:
 80027d0:	2300      	movs	r3, #0
 80027d2:	b510      	push	{r4, lr}
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d100      	bne.n	80027da <memcpy+0xa>
 80027d8:	bd10      	pop	{r4, pc}
 80027da:	5ccc      	ldrb	r4, [r1, r3]
 80027dc:	54c4      	strb	r4, [r0, r3]
 80027de:	3301      	adds	r3, #1
 80027e0:	e7f8      	b.n	80027d4 <memcpy+0x4>
	...

080027e4 <_free_r>:
 80027e4:	b570      	push	{r4, r5, r6, lr}
 80027e6:	0005      	movs	r5, r0
 80027e8:	1e0c      	subs	r4, r1, #0
 80027ea:	d010      	beq.n	800280e <_free_r+0x2a>
 80027ec:	3c04      	subs	r4, #4
 80027ee:	6823      	ldr	r3, [r4, #0]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	da00      	bge.n	80027f6 <_free_r+0x12>
 80027f4:	18e4      	adds	r4, r4, r3
 80027f6:	0028      	movs	r0, r5
 80027f8:	f7ff ff72 	bl	80026e0 <__malloc_lock>
 80027fc:	4a1d      	ldr	r2, [pc, #116]	@ (8002874 <_free_r+0x90>)
 80027fe:	6813      	ldr	r3, [r2, #0]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d105      	bne.n	8002810 <_free_r+0x2c>
 8002804:	6063      	str	r3, [r4, #4]
 8002806:	6014      	str	r4, [r2, #0]
 8002808:	0028      	movs	r0, r5
 800280a:	f7ff ff71 	bl	80026f0 <__malloc_unlock>
 800280e:	bd70      	pop	{r4, r5, r6, pc}
 8002810:	42a3      	cmp	r3, r4
 8002812:	d908      	bls.n	8002826 <_free_r+0x42>
 8002814:	6820      	ldr	r0, [r4, #0]
 8002816:	1821      	adds	r1, r4, r0
 8002818:	428b      	cmp	r3, r1
 800281a:	d1f3      	bne.n	8002804 <_free_r+0x20>
 800281c:	6819      	ldr	r1, [r3, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	1809      	adds	r1, r1, r0
 8002822:	6021      	str	r1, [r4, #0]
 8002824:	e7ee      	b.n	8002804 <_free_r+0x20>
 8002826:	001a      	movs	r2, r3
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d001      	beq.n	8002832 <_free_r+0x4e>
 800282e:	42a3      	cmp	r3, r4
 8002830:	d9f9      	bls.n	8002826 <_free_r+0x42>
 8002832:	6811      	ldr	r1, [r2, #0]
 8002834:	1850      	adds	r0, r2, r1
 8002836:	42a0      	cmp	r0, r4
 8002838:	d10b      	bne.n	8002852 <_free_r+0x6e>
 800283a:	6820      	ldr	r0, [r4, #0]
 800283c:	1809      	adds	r1, r1, r0
 800283e:	1850      	adds	r0, r2, r1
 8002840:	6011      	str	r1, [r2, #0]
 8002842:	4283      	cmp	r3, r0
 8002844:	d1e0      	bne.n	8002808 <_free_r+0x24>
 8002846:	6818      	ldr	r0, [r3, #0]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	1841      	adds	r1, r0, r1
 800284c:	6011      	str	r1, [r2, #0]
 800284e:	6053      	str	r3, [r2, #4]
 8002850:	e7da      	b.n	8002808 <_free_r+0x24>
 8002852:	42a0      	cmp	r0, r4
 8002854:	d902      	bls.n	800285c <_free_r+0x78>
 8002856:	230c      	movs	r3, #12
 8002858:	602b      	str	r3, [r5, #0]
 800285a:	e7d5      	b.n	8002808 <_free_r+0x24>
 800285c:	6820      	ldr	r0, [r4, #0]
 800285e:	1821      	adds	r1, r4, r0
 8002860:	428b      	cmp	r3, r1
 8002862:	d103      	bne.n	800286c <_free_r+0x88>
 8002864:	6819      	ldr	r1, [r3, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	1809      	adds	r1, r1, r0
 800286a:	6021      	str	r1, [r4, #0]
 800286c:	6063      	str	r3, [r4, #4]
 800286e:	6054      	str	r4, [r2, #4]
 8002870:	e7ca      	b.n	8002808 <_free_r+0x24>
 8002872:	46c0      	nop			@ (mov r8, r8)
 8002874:	20000c94 	.word	0x20000c94

08002878 <__ssputs_r>:
 8002878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800287a:	688e      	ldr	r6, [r1, #8]
 800287c:	b085      	sub	sp, #20
 800287e:	001f      	movs	r7, r3
 8002880:	000c      	movs	r4, r1
 8002882:	680b      	ldr	r3, [r1, #0]
 8002884:	9002      	str	r0, [sp, #8]
 8002886:	9203      	str	r2, [sp, #12]
 8002888:	42be      	cmp	r6, r7
 800288a:	d830      	bhi.n	80028ee <__ssputs_r+0x76>
 800288c:	210c      	movs	r1, #12
 800288e:	5e62      	ldrsh	r2, [r4, r1]
 8002890:	2190      	movs	r1, #144	@ 0x90
 8002892:	00c9      	lsls	r1, r1, #3
 8002894:	420a      	tst	r2, r1
 8002896:	d028      	beq.n	80028ea <__ssputs_r+0x72>
 8002898:	2003      	movs	r0, #3
 800289a:	6921      	ldr	r1, [r4, #16]
 800289c:	1a5b      	subs	r3, r3, r1
 800289e:	9301      	str	r3, [sp, #4]
 80028a0:	6963      	ldr	r3, [r4, #20]
 80028a2:	4343      	muls	r3, r0
 80028a4:	9801      	ldr	r0, [sp, #4]
 80028a6:	0fdd      	lsrs	r5, r3, #31
 80028a8:	18ed      	adds	r5, r5, r3
 80028aa:	1c7b      	adds	r3, r7, #1
 80028ac:	181b      	adds	r3, r3, r0
 80028ae:	106d      	asrs	r5, r5, #1
 80028b0:	42ab      	cmp	r3, r5
 80028b2:	d900      	bls.n	80028b6 <__ssputs_r+0x3e>
 80028b4:	001d      	movs	r5, r3
 80028b6:	0552      	lsls	r2, r2, #21
 80028b8:	d528      	bpl.n	800290c <__ssputs_r+0x94>
 80028ba:	0029      	movs	r1, r5
 80028bc:	9802      	ldr	r0, [sp, #8]
 80028be:	f7ff fe8f 	bl	80025e0 <_malloc_r>
 80028c2:	1e06      	subs	r6, r0, #0
 80028c4:	d02c      	beq.n	8002920 <__ssputs_r+0xa8>
 80028c6:	9a01      	ldr	r2, [sp, #4]
 80028c8:	6921      	ldr	r1, [r4, #16]
 80028ca:	f7ff ff81 	bl	80027d0 <memcpy>
 80028ce:	89a2      	ldrh	r2, [r4, #12]
 80028d0:	4b18      	ldr	r3, [pc, #96]	@ (8002934 <__ssputs_r+0xbc>)
 80028d2:	401a      	ands	r2, r3
 80028d4:	2380      	movs	r3, #128	@ 0x80
 80028d6:	4313      	orrs	r3, r2
 80028d8:	81a3      	strh	r3, [r4, #12]
 80028da:	9b01      	ldr	r3, [sp, #4]
 80028dc:	6126      	str	r6, [r4, #16]
 80028de:	18f6      	adds	r6, r6, r3
 80028e0:	6026      	str	r6, [r4, #0]
 80028e2:	003e      	movs	r6, r7
 80028e4:	6165      	str	r5, [r4, #20]
 80028e6:	1aed      	subs	r5, r5, r3
 80028e8:	60a5      	str	r5, [r4, #8]
 80028ea:	42be      	cmp	r6, r7
 80028ec:	d900      	bls.n	80028f0 <__ssputs_r+0x78>
 80028ee:	003e      	movs	r6, r7
 80028f0:	0032      	movs	r2, r6
 80028f2:	9903      	ldr	r1, [sp, #12]
 80028f4:	6820      	ldr	r0, [r4, #0]
 80028f6:	f000 fa99 	bl	8002e2c <memmove>
 80028fa:	2000      	movs	r0, #0
 80028fc:	68a3      	ldr	r3, [r4, #8]
 80028fe:	1b9b      	subs	r3, r3, r6
 8002900:	60a3      	str	r3, [r4, #8]
 8002902:	6823      	ldr	r3, [r4, #0]
 8002904:	199b      	adds	r3, r3, r6
 8002906:	6023      	str	r3, [r4, #0]
 8002908:	b005      	add	sp, #20
 800290a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800290c:	002a      	movs	r2, r5
 800290e:	9802      	ldr	r0, [sp, #8]
 8002910:	f000 faa9 	bl	8002e66 <_realloc_r>
 8002914:	1e06      	subs	r6, r0, #0
 8002916:	d1e0      	bne.n	80028da <__ssputs_r+0x62>
 8002918:	6921      	ldr	r1, [r4, #16]
 800291a:	9802      	ldr	r0, [sp, #8]
 800291c:	f7ff ff62 	bl	80027e4 <_free_r>
 8002920:	230c      	movs	r3, #12
 8002922:	2001      	movs	r0, #1
 8002924:	9a02      	ldr	r2, [sp, #8]
 8002926:	4240      	negs	r0, r0
 8002928:	6013      	str	r3, [r2, #0]
 800292a:	89a2      	ldrh	r2, [r4, #12]
 800292c:	3334      	adds	r3, #52	@ 0x34
 800292e:	4313      	orrs	r3, r2
 8002930:	81a3      	strh	r3, [r4, #12]
 8002932:	e7e9      	b.n	8002908 <__ssputs_r+0x90>
 8002934:	fffffb7f 	.word	0xfffffb7f

08002938 <_svfiprintf_r>:
 8002938:	b5f0      	push	{r4, r5, r6, r7, lr}
 800293a:	b0a1      	sub	sp, #132	@ 0x84
 800293c:	9003      	str	r0, [sp, #12]
 800293e:	001d      	movs	r5, r3
 8002940:	898b      	ldrh	r3, [r1, #12]
 8002942:	000f      	movs	r7, r1
 8002944:	0016      	movs	r6, r2
 8002946:	061b      	lsls	r3, r3, #24
 8002948:	d511      	bpl.n	800296e <_svfiprintf_r+0x36>
 800294a:	690b      	ldr	r3, [r1, #16]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d10e      	bne.n	800296e <_svfiprintf_r+0x36>
 8002950:	2140      	movs	r1, #64	@ 0x40
 8002952:	f7ff fe45 	bl	80025e0 <_malloc_r>
 8002956:	6038      	str	r0, [r7, #0]
 8002958:	6138      	str	r0, [r7, #16]
 800295a:	2800      	cmp	r0, #0
 800295c:	d105      	bne.n	800296a <_svfiprintf_r+0x32>
 800295e:	230c      	movs	r3, #12
 8002960:	9a03      	ldr	r2, [sp, #12]
 8002962:	6013      	str	r3, [r2, #0]
 8002964:	2001      	movs	r0, #1
 8002966:	4240      	negs	r0, r0
 8002968:	e0cf      	b.n	8002b0a <_svfiprintf_r+0x1d2>
 800296a:	2340      	movs	r3, #64	@ 0x40
 800296c:	617b      	str	r3, [r7, #20]
 800296e:	2300      	movs	r3, #0
 8002970:	ac08      	add	r4, sp, #32
 8002972:	6163      	str	r3, [r4, #20]
 8002974:	3320      	adds	r3, #32
 8002976:	7663      	strb	r3, [r4, #25]
 8002978:	3310      	adds	r3, #16
 800297a:	76a3      	strb	r3, [r4, #26]
 800297c:	9507      	str	r5, [sp, #28]
 800297e:	0035      	movs	r5, r6
 8002980:	782b      	ldrb	r3, [r5, #0]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d001      	beq.n	800298a <_svfiprintf_r+0x52>
 8002986:	2b25      	cmp	r3, #37	@ 0x25
 8002988:	d148      	bne.n	8002a1c <_svfiprintf_r+0xe4>
 800298a:	1bab      	subs	r3, r5, r6
 800298c:	9305      	str	r3, [sp, #20]
 800298e:	42b5      	cmp	r5, r6
 8002990:	d00b      	beq.n	80029aa <_svfiprintf_r+0x72>
 8002992:	0032      	movs	r2, r6
 8002994:	0039      	movs	r1, r7
 8002996:	9803      	ldr	r0, [sp, #12]
 8002998:	f7ff ff6e 	bl	8002878 <__ssputs_r>
 800299c:	3001      	adds	r0, #1
 800299e:	d100      	bne.n	80029a2 <_svfiprintf_r+0x6a>
 80029a0:	e0ae      	b.n	8002b00 <_svfiprintf_r+0x1c8>
 80029a2:	6963      	ldr	r3, [r4, #20]
 80029a4:	9a05      	ldr	r2, [sp, #20]
 80029a6:	189b      	adds	r3, r3, r2
 80029a8:	6163      	str	r3, [r4, #20]
 80029aa:	782b      	ldrb	r3, [r5, #0]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d100      	bne.n	80029b2 <_svfiprintf_r+0x7a>
 80029b0:	e0a6      	b.n	8002b00 <_svfiprintf_r+0x1c8>
 80029b2:	2201      	movs	r2, #1
 80029b4:	2300      	movs	r3, #0
 80029b6:	4252      	negs	r2, r2
 80029b8:	6062      	str	r2, [r4, #4]
 80029ba:	a904      	add	r1, sp, #16
 80029bc:	3254      	adds	r2, #84	@ 0x54
 80029be:	1852      	adds	r2, r2, r1
 80029c0:	1c6e      	adds	r6, r5, #1
 80029c2:	6023      	str	r3, [r4, #0]
 80029c4:	60e3      	str	r3, [r4, #12]
 80029c6:	60a3      	str	r3, [r4, #8]
 80029c8:	7013      	strb	r3, [r2, #0]
 80029ca:	65a3      	str	r3, [r4, #88]	@ 0x58
 80029cc:	4b54      	ldr	r3, [pc, #336]	@ (8002b20 <_svfiprintf_r+0x1e8>)
 80029ce:	2205      	movs	r2, #5
 80029d0:	0018      	movs	r0, r3
 80029d2:	7831      	ldrb	r1, [r6, #0]
 80029d4:	9305      	str	r3, [sp, #20]
 80029d6:	f000 fa3b 	bl	8002e50 <memchr>
 80029da:	1c75      	adds	r5, r6, #1
 80029dc:	2800      	cmp	r0, #0
 80029de:	d11f      	bne.n	8002a20 <_svfiprintf_r+0xe8>
 80029e0:	6822      	ldr	r2, [r4, #0]
 80029e2:	06d3      	lsls	r3, r2, #27
 80029e4:	d504      	bpl.n	80029f0 <_svfiprintf_r+0xb8>
 80029e6:	2353      	movs	r3, #83	@ 0x53
 80029e8:	a904      	add	r1, sp, #16
 80029ea:	185b      	adds	r3, r3, r1
 80029ec:	2120      	movs	r1, #32
 80029ee:	7019      	strb	r1, [r3, #0]
 80029f0:	0713      	lsls	r3, r2, #28
 80029f2:	d504      	bpl.n	80029fe <_svfiprintf_r+0xc6>
 80029f4:	2353      	movs	r3, #83	@ 0x53
 80029f6:	a904      	add	r1, sp, #16
 80029f8:	185b      	adds	r3, r3, r1
 80029fa:	212b      	movs	r1, #43	@ 0x2b
 80029fc:	7019      	strb	r1, [r3, #0]
 80029fe:	7833      	ldrb	r3, [r6, #0]
 8002a00:	2b2a      	cmp	r3, #42	@ 0x2a
 8002a02:	d016      	beq.n	8002a32 <_svfiprintf_r+0xfa>
 8002a04:	0035      	movs	r5, r6
 8002a06:	2100      	movs	r1, #0
 8002a08:	200a      	movs	r0, #10
 8002a0a:	68e3      	ldr	r3, [r4, #12]
 8002a0c:	782a      	ldrb	r2, [r5, #0]
 8002a0e:	1c6e      	adds	r6, r5, #1
 8002a10:	3a30      	subs	r2, #48	@ 0x30
 8002a12:	2a09      	cmp	r2, #9
 8002a14:	d950      	bls.n	8002ab8 <_svfiprintf_r+0x180>
 8002a16:	2900      	cmp	r1, #0
 8002a18:	d111      	bne.n	8002a3e <_svfiprintf_r+0x106>
 8002a1a:	e017      	b.n	8002a4c <_svfiprintf_r+0x114>
 8002a1c:	3501      	adds	r5, #1
 8002a1e:	e7af      	b.n	8002980 <_svfiprintf_r+0x48>
 8002a20:	9b05      	ldr	r3, [sp, #20]
 8002a22:	6822      	ldr	r2, [r4, #0]
 8002a24:	1ac0      	subs	r0, r0, r3
 8002a26:	2301      	movs	r3, #1
 8002a28:	4083      	lsls	r3, r0
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	002e      	movs	r6, r5
 8002a2e:	6023      	str	r3, [r4, #0]
 8002a30:	e7cc      	b.n	80029cc <_svfiprintf_r+0x94>
 8002a32:	9b07      	ldr	r3, [sp, #28]
 8002a34:	1d19      	adds	r1, r3, #4
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	9107      	str	r1, [sp, #28]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	db01      	blt.n	8002a42 <_svfiprintf_r+0x10a>
 8002a3e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002a40:	e004      	b.n	8002a4c <_svfiprintf_r+0x114>
 8002a42:	425b      	negs	r3, r3
 8002a44:	60e3      	str	r3, [r4, #12]
 8002a46:	2302      	movs	r3, #2
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	6023      	str	r3, [r4, #0]
 8002a4c:	782b      	ldrb	r3, [r5, #0]
 8002a4e:	2b2e      	cmp	r3, #46	@ 0x2e
 8002a50:	d10c      	bne.n	8002a6c <_svfiprintf_r+0x134>
 8002a52:	786b      	ldrb	r3, [r5, #1]
 8002a54:	2b2a      	cmp	r3, #42	@ 0x2a
 8002a56:	d134      	bne.n	8002ac2 <_svfiprintf_r+0x18a>
 8002a58:	9b07      	ldr	r3, [sp, #28]
 8002a5a:	3502      	adds	r5, #2
 8002a5c:	1d1a      	adds	r2, r3, #4
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	9207      	str	r2, [sp, #28]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	da01      	bge.n	8002a6a <_svfiprintf_r+0x132>
 8002a66:	2301      	movs	r3, #1
 8002a68:	425b      	negs	r3, r3
 8002a6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8002a6c:	4e2d      	ldr	r6, [pc, #180]	@ (8002b24 <_svfiprintf_r+0x1ec>)
 8002a6e:	2203      	movs	r2, #3
 8002a70:	0030      	movs	r0, r6
 8002a72:	7829      	ldrb	r1, [r5, #0]
 8002a74:	f000 f9ec 	bl	8002e50 <memchr>
 8002a78:	2800      	cmp	r0, #0
 8002a7a:	d006      	beq.n	8002a8a <_svfiprintf_r+0x152>
 8002a7c:	2340      	movs	r3, #64	@ 0x40
 8002a7e:	1b80      	subs	r0, r0, r6
 8002a80:	4083      	lsls	r3, r0
 8002a82:	6822      	ldr	r2, [r4, #0]
 8002a84:	3501      	adds	r5, #1
 8002a86:	4313      	orrs	r3, r2
 8002a88:	6023      	str	r3, [r4, #0]
 8002a8a:	7829      	ldrb	r1, [r5, #0]
 8002a8c:	2206      	movs	r2, #6
 8002a8e:	4826      	ldr	r0, [pc, #152]	@ (8002b28 <_svfiprintf_r+0x1f0>)
 8002a90:	1c6e      	adds	r6, r5, #1
 8002a92:	7621      	strb	r1, [r4, #24]
 8002a94:	f000 f9dc 	bl	8002e50 <memchr>
 8002a98:	2800      	cmp	r0, #0
 8002a9a:	d038      	beq.n	8002b0e <_svfiprintf_r+0x1d6>
 8002a9c:	4b23      	ldr	r3, [pc, #140]	@ (8002b2c <_svfiprintf_r+0x1f4>)
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d122      	bne.n	8002ae8 <_svfiprintf_r+0x1b0>
 8002aa2:	2207      	movs	r2, #7
 8002aa4:	9b07      	ldr	r3, [sp, #28]
 8002aa6:	3307      	adds	r3, #7
 8002aa8:	4393      	bics	r3, r2
 8002aaa:	3308      	adds	r3, #8
 8002aac:	9307      	str	r3, [sp, #28]
 8002aae:	6963      	ldr	r3, [r4, #20]
 8002ab0:	9a04      	ldr	r2, [sp, #16]
 8002ab2:	189b      	adds	r3, r3, r2
 8002ab4:	6163      	str	r3, [r4, #20]
 8002ab6:	e762      	b.n	800297e <_svfiprintf_r+0x46>
 8002ab8:	4343      	muls	r3, r0
 8002aba:	0035      	movs	r5, r6
 8002abc:	2101      	movs	r1, #1
 8002abe:	189b      	adds	r3, r3, r2
 8002ac0:	e7a4      	b.n	8002a0c <_svfiprintf_r+0xd4>
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	200a      	movs	r0, #10
 8002ac6:	0019      	movs	r1, r3
 8002ac8:	3501      	adds	r5, #1
 8002aca:	6063      	str	r3, [r4, #4]
 8002acc:	782a      	ldrb	r2, [r5, #0]
 8002ace:	1c6e      	adds	r6, r5, #1
 8002ad0:	3a30      	subs	r2, #48	@ 0x30
 8002ad2:	2a09      	cmp	r2, #9
 8002ad4:	d903      	bls.n	8002ade <_svfiprintf_r+0x1a6>
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d0c8      	beq.n	8002a6c <_svfiprintf_r+0x134>
 8002ada:	9109      	str	r1, [sp, #36]	@ 0x24
 8002adc:	e7c6      	b.n	8002a6c <_svfiprintf_r+0x134>
 8002ade:	4341      	muls	r1, r0
 8002ae0:	0035      	movs	r5, r6
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	1889      	adds	r1, r1, r2
 8002ae6:	e7f1      	b.n	8002acc <_svfiprintf_r+0x194>
 8002ae8:	aa07      	add	r2, sp, #28
 8002aea:	9200      	str	r2, [sp, #0]
 8002aec:	0021      	movs	r1, r4
 8002aee:	003a      	movs	r2, r7
 8002af0:	4b0f      	ldr	r3, [pc, #60]	@ (8002b30 <_svfiprintf_r+0x1f8>)
 8002af2:	9803      	ldr	r0, [sp, #12]
 8002af4:	e000      	b.n	8002af8 <_svfiprintf_r+0x1c0>
 8002af6:	bf00      	nop
 8002af8:	9004      	str	r0, [sp, #16]
 8002afa:	9b04      	ldr	r3, [sp, #16]
 8002afc:	3301      	adds	r3, #1
 8002afe:	d1d6      	bne.n	8002aae <_svfiprintf_r+0x176>
 8002b00:	89bb      	ldrh	r3, [r7, #12]
 8002b02:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8002b04:	065b      	lsls	r3, r3, #25
 8002b06:	d500      	bpl.n	8002b0a <_svfiprintf_r+0x1d2>
 8002b08:	e72c      	b.n	8002964 <_svfiprintf_r+0x2c>
 8002b0a:	b021      	add	sp, #132	@ 0x84
 8002b0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b0e:	aa07      	add	r2, sp, #28
 8002b10:	9200      	str	r2, [sp, #0]
 8002b12:	0021      	movs	r1, r4
 8002b14:	003a      	movs	r2, r7
 8002b16:	4b06      	ldr	r3, [pc, #24]	@ (8002b30 <_svfiprintf_r+0x1f8>)
 8002b18:	9803      	ldr	r0, [sp, #12]
 8002b1a:	f000 f87b 	bl	8002c14 <_printf_i>
 8002b1e:	e7eb      	b.n	8002af8 <_svfiprintf_r+0x1c0>
 8002b20:	08002f3c 	.word	0x08002f3c
 8002b24:	08002f42 	.word	0x08002f42
 8002b28:	08002f46 	.word	0x08002f46
 8002b2c:	00000000 	.word	0x00000000
 8002b30:	08002879 	.word	0x08002879

08002b34 <_printf_common>:
 8002b34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002b36:	0016      	movs	r6, r2
 8002b38:	9301      	str	r3, [sp, #4]
 8002b3a:	688a      	ldr	r2, [r1, #8]
 8002b3c:	690b      	ldr	r3, [r1, #16]
 8002b3e:	000c      	movs	r4, r1
 8002b40:	9000      	str	r0, [sp, #0]
 8002b42:	4293      	cmp	r3, r2
 8002b44:	da00      	bge.n	8002b48 <_printf_common+0x14>
 8002b46:	0013      	movs	r3, r2
 8002b48:	0022      	movs	r2, r4
 8002b4a:	6033      	str	r3, [r6, #0]
 8002b4c:	3243      	adds	r2, #67	@ 0x43
 8002b4e:	7812      	ldrb	r2, [r2, #0]
 8002b50:	2a00      	cmp	r2, #0
 8002b52:	d001      	beq.n	8002b58 <_printf_common+0x24>
 8002b54:	3301      	adds	r3, #1
 8002b56:	6033      	str	r3, [r6, #0]
 8002b58:	6823      	ldr	r3, [r4, #0]
 8002b5a:	069b      	lsls	r3, r3, #26
 8002b5c:	d502      	bpl.n	8002b64 <_printf_common+0x30>
 8002b5e:	6833      	ldr	r3, [r6, #0]
 8002b60:	3302      	adds	r3, #2
 8002b62:	6033      	str	r3, [r6, #0]
 8002b64:	6822      	ldr	r2, [r4, #0]
 8002b66:	2306      	movs	r3, #6
 8002b68:	0015      	movs	r5, r2
 8002b6a:	401d      	ands	r5, r3
 8002b6c:	421a      	tst	r2, r3
 8002b6e:	d027      	beq.n	8002bc0 <_printf_common+0x8c>
 8002b70:	0023      	movs	r3, r4
 8002b72:	3343      	adds	r3, #67	@ 0x43
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	1e5a      	subs	r2, r3, #1
 8002b78:	4193      	sbcs	r3, r2
 8002b7a:	6822      	ldr	r2, [r4, #0]
 8002b7c:	0692      	lsls	r2, r2, #26
 8002b7e:	d430      	bmi.n	8002be2 <_printf_common+0xae>
 8002b80:	0022      	movs	r2, r4
 8002b82:	9901      	ldr	r1, [sp, #4]
 8002b84:	9800      	ldr	r0, [sp, #0]
 8002b86:	9d08      	ldr	r5, [sp, #32]
 8002b88:	3243      	adds	r2, #67	@ 0x43
 8002b8a:	47a8      	blx	r5
 8002b8c:	3001      	adds	r0, #1
 8002b8e:	d025      	beq.n	8002bdc <_printf_common+0xa8>
 8002b90:	2206      	movs	r2, #6
 8002b92:	6823      	ldr	r3, [r4, #0]
 8002b94:	2500      	movs	r5, #0
 8002b96:	4013      	ands	r3, r2
 8002b98:	2b04      	cmp	r3, #4
 8002b9a:	d105      	bne.n	8002ba8 <_printf_common+0x74>
 8002b9c:	6833      	ldr	r3, [r6, #0]
 8002b9e:	68e5      	ldr	r5, [r4, #12]
 8002ba0:	1aed      	subs	r5, r5, r3
 8002ba2:	43eb      	mvns	r3, r5
 8002ba4:	17db      	asrs	r3, r3, #31
 8002ba6:	401d      	ands	r5, r3
 8002ba8:	68a3      	ldr	r3, [r4, #8]
 8002baa:	6922      	ldr	r2, [r4, #16]
 8002bac:	4293      	cmp	r3, r2
 8002bae:	dd01      	ble.n	8002bb4 <_printf_common+0x80>
 8002bb0:	1a9b      	subs	r3, r3, r2
 8002bb2:	18ed      	adds	r5, r5, r3
 8002bb4:	2600      	movs	r6, #0
 8002bb6:	42b5      	cmp	r5, r6
 8002bb8:	d120      	bne.n	8002bfc <_printf_common+0xc8>
 8002bba:	2000      	movs	r0, #0
 8002bbc:	e010      	b.n	8002be0 <_printf_common+0xac>
 8002bbe:	3501      	adds	r5, #1
 8002bc0:	68e3      	ldr	r3, [r4, #12]
 8002bc2:	6832      	ldr	r2, [r6, #0]
 8002bc4:	1a9b      	subs	r3, r3, r2
 8002bc6:	42ab      	cmp	r3, r5
 8002bc8:	ddd2      	ble.n	8002b70 <_printf_common+0x3c>
 8002bca:	0022      	movs	r2, r4
 8002bcc:	2301      	movs	r3, #1
 8002bce:	9901      	ldr	r1, [sp, #4]
 8002bd0:	9800      	ldr	r0, [sp, #0]
 8002bd2:	9f08      	ldr	r7, [sp, #32]
 8002bd4:	3219      	adds	r2, #25
 8002bd6:	47b8      	blx	r7
 8002bd8:	3001      	adds	r0, #1
 8002bda:	d1f0      	bne.n	8002bbe <_printf_common+0x8a>
 8002bdc:	2001      	movs	r0, #1
 8002bde:	4240      	negs	r0, r0
 8002be0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002be2:	2030      	movs	r0, #48	@ 0x30
 8002be4:	18e1      	adds	r1, r4, r3
 8002be6:	3143      	adds	r1, #67	@ 0x43
 8002be8:	7008      	strb	r0, [r1, #0]
 8002bea:	0021      	movs	r1, r4
 8002bec:	1c5a      	adds	r2, r3, #1
 8002bee:	3145      	adds	r1, #69	@ 0x45
 8002bf0:	7809      	ldrb	r1, [r1, #0]
 8002bf2:	18a2      	adds	r2, r4, r2
 8002bf4:	3243      	adds	r2, #67	@ 0x43
 8002bf6:	3302      	adds	r3, #2
 8002bf8:	7011      	strb	r1, [r2, #0]
 8002bfa:	e7c1      	b.n	8002b80 <_printf_common+0x4c>
 8002bfc:	0022      	movs	r2, r4
 8002bfe:	2301      	movs	r3, #1
 8002c00:	9901      	ldr	r1, [sp, #4]
 8002c02:	9800      	ldr	r0, [sp, #0]
 8002c04:	9f08      	ldr	r7, [sp, #32]
 8002c06:	321a      	adds	r2, #26
 8002c08:	47b8      	blx	r7
 8002c0a:	3001      	adds	r0, #1
 8002c0c:	d0e6      	beq.n	8002bdc <_printf_common+0xa8>
 8002c0e:	3601      	adds	r6, #1
 8002c10:	e7d1      	b.n	8002bb6 <_printf_common+0x82>
	...

08002c14 <_printf_i>:
 8002c14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c16:	b08b      	sub	sp, #44	@ 0x2c
 8002c18:	9206      	str	r2, [sp, #24]
 8002c1a:	000a      	movs	r2, r1
 8002c1c:	3243      	adds	r2, #67	@ 0x43
 8002c1e:	9307      	str	r3, [sp, #28]
 8002c20:	9005      	str	r0, [sp, #20]
 8002c22:	9203      	str	r2, [sp, #12]
 8002c24:	7e0a      	ldrb	r2, [r1, #24]
 8002c26:	000c      	movs	r4, r1
 8002c28:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8002c2a:	2a78      	cmp	r2, #120	@ 0x78
 8002c2c:	d809      	bhi.n	8002c42 <_printf_i+0x2e>
 8002c2e:	2a62      	cmp	r2, #98	@ 0x62
 8002c30:	d80b      	bhi.n	8002c4a <_printf_i+0x36>
 8002c32:	2a00      	cmp	r2, #0
 8002c34:	d100      	bne.n	8002c38 <_printf_i+0x24>
 8002c36:	e0ba      	b.n	8002dae <_printf_i+0x19a>
 8002c38:	497a      	ldr	r1, [pc, #488]	@ (8002e24 <_printf_i+0x210>)
 8002c3a:	9104      	str	r1, [sp, #16]
 8002c3c:	2a58      	cmp	r2, #88	@ 0x58
 8002c3e:	d100      	bne.n	8002c42 <_printf_i+0x2e>
 8002c40:	e08e      	b.n	8002d60 <_printf_i+0x14c>
 8002c42:	0025      	movs	r5, r4
 8002c44:	3542      	adds	r5, #66	@ 0x42
 8002c46:	702a      	strb	r2, [r5, #0]
 8002c48:	e022      	b.n	8002c90 <_printf_i+0x7c>
 8002c4a:	0010      	movs	r0, r2
 8002c4c:	3863      	subs	r0, #99	@ 0x63
 8002c4e:	2815      	cmp	r0, #21
 8002c50:	d8f7      	bhi.n	8002c42 <_printf_i+0x2e>
 8002c52:	f7fd fa5f 	bl	8000114 <__gnu_thumb1_case_shi>
 8002c56:	0016      	.short	0x0016
 8002c58:	fff6001f 	.word	0xfff6001f
 8002c5c:	fff6fff6 	.word	0xfff6fff6
 8002c60:	001ffff6 	.word	0x001ffff6
 8002c64:	fff6fff6 	.word	0xfff6fff6
 8002c68:	fff6fff6 	.word	0xfff6fff6
 8002c6c:	0036009f 	.word	0x0036009f
 8002c70:	fff6007e 	.word	0xfff6007e
 8002c74:	00b0fff6 	.word	0x00b0fff6
 8002c78:	0036fff6 	.word	0x0036fff6
 8002c7c:	fff6fff6 	.word	0xfff6fff6
 8002c80:	0082      	.short	0x0082
 8002c82:	0025      	movs	r5, r4
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	3542      	adds	r5, #66	@ 0x42
 8002c88:	1d11      	adds	r1, r2, #4
 8002c8a:	6019      	str	r1, [r3, #0]
 8002c8c:	6813      	ldr	r3, [r2, #0]
 8002c8e:	702b      	strb	r3, [r5, #0]
 8002c90:	2301      	movs	r3, #1
 8002c92:	e09e      	b.n	8002dd2 <_printf_i+0x1be>
 8002c94:	6818      	ldr	r0, [r3, #0]
 8002c96:	6809      	ldr	r1, [r1, #0]
 8002c98:	1d02      	adds	r2, r0, #4
 8002c9a:	060d      	lsls	r5, r1, #24
 8002c9c:	d50b      	bpl.n	8002cb6 <_printf_i+0xa2>
 8002c9e:	6806      	ldr	r6, [r0, #0]
 8002ca0:	601a      	str	r2, [r3, #0]
 8002ca2:	2e00      	cmp	r6, #0
 8002ca4:	da03      	bge.n	8002cae <_printf_i+0x9a>
 8002ca6:	232d      	movs	r3, #45	@ 0x2d
 8002ca8:	9a03      	ldr	r2, [sp, #12]
 8002caa:	4276      	negs	r6, r6
 8002cac:	7013      	strb	r3, [r2, #0]
 8002cae:	4b5d      	ldr	r3, [pc, #372]	@ (8002e24 <_printf_i+0x210>)
 8002cb0:	270a      	movs	r7, #10
 8002cb2:	9304      	str	r3, [sp, #16]
 8002cb4:	e018      	b.n	8002ce8 <_printf_i+0xd4>
 8002cb6:	6806      	ldr	r6, [r0, #0]
 8002cb8:	601a      	str	r2, [r3, #0]
 8002cba:	0649      	lsls	r1, r1, #25
 8002cbc:	d5f1      	bpl.n	8002ca2 <_printf_i+0x8e>
 8002cbe:	b236      	sxth	r6, r6
 8002cc0:	e7ef      	b.n	8002ca2 <_printf_i+0x8e>
 8002cc2:	6808      	ldr	r0, [r1, #0]
 8002cc4:	6819      	ldr	r1, [r3, #0]
 8002cc6:	c940      	ldmia	r1!, {r6}
 8002cc8:	0605      	lsls	r5, r0, #24
 8002cca:	d402      	bmi.n	8002cd2 <_printf_i+0xbe>
 8002ccc:	0640      	lsls	r0, r0, #25
 8002cce:	d500      	bpl.n	8002cd2 <_printf_i+0xbe>
 8002cd0:	b2b6      	uxth	r6, r6
 8002cd2:	6019      	str	r1, [r3, #0]
 8002cd4:	4b53      	ldr	r3, [pc, #332]	@ (8002e24 <_printf_i+0x210>)
 8002cd6:	270a      	movs	r7, #10
 8002cd8:	9304      	str	r3, [sp, #16]
 8002cda:	2a6f      	cmp	r2, #111	@ 0x6f
 8002cdc:	d100      	bne.n	8002ce0 <_printf_i+0xcc>
 8002cde:	3f02      	subs	r7, #2
 8002ce0:	0023      	movs	r3, r4
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	3343      	adds	r3, #67	@ 0x43
 8002ce6:	701a      	strb	r2, [r3, #0]
 8002ce8:	6863      	ldr	r3, [r4, #4]
 8002cea:	60a3      	str	r3, [r4, #8]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	db06      	blt.n	8002cfe <_printf_i+0xea>
 8002cf0:	2104      	movs	r1, #4
 8002cf2:	6822      	ldr	r2, [r4, #0]
 8002cf4:	9d03      	ldr	r5, [sp, #12]
 8002cf6:	438a      	bics	r2, r1
 8002cf8:	6022      	str	r2, [r4, #0]
 8002cfa:	4333      	orrs	r3, r6
 8002cfc:	d00c      	beq.n	8002d18 <_printf_i+0x104>
 8002cfe:	9d03      	ldr	r5, [sp, #12]
 8002d00:	0030      	movs	r0, r6
 8002d02:	0039      	movs	r1, r7
 8002d04:	f7fd fa96 	bl	8000234 <__aeabi_uidivmod>
 8002d08:	9b04      	ldr	r3, [sp, #16]
 8002d0a:	3d01      	subs	r5, #1
 8002d0c:	5c5b      	ldrb	r3, [r3, r1]
 8002d0e:	702b      	strb	r3, [r5, #0]
 8002d10:	0033      	movs	r3, r6
 8002d12:	0006      	movs	r6, r0
 8002d14:	429f      	cmp	r7, r3
 8002d16:	d9f3      	bls.n	8002d00 <_printf_i+0xec>
 8002d18:	2f08      	cmp	r7, #8
 8002d1a:	d109      	bne.n	8002d30 <_printf_i+0x11c>
 8002d1c:	6823      	ldr	r3, [r4, #0]
 8002d1e:	07db      	lsls	r3, r3, #31
 8002d20:	d506      	bpl.n	8002d30 <_printf_i+0x11c>
 8002d22:	6862      	ldr	r2, [r4, #4]
 8002d24:	6923      	ldr	r3, [r4, #16]
 8002d26:	429a      	cmp	r2, r3
 8002d28:	dc02      	bgt.n	8002d30 <_printf_i+0x11c>
 8002d2a:	2330      	movs	r3, #48	@ 0x30
 8002d2c:	3d01      	subs	r5, #1
 8002d2e:	702b      	strb	r3, [r5, #0]
 8002d30:	9b03      	ldr	r3, [sp, #12]
 8002d32:	1b5b      	subs	r3, r3, r5
 8002d34:	6123      	str	r3, [r4, #16]
 8002d36:	9b07      	ldr	r3, [sp, #28]
 8002d38:	0021      	movs	r1, r4
 8002d3a:	9300      	str	r3, [sp, #0]
 8002d3c:	9805      	ldr	r0, [sp, #20]
 8002d3e:	9b06      	ldr	r3, [sp, #24]
 8002d40:	aa09      	add	r2, sp, #36	@ 0x24
 8002d42:	f7ff fef7 	bl	8002b34 <_printf_common>
 8002d46:	3001      	adds	r0, #1
 8002d48:	d148      	bne.n	8002ddc <_printf_i+0x1c8>
 8002d4a:	2001      	movs	r0, #1
 8002d4c:	4240      	negs	r0, r0
 8002d4e:	b00b      	add	sp, #44	@ 0x2c
 8002d50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d52:	2220      	movs	r2, #32
 8002d54:	6809      	ldr	r1, [r1, #0]
 8002d56:	430a      	orrs	r2, r1
 8002d58:	6022      	str	r2, [r4, #0]
 8002d5a:	2278      	movs	r2, #120	@ 0x78
 8002d5c:	4932      	ldr	r1, [pc, #200]	@ (8002e28 <_printf_i+0x214>)
 8002d5e:	9104      	str	r1, [sp, #16]
 8002d60:	0021      	movs	r1, r4
 8002d62:	3145      	adds	r1, #69	@ 0x45
 8002d64:	700a      	strb	r2, [r1, #0]
 8002d66:	6819      	ldr	r1, [r3, #0]
 8002d68:	6822      	ldr	r2, [r4, #0]
 8002d6a:	c940      	ldmia	r1!, {r6}
 8002d6c:	0610      	lsls	r0, r2, #24
 8002d6e:	d402      	bmi.n	8002d76 <_printf_i+0x162>
 8002d70:	0650      	lsls	r0, r2, #25
 8002d72:	d500      	bpl.n	8002d76 <_printf_i+0x162>
 8002d74:	b2b6      	uxth	r6, r6
 8002d76:	6019      	str	r1, [r3, #0]
 8002d78:	07d3      	lsls	r3, r2, #31
 8002d7a:	d502      	bpl.n	8002d82 <_printf_i+0x16e>
 8002d7c:	2320      	movs	r3, #32
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	6023      	str	r3, [r4, #0]
 8002d82:	2e00      	cmp	r6, #0
 8002d84:	d001      	beq.n	8002d8a <_printf_i+0x176>
 8002d86:	2710      	movs	r7, #16
 8002d88:	e7aa      	b.n	8002ce0 <_printf_i+0xcc>
 8002d8a:	2220      	movs	r2, #32
 8002d8c:	6823      	ldr	r3, [r4, #0]
 8002d8e:	4393      	bics	r3, r2
 8002d90:	6023      	str	r3, [r4, #0]
 8002d92:	e7f8      	b.n	8002d86 <_printf_i+0x172>
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	680d      	ldr	r5, [r1, #0]
 8002d98:	1d10      	adds	r0, r2, #4
 8002d9a:	6949      	ldr	r1, [r1, #20]
 8002d9c:	6018      	str	r0, [r3, #0]
 8002d9e:	6813      	ldr	r3, [r2, #0]
 8002da0:	062e      	lsls	r6, r5, #24
 8002da2:	d501      	bpl.n	8002da8 <_printf_i+0x194>
 8002da4:	6019      	str	r1, [r3, #0]
 8002da6:	e002      	b.n	8002dae <_printf_i+0x19a>
 8002da8:	066d      	lsls	r5, r5, #25
 8002daa:	d5fb      	bpl.n	8002da4 <_printf_i+0x190>
 8002dac:	8019      	strh	r1, [r3, #0]
 8002dae:	2300      	movs	r3, #0
 8002db0:	9d03      	ldr	r5, [sp, #12]
 8002db2:	6123      	str	r3, [r4, #16]
 8002db4:	e7bf      	b.n	8002d36 <_printf_i+0x122>
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	1d11      	adds	r1, r2, #4
 8002dba:	6019      	str	r1, [r3, #0]
 8002dbc:	6815      	ldr	r5, [r2, #0]
 8002dbe:	2100      	movs	r1, #0
 8002dc0:	0028      	movs	r0, r5
 8002dc2:	6862      	ldr	r2, [r4, #4]
 8002dc4:	f000 f844 	bl	8002e50 <memchr>
 8002dc8:	2800      	cmp	r0, #0
 8002dca:	d001      	beq.n	8002dd0 <_printf_i+0x1bc>
 8002dcc:	1b40      	subs	r0, r0, r5
 8002dce:	6060      	str	r0, [r4, #4]
 8002dd0:	6863      	ldr	r3, [r4, #4]
 8002dd2:	6123      	str	r3, [r4, #16]
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	9a03      	ldr	r2, [sp, #12]
 8002dd8:	7013      	strb	r3, [r2, #0]
 8002dda:	e7ac      	b.n	8002d36 <_printf_i+0x122>
 8002ddc:	002a      	movs	r2, r5
 8002dde:	6923      	ldr	r3, [r4, #16]
 8002de0:	9906      	ldr	r1, [sp, #24]
 8002de2:	9805      	ldr	r0, [sp, #20]
 8002de4:	9d07      	ldr	r5, [sp, #28]
 8002de6:	47a8      	blx	r5
 8002de8:	3001      	adds	r0, #1
 8002dea:	d0ae      	beq.n	8002d4a <_printf_i+0x136>
 8002dec:	6823      	ldr	r3, [r4, #0]
 8002dee:	079b      	lsls	r3, r3, #30
 8002df0:	d415      	bmi.n	8002e1e <_printf_i+0x20a>
 8002df2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002df4:	68e0      	ldr	r0, [r4, #12]
 8002df6:	4298      	cmp	r0, r3
 8002df8:	daa9      	bge.n	8002d4e <_printf_i+0x13a>
 8002dfa:	0018      	movs	r0, r3
 8002dfc:	e7a7      	b.n	8002d4e <_printf_i+0x13a>
 8002dfe:	0022      	movs	r2, r4
 8002e00:	2301      	movs	r3, #1
 8002e02:	9906      	ldr	r1, [sp, #24]
 8002e04:	9805      	ldr	r0, [sp, #20]
 8002e06:	9e07      	ldr	r6, [sp, #28]
 8002e08:	3219      	adds	r2, #25
 8002e0a:	47b0      	blx	r6
 8002e0c:	3001      	adds	r0, #1
 8002e0e:	d09c      	beq.n	8002d4a <_printf_i+0x136>
 8002e10:	3501      	adds	r5, #1
 8002e12:	68e3      	ldr	r3, [r4, #12]
 8002e14:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002e16:	1a9b      	subs	r3, r3, r2
 8002e18:	42ab      	cmp	r3, r5
 8002e1a:	dcf0      	bgt.n	8002dfe <_printf_i+0x1ea>
 8002e1c:	e7e9      	b.n	8002df2 <_printf_i+0x1de>
 8002e1e:	2500      	movs	r5, #0
 8002e20:	e7f7      	b.n	8002e12 <_printf_i+0x1fe>
 8002e22:	46c0      	nop			@ (mov r8, r8)
 8002e24:	08002f4d 	.word	0x08002f4d
 8002e28:	08002f5e 	.word	0x08002f5e

08002e2c <memmove>:
 8002e2c:	b510      	push	{r4, lr}
 8002e2e:	4288      	cmp	r0, r1
 8002e30:	d902      	bls.n	8002e38 <memmove+0xc>
 8002e32:	188b      	adds	r3, r1, r2
 8002e34:	4298      	cmp	r0, r3
 8002e36:	d308      	bcc.n	8002e4a <memmove+0x1e>
 8002e38:	2300      	movs	r3, #0
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d007      	beq.n	8002e4e <memmove+0x22>
 8002e3e:	5ccc      	ldrb	r4, [r1, r3]
 8002e40:	54c4      	strb	r4, [r0, r3]
 8002e42:	3301      	adds	r3, #1
 8002e44:	e7f9      	b.n	8002e3a <memmove+0xe>
 8002e46:	5c8b      	ldrb	r3, [r1, r2]
 8002e48:	5483      	strb	r3, [r0, r2]
 8002e4a:	3a01      	subs	r2, #1
 8002e4c:	d2fb      	bcs.n	8002e46 <memmove+0x1a>
 8002e4e:	bd10      	pop	{r4, pc}

08002e50 <memchr>:
 8002e50:	b2c9      	uxtb	r1, r1
 8002e52:	1882      	adds	r2, r0, r2
 8002e54:	4290      	cmp	r0, r2
 8002e56:	d101      	bne.n	8002e5c <memchr+0xc>
 8002e58:	2000      	movs	r0, #0
 8002e5a:	4770      	bx	lr
 8002e5c:	7803      	ldrb	r3, [r0, #0]
 8002e5e:	428b      	cmp	r3, r1
 8002e60:	d0fb      	beq.n	8002e5a <memchr+0xa>
 8002e62:	3001      	adds	r0, #1
 8002e64:	e7f6      	b.n	8002e54 <memchr+0x4>

08002e66 <_realloc_r>:
 8002e66:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002e68:	0006      	movs	r6, r0
 8002e6a:	000c      	movs	r4, r1
 8002e6c:	0015      	movs	r5, r2
 8002e6e:	2900      	cmp	r1, #0
 8002e70:	d105      	bne.n	8002e7e <_realloc_r+0x18>
 8002e72:	0011      	movs	r1, r2
 8002e74:	f7ff fbb4 	bl	80025e0 <_malloc_r>
 8002e78:	0004      	movs	r4, r0
 8002e7a:	0020      	movs	r0, r4
 8002e7c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002e7e:	2a00      	cmp	r2, #0
 8002e80:	d103      	bne.n	8002e8a <_realloc_r+0x24>
 8002e82:	f7ff fcaf 	bl	80027e4 <_free_r>
 8002e86:	002c      	movs	r4, r5
 8002e88:	e7f7      	b.n	8002e7a <_realloc_r+0x14>
 8002e8a:	f000 f81c 	bl	8002ec6 <_malloc_usable_size_r>
 8002e8e:	0007      	movs	r7, r0
 8002e90:	4285      	cmp	r5, r0
 8002e92:	d802      	bhi.n	8002e9a <_realloc_r+0x34>
 8002e94:	0843      	lsrs	r3, r0, #1
 8002e96:	42ab      	cmp	r3, r5
 8002e98:	d3ef      	bcc.n	8002e7a <_realloc_r+0x14>
 8002e9a:	0029      	movs	r1, r5
 8002e9c:	0030      	movs	r0, r6
 8002e9e:	f7ff fb9f 	bl	80025e0 <_malloc_r>
 8002ea2:	9001      	str	r0, [sp, #4]
 8002ea4:	2800      	cmp	r0, #0
 8002ea6:	d101      	bne.n	8002eac <_realloc_r+0x46>
 8002ea8:	9c01      	ldr	r4, [sp, #4]
 8002eaa:	e7e6      	b.n	8002e7a <_realloc_r+0x14>
 8002eac:	002a      	movs	r2, r5
 8002eae:	42bd      	cmp	r5, r7
 8002eb0:	d900      	bls.n	8002eb4 <_realloc_r+0x4e>
 8002eb2:	003a      	movs	r2, r7
 8002eb4:	0021      	movs	r1, r4
 8002eb6:	9801      	ldr	r0, [sp, #4]
 8002eb8:	f7ff fc8a 	bl	80027d0 <memcpy>
 8002ebc:	0021      	movs	r1, r4
 8002ebe:	0030      	movs	r0, r6
 8002ec0:	f7ff fc90 	bl	80027e4 <_free_r>
 8002ec4:	e7f0      	b.n	8002ea8 <_realloc_r+0x42>

08002ec6 <_malloc_usable_size_r>:
 8002ec6:	1f0b      	subs	r3, r1, #4
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	1f18      	subs	r0, r3, #4
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	da01      	bge.n	8002ed4 <_malloc_usable_size_r+0xe>
 8002ed0:	580b      	ldr	r3, [r1, r0]
 8002ed2:	18c0      	adds	r0, r0, r3
 8002ed4:	4770      	bx	lr
	...

08002ed8 <_init>:
 8002ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eda:	46c0      	nop			@ (mov r8, r8)
 8002edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ede:	bc08      	pop	{r3}
 8002ee0:	469e      	mov	lr, r3
 8002ee2:	4770      	bx	lr

08002ee4 <_fini>:
 8002ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ee6:	46c0      	nop			@ (mov r8, r8)
 8002ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eea:	bc08      	pop	{r3}
 8002eec:	469e      	mov	lr, r3
 8002eee:	4770      	bx	lr
